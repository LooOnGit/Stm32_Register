
FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c4  080046c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046cc  080046cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004980  20000010  080046e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004990  080046e4  00024990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001076d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002537  00000000  00000000  000307ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00032ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  000338f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025b4  00000000  00000000  00034400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c94f  00000000  00000000  000369b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c945  00000000  00000000  00043303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfc48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a4  00000000  00000000  000cfc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045e0 	.word	0x080045e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080045e0 	.word	0x080045e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f9d0 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f83e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f89a 	bl	800061c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f001 f908 	bl	80016fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temp */
  tempHandle = osMessageQueueNew (32, sizeof(uint16_t), &temp_attributes);
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <main+0x5c>)
 80004ee:	2102      	movs	r1, #2
 80004f0:	2020      	movs	r0, #32
 80004f2:	f001 f9fa 	bl	80018ea <osMessageQueueNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <main+0x60>)
 80004fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(func1, NULL, &task1_attributes);
 80004fc:	4a0f      	ldr	r2, [pc, #60]	; (800053c <main+0x64>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0x68>)
 8000502:	f001 f945 	bl	8001790 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <main+0x6c>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(func2, NULL, &task2_attributes);
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <main+0x70>)
 800050e:	2100      	movs	r1, #0
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <main+0x74>)
 8000512:	f001 f93d 	bl	8001790 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x78>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(StartTask03, NULL, &task3_attributes);
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <main+0x7c>)
 800051e:	2100      	movs	r1, #0
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <main+0x80>)
 8000522:	f001 f935 	bl	8001790 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <main+0x84>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f001 f90a 	bl	8001744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x58>
 8000532:	bf00      	nop
 8000534:	0800469c 	.word	0x0800469c
 8000538:	2000493c 	.word	0x2000493c
 800053c:	08004630 	.word	0x08004630
 8000540:	080006a5 	.word	0x080006a5
 8000544:	20004940 	.word	0x20004940
 8000548:	08004654 	.word	0x08004654
 800054c:	080006dd 	.word	0x080006dd
 8000550:	20004948 	.word	0x20004948
 8000554:	08004678 	.word	0x08004678
 8000558:	0800072d 	.word	0x0800072d
 800055c:	20004944 	.word	0x20004944

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f82e 	bl	80045d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xb4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xb4>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <SystemClock_Config+0xb8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <SystemClock_Config+0xb8>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fc4b 	bl	8000e6c <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005dc:	f000 f8be 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 feae 	bl	800135c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000606:	f000 f8a9 	bl	800075c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_GPIO_Init+0x80>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a18      	ldr	r2, [pc, #96]	; (800069c <MX_GPIO_Init+0x80>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_GPIO_Init+0x80>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_GPIO_Init+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <MX_GPIO_Init+0x80>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_GPIO_Init+0x80>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <MX_GPIO_Init+0x84>)
 8000672:	f000 fbe1 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000676:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_GPIO_Init+0x84>)
 8000690:	f000 fa4e 	bl	8000b30 <HAL_GPIO_Init>

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020c00 	.word	0x40020c00

080006a4 <func1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func1 */
void func1(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4809      	ldr	r0, [pc, #36]	; (80006d8 <func1+0x34>)
 80006b4:	f000 fbc0 	bl	8000e38 <HAL_GPIO_WritePin>
    osDelay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 f8fa 	bl	80018b4 <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <func1+0x34>)
 80006c8:	f000 fbb6 	bl	8000e38 <HAL_GPIO_WritePin>
        osDelay(1000);
 80006cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d0:	f001 f8f0 	bl	80018b4 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006d4:	e7ea      	b.n	80006ac <func1+0x8>
 80006d6:	bf00      	nop
 80006d8:	40020c00 	.word	0x40020c00

080006dc <func2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func2 */
void func2(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func2 */
  /* Infinite loop */
	int temp = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  osMessageQueueGet(tempHandle,&temp, 0, 1000);
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <func2+0x48>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	f107 010c 	add.w	r1, r7, #12
 80006f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f4:	2200      	movs	r2, #0
 80006f6:	f001 f9cb 	bl	8001a90 <osMessageQueueGet>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <func2+0x4c>)
 8000702:	f000 fb99 	bl	8000e38 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000706:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070a:	f001 f8d3 	bl	80018b4 <osDelay>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <func2+0x4c>)
 8000716:	f000 fb8f 	bl	8000e38 <HAL_GPIO_WritePin>
	  osDelay(500);
 800071a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071e:	f001 f8c9 	bl	80018b4 <osDelay>
	  osMessageQueueGet(tempHandle,&temp, 0, 1000);
 8000722:	e7e1      	b.n	80006e8 <func2+0xc>
 8000724:	2000493c 	.word	0x2000493c
 8000728:	40020c00 	.word	0x40020c00

0800072c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	int i = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  i++;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
	  osMessageQueuePut(tempHandle, &i, 0, 1000);
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <StartTask03+0x2c>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	f107 010c 	add.w	r1, r7, #12
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	2200      	movs	r2, #0
 800074c:	f001 f940 	bl	80019d0 <osMessageQueuePut>
	  osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f001 f8af 	bl	80018b4 <osDelay>
	  i++;
 8000756:	e7ef      	b.n	8000738 <StartTask03+0xc>
 8000758:	2000493c 	.word	0x2000493c

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x54>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <HAL_MspInit+0x54>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x54>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x54>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <HAL_MspInit+0x54>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x54>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210f      	movs	r1, #15
 80007aa:	f06f 0001 	mvn.w	r0, #1
 80007ae:	f000 f996 	bl	8000ade <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <NMI_Handler+0x4>

080007c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler+0x4>

080007d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f898 	bl	8000924 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007f4:	f002 fe56 	bl	80034a4 <xTaskGetSchedulerState>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d001      	beq.n	8000802 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007fe:	f003 fc3b 	bl	8004078 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000832:	490e      	ldr	r1, [pc, #56]	; (800086c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000848:	4c0b      	ldr	r4, [pc, #44]	; (8000878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000856:	f7ff ffd7 	bl	8000808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085a:	f003 fe87 	bl	800456c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085e:	f7ff fe3b 	bl	80004d8 <main>
  bx  lr    
 8000862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000870:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 8000874:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000878:	20004990 	.word	0x20004990

0800087c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC_IRQHandler>
	...

08000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_Init+0x40>)
 800088a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_Init+0x40>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_Init+0x40>)
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_Init+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_Init+0x40>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f90d 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff ff58 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023c00 	.word	0x40023c00

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f917 	bl	8000b16 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f8ed 	bl	8000ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x20>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x24>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_IncTick+0x24>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008
 8000948:	2000494c 	.word	0x2000494c

0800094c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_GetTick+0x14>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	2000494c 	.word	0x2000494c

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff8e 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff47 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff5c 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff8e 	bl	8000a1c <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5d 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffb0 	bl	8000a84 <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	e159      	b.n	8000e00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8148 	bne.w	8000dfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d005      	beq.n	8000b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d130      	bne.n	8000be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4013      	ands	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	f003 0201 	and.w	r2, r3, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d017      	beq.n	8000c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d123      	bne.n	8000c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	69b9      	ldr	r1, [r7, #24]
 8000c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0203 	and.w	r2, r3, #3
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80a2 	beq.w	8000dfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b57      	ldr	r3, [pc, #348]	; (8000e18 <HAL_GPIO_Init+0x2e8>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a56      	ldr	r2, [pc, #344]	; (8000e18 <HAL_GPIO_Init+0x2e8>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b54      	ldr	r3, [pc, #336]	; (8000e18 <HAL_GPIO_Init+0x2e8>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd2:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <HAL_GPIO_Init+0x2ec>)
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_GPIO_Init+0x2f0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d019      	beq.n	8000d32 <HAL_GPIO_Init+0x202>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2f4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d013      	beq.n	8000d2e <HAL_GPIO_Init+0x1fe>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <HAL_GPIO_Init+0x2f8>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d00d      	beq.n	8000d2a <HAL_GPIO_Init+0x1fa>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d007      	beq.n	8000d26 <HAL_GPIO_Init+0x1f6>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <HAL_GPIO_Init+0x300>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_GPIO_Init+0x1f2>
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e008      	b.n	8000d34 <HAL_GPIO_Init+0x204>
 8000d22:	2307      	movs	r3, #7
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x204>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x204>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x204>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x204>
 8000d32:	2300      	movs	r3, #0
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	f002 0203 	and.w	r2, r2, #3
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d44:	4935      	ldr	r1, [pc, #212]	; (8000e1c <HAL_GPIO_Init+0x2ec>)
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d76:	4a2f      	ldr	r2, [pc, #188]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000da0:	4a24      	ldr	r2, [pc, #144]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dca:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df4:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_GPIO_Init+0x304>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	f67f aea2 	bls.w	8000b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40013c00 	.word	0x40013c00

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
 8000e44:	4613      	mov	r3, r2
 8000e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e48:	787b      	ldrb	r3, [r7, #1]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e54:	e003      	b.n	8000e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	041a      	lsls	r2, r3, #16
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	619a      	str	r2, [r3, #24]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e264      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d075      	beq.n	8000f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e8a:	4ba3      	ldr	r3, [pc, #652]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d00c      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e96:	4ba0      	ldr	r3, [pc, #640]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d112      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ea2:	4b9d      	ldr	r3, [pc, #628]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eae:	d10b      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb0:	4b99      	ldr	r3, [pc, #612]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d05b      	beq.n	8000f74 <HAL_RCC_OscConfig+0x108>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d157      	bne.n	8000f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e23f      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d106      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x74>
 8000ed2:	4b91      	ldr	r3, [pc, #580]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a90      	ldr	r2, [pc, #576]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e01d      	b.n	8000f1c <HAL_RCC_OscConfig+0xb0>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x98>
 8000eea:	4b8b      	ldr	r3, [pc, #556]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a8a      	ldr	r2, [pc, #552]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b88      	ldr	r3, [pc, #544]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a87      	ldr	r2, [pc, #540]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e00b      	b.n	8000f1c <HAL_RCC_OscConfig+0xb0>
 8000f04:	4b84      	ldr	r3, [pc, #528]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a83      	ldr	r2, [pc, #524]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b81      	ldr	r3, [pc, #516]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a80      	ldr	r2, [pc, #512]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fd12 	bl	800094c <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fd0e 	bl	800094c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e204      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4b76      	ldr	r3, [pc, #472]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0xc0>
 8000f4a:	e014      	b.n	8000f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcfe 	bl	800094c <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fcfa 	bl	800094c <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1f0      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	4b6c      	ldr	r3, [pc, #432]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0xe8>
 8000f72:	e000      	b.n	8000f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d063      	beq.n	800104a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d11c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d116      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	4b5c      	ldr	r3, [pc, #368]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_RCC_OscConfig+0x152>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d001      	beq.n	8000fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e1c4      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4b56      	ldr	r3, [pc, #344]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4952      	ldr	r1, [pc, #328]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	e03a      	b.n	800104a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d020      	beq.n	800101e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fdc:	4b4f      	ldr	r3, [pc, #316]	; (800111c <HAL_RCC_OscConfig+0x2b0>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fcb3 	bl	800094c <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fcaf 	bl	800094c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e1a5      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4940      	ldr	r1, [pc, #256]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
 800101c:	e015      	b.n	800104a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <HAL_RCC_OscConfig+0x2b0>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fc92 	bl	800094c <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fc8e 	bl	800094c <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e184      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d030      	beq.n	80010b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d016      	beq.n	800108c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_RCC_OscConfig+0x2b4>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001064:	f7ff fc72 	bl	800094c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fc6e 	bl	800094c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e164      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x200>
 800108a:	e015      	b.n	80010b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <HAL_RCC_OscConfig+0x2b4>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fc5b 	bl	800094c <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109a:	f7ff fc57 	bl	800094c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e14d      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 80010ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f0      	bne.n	800109a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80a0 	beq.w	8001206 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10f      	bne.n	80010f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f2:	2301      	movs	r3, #1
 80010f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_RCC_OscConfig+0x2b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d121      	bne.n	8001146 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_RCC_OscConfig+0x2b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_RCC_OscConfig+0x2b8>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110e:	f7ff fc1d 	bl	800094c <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	e011      	b.n	800113a <HAL_RCC_OscConfig+0x2ce>
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	42470000 	.word	0x42470000
 8001120:	42470e80 	.word	0x42470e80
 8001124:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001128:	f7ff fc10 	bl	800094c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e106      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x4e4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x2f0>
 800114e:	4b81      	ldr	r3, [pc, #516]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001152:	4a80      	ldr	r2, [pc, #512]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6713      	str	r3, [r2, #112]	; 0x70
 800115a:	e01c      	b.n	8001196 <HAL_RCC_OscConfig+0x32a>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b05      	cmp	r3, #5
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0x312>
 8001164:	4b7b      	ldr	r3, [pc, #492]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001168:	4a7a      	ldr	r2, [pc, #488]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6713      	str	r3, [r2, #112]	; 0x70
 8001170:	4b78      	ldr	r3, [pc, #480]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001174:	4a77      	ldr	r2, [pc, #476]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6713      	str	r3, [r2, #112]	; 0x70
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0x32a>
 800117e:	4b75      	ldr	r3, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001182:	4a74      	ldr	r2, [pc, #464]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6713      	str	r3, [r2, #112]	; 0x70
 800118a:	4b72      	ldr	r3, [pc, #456]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 800118c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118e:	4a71      	ldr	r2, [pc, #452]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001190:	f023 0304 	bic.w	r3, r3, #4
 8001194:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d015      	beq.n	80011ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff fbd5 	bl	800094c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	e00a      	b.n	80011bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a6:	f7ff fbd1 	bl	800094c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e0c5      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0ee      	beq.n	80011a6 <HAL_RCC_OscConfig+0x33a>
 80011c8:	e014      	b.n	80011f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fbbf 	bl	800094c <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fbbb 	bl	800094c <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0af      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1ee      	bne.n	80011d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d105      	bne.n	8001206 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a55      	ldr	r2, [pc, #340]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 809b 	beq.w	8001346 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001210:	4b50      	ldr	r3, [pc, #320]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d05c      	beq.n	80012d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d141      	bne.n	80012a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001224:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <HAL_RCC_OscConfig+0x4ec>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fb8f 	bl	800094c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff fb8b 	bl	800094c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e081      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001244:	4b43      	ldr	r3, [pc, #268]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f0      	bne.n	8001232 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	019b      	lsls	r3, r3, #6
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	085b      	lsrs	r3, r3, #1
 8001268:	3b01      	subs	r3, #1
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	061b      	lsls	r3, r3, #24
 8001274:	4937      	ldr	r1, [pc, #220]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <HAL_RCC_OscConfig+0x4ec>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fb64 	bl	800094c <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fb60 	bl	800094c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e056      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x41c>
 80012a6:	e04e      	b.n	8001346 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_RCC_OscConfig+0x4ec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fb4d 	bl	800094c <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fb49 	bl	800094c <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e03f      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x44a>
 80012d4:	e037      	b.n	8001346 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e032      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_RCC_OscConfig+0x4e8>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d028      	beq.n	8001342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d121      	bne.n	8001342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d11a      	bne.n	8001342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001312:	4013      	ands	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001318:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800131a:	4293      	cmp	r3, r2
 800131c:	d111      	bne.n	8001342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	3b01      	subs	r3, #1
 800132c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800132e:	429a      	cmp	r2, r3
 8001330:	d107      	bne.n	8001342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40007000 	.word	0x40007000
 8001354:	40023800 	.word	0x40023800
 8001358:	42470060 	.word	0x42470060

0800135c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0cc      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001370:	4b68      	ldr	r3, [pc, #416]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d90c      	bls.n	8001398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0b8      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b0:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a52      	ldr	r2, [pc, #328]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	494d      	ldr	r1, [pc, #308]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d044      	beq.n	800147c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d107      	bne.n	800140a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d119      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e07f      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d003      	beq.n	800141a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001416:	2b03      	cmp	r3, #3
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e06f      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e067      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f023 0203 	bic.w	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4934      	ldr	r1, [pc, #208]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800144c:	f7ff fa7e 	bl	800094c <HAL_GetTick>
 8001450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	e00a      	b.n	800146a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001454:	f7ff fa7a 	bl	800094c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e04f      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 020c 	and.w	r2, r3, #12
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	429a      	cmp	r2, r3
 800147a:	d1eb      	bne.n	8001454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d20c      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e032      	b.n	800150a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4916      	ldr	r1, [pc, #88]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	490e      	ldr	r1, [pc, #56]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014e2:	f000 f821 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	490a      	ldr	r1, [pc, #40]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_ClockConfig+0x1c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f9de 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00
 8001518:	40023800 	.word	0x40023800
 800151c:	080046b4 	.word	0x080046b4
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800152e:	2100      	movs	r1, #0
 8001530:	6079      	str	r1, [r7, #4]
 8001532:	2100      	movs	r1, #0
 8001534:	60f9      	str	r1, [r7, #12]
 8001536:	2100      	movs	r1, #0
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800153a:	2100      	movs	r1, #0
 800153c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800153e:	4952      	ldr	r1, [pc, #328]	; (8001688 <HAL_RCC_GetSysClockFreq+0x160>)
 8001540:	6889      	ldr	r1, [r1, #8]
 8001542:	f001 010c 	and.w	r1, r1, #12
 8001546:	2908      	cmp	r1, #8
 8001548:	d00d      	beq.n	8001566 <HAL_RCC_GetSysClockFreq+0x3e>
 800154a:	2908      	cmp	r1, #8
 800154c:	f200 8094 	bhi.w	8001678 <HAL_RCC_GetSysClockFreq+0x150>
 8001550:	2900      	cmp	r1, #0
 8001552:	d002      	beq.n	800155a <HAL_RCC_GetSysClockFreq+0x32>
 8001554:	2904      	cmp	r1, #4
 8001556:	d003      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x38>
 8001558:	e08e      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <HAL_RCC_GetSysClockFreq+0x164>)
 800155c:	60bb      	str	r3, [r7, #8]
       break;
 800155e:	e08e      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_GetSysClockFreq+0x168>)
 8001562:	60bb      	str	r3, [r7, #8]
      break;
 8001564:	e08b      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001566:	4948      	ldr	r1, [pc, #288]	; (8001688 <HAL_RCC_GetSysClockFreq+0x160>)
 8001568:	6849      	ldr	r1, [r1, #4]
 800156a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800156e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001570:	4945      	ldr	r1, [pc, #276]	; (8001688 <HAL_RCC_GetSysClockFreq+0x160>)
 8001572:	6849      	ldr	r1, [r1, #4]
 8001574:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001578:	2900      	cmp	r1, #0
 800157a:	d024      	beq.n	80015c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157c:	4942      	ldr	r1, [pc, #264]	; (8001688 <HAL_RCC_GetSysClockFreq+0x160>)
 800157e:	6849      	ldr	r1, [r1, #4]
 8001580:	0989      	lsrs	r1, r1, #6
 8001582:	4608      	mov	r0, r1
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	f240 14ff 	movw	r4, #511	; 0x1ff
 800158c:	f04f 0500 	mov.w	r5, #0
 8001590:	ea00 0204 	and.w	r2, r0, r4
 8001594:	ea01 0305 	and.w	r3, r1, r5
 8001598:	493d      	ldr	r1, [pc, #244]	; (8001690 <HAL_RCC_GetSysClockFreq+0x168>)
 800159a:	fb01 f003 	mul.w	r0, r1, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	fb01 f102 	mul.w	r1, r1, r2
 80015a4:	1844      	adds	r4, r0, r1
 80015a6:	493a      	ldr	r1, [pc, #232]	; (8001690 <HAL_RCC_GetSysClockFreq+0x168>)
 80015a8:	fba2 0101 	umull	r0, r1, r2, r1
 80015ac:	1863      	adds	r3, r4, r1
 80015ae:	4619      	mov	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	461a      	mov	r2, r3
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	f7fe fe12 	bl	80001e0 <__aeabi_uldivmod>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4613      	mov	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e04a      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_RCC_GetSysClockFreq+0x160>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	099b      	lsrs	r3, r3, #6
 80015cc:	461a      	mov	r2, r3
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015d6:	f04f 0100 	mov.w	r1, #0
 80015da:	ea02 0400 	and.w	r4, r2, r0
 80015de:	ea03 0501 	and.w	r5, r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	014b      	lsls	r3, r1, #5
 80015f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015f4:	0142      	lsls	r2, r0, #5
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	1b00      	subs	r0, r0, r4
 80015fc:	eb61 0105 	sbc.w	r1, r1, r5
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	018b      	lsls	r3, r1, #6
 800160a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800160e:	0182      	lsls	r2, r0, #6
 8001610:	1a12      	subs	r2, r2, r0
 8001612:	eb63 0301 	sbc.w	r3, r3, r1
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	00d9      	lsls	r1, r3, #3
 8001620:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001624:	00d0      	lsls	r0, r2, #3
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	1912      	adds	r2, r2, r4
 800162c:	eb45 0303 	adc.w	r3, r5, r3
 8001630:	f04f 0000 	mov.w	r0, #0
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	0299      	lsls	r1, r3, #10
 800163a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800163e:	0290      	lsls	r0, r2, #10
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f7fe fdc6 	bl	80001e0 <__aeabi_uldivmod>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4613      	mov	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_RCC_GetSysClockFreq+0x160>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	0c1b      	lsrs	r3, r3, #16
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	3301      	adds	r3, #1
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	fbb2 f3f3 	udiv	r3, r2, r3
 8001674:	60bb      	str	r3, [r7, #8]
      break;
 8001676:	e002      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <HAL_RCC_GetSysClockFreq+0x164>)
 800167a:	60bb      	str	r3, [r7, #8]
      break;
 800167c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800167e:	68bb      	ldr	r3, [r7, #8]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bdb0      	pop	{r4, r5, r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	00f42400 	.word	0x00f42400
 8001690:	017d7840 	.word	0x017d7840

08001694 <__NVIC_SetPriority>:
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80016ec:	2100      	movs	r1, #0
 80016ee:	f06f 0004 	mvn.w	r0, #4
 80016f2:	f7ff ffcf 	bl	8001694 <__NVIC_SetPriority>
#endif
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001702:	f3ef 8305 	mrs	r3, IPSR
 8001706:	603b      	str	r3, [r7, #0]
  return(result);
 8001708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800170e:	f06f 0305 	mvn.w	r3, #5
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	e00c      	b.n	8001730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <osKernelInitialize+0x44>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <osKernelInitialize+0x44>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	e002      	b.n	8001730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000002c 	.word	0x2000002c

08001744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800174a:	f3ef 8305 	mrs	r3, IPSR
 800174e:	603b      	str	r3, [r7, #0]
  return(result);
 8001750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001756:	f06f 0305 	mvn.w	r3, #5
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	e010      	b.n	8001780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <osKernelStart+0x48>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d109      	bne.n	800177a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001766:	f7ff ffbf 	bl	80016e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <osKernelStart+0x48>)
 800176c:	2202      	movs	r2, #2
 800176e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001770:	f001 fa50 	bl	8002c14 <vTaskStartScheduler>
      stat = osOK;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	e002      	b.n	8001780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000002c 	.word	0x2000002c

08001790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af04      	add	r7, sp, #16
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017a0:	f3ef 8305 	mrs	r3, IPSR
 80017a4:	617b      	str	r3, [r7, #20]
  return(result);
 80017a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d17e      	bne.n	80018aa <osThreadNew+0x11a>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d07b      	beq.n	80018aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80017b6:	2318      	movs	r3, #24
 80017b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d045      	beq.n	8001856 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <osThreadNew+0x48>
        name = attr->name;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <osThreadNew+0x6e>
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b38      	cmp	r3, #56	; 0x38
 80017f0:	d805      	bhi.n	80017fe <osThreadNew+0x6e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <osThreadNew+0x72>
        return (NULL);
 80017fe:	2300      	movs	r3, #0
 8001800:	e054      	b.n	80018ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00e      	beq.n	8001838 <osThreadNew+0xa8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b5b      	cmp	r3, #91	; 0x5b
 8001820:	d90a      	bls.n	8001838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <osThreadNew+0xa8>
        mem = 1;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	e010      	b.n	800185a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10c      	bne.n	800185a <osThreadNew+0xca>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d108      	bne.n	800185a <osThreadNew+0xca>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d104      	bne.n	800185a <osThreadNew+0xca>
          mem = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	e001      	b.n	800185a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d110      	bne.n	8001882 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001868:	9202      	str	r2, [sp, #8]
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	6a3a      	ldr	r2, [r7, #32]
 8001874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fff6 	bl	8002868 <xTaskCreateStatic>
 800187c:	4603      	mov	r3, r0
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	e013      	b.n	80018aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d110      	bne.n	80018aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	b29a      	uxth	r2, r3
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f001 f841 	bl	8002922 <xTaskCreate>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <osThreadNew+0x11a>
            hTask = NULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018aa:	693b      	ldr	r3, [r7, #16]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018bc:	f3ef 8305 	mrs	r3, IPSR
 80018c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80018c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <osDelay+0x1c>
    stat = osErrorISR;
 80018c8:	f06f 0305 	mvn.w	r3, #5
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e007      	b.n	80018e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f001 f966 	bl	8002bac <vTaskDelay>
    }
  }

  return (stat);
 80018e0:	68fb      	ldr	r3, [r7, #12]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b08a      	sub	sp, #40	; 0x28
 80018ee:	af02      	add	r7, sp, #8
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018fa:	f3ef 8305 	mrs	r3, IPSR
 80018fe:	613b      	str	r3, [r7, #16]
  return(result);
 8001900:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001902:	2b00      	cmp	r3, #0
 8001904:	d15f      	bne.n	80019c6 <osMessageQueueNew+0xdc>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d05c      	beq.n	80019c6 <osMessageQueueNew+0xdc>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d059      	beq.n	80019c6 <osMessageQueueNew+0xdc>
    mem = -1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d029      	beq.n	8001972 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <osMessageQueueNew+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b4f      	cmp	r3, #79	; 0x4f
 800192c:	d90e      	bls.n	800194c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <osMessageQueueNew+0x62>
        mem = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	e014      	b.n	8001976 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d110      	bne.n	8001976 <osMessageQueueNew+0x8c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10c      	bne.n	8001976 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d104      	bne.n	8001976 <osMessageQueueNew+0x8c>
          mem = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	e001      	b.n	8001976 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10b      	bne.n	8001994 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2100      	movs	r1, #0
 8001986:	9100      	str	r1, [sp, #0]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fa2e 	bl	8001dec <xQueueGenericCreateStatic>
 8001990:	61f8      	str	r0, [r7, #28]
 8001992:	e008      	b.n	80019a6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800199a:	2200      	movs	r2, #0
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fa9c 	bl	8001edc <xQueueGenericCreate>
 80019a4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <osMessageQueueNew+0xd0>
        name = attr->name;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e001      	b.n	80019be <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80019be:	6979      	ldr	r1, [r7, #20]
 80019c0:	69f8      	ldr	r0, [r7, #28]
 80019c2:	f000 fef3 	bl	80027ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80019c6:	69fb      	ldr	r3, [r7, #28]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019e8:	f3ef 8305 	mrs	r3, IPSR
 80019ec:	617b      	str	r3, [r7, #20]
  return(result);
 80019ee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d028      	beq.n	8001a46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <osMessageQueuePut+0x36>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <osMessageQueuePut+0x36>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8001a06:	f06f 0303 	mvn.w	r3, #3
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	e038      	b.n	8001a80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001a12:	f107 0210 	add.w	r2, r7, #16
 8001a16:	2300      	movs	r3, #0
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	69b8      	ldr	r0, [r7, #24]
 8001a1c:	f000 fbba 	bl	8002194 <xQueueGenericSendFromISR>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d003      	beq.n	8001a2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8001a26:	f06f 0302 	mvn.w	r3, #2
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	e028      	b.n	8001a80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d025      	beq.n	8001a80 <osMessageQueuePut+0xb0>
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <osMessageQueuePut+0xbc>)
 8001a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	f3bf 8f6f 	isb	sy
 8001a44:	e01c      	b.n	8001a80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <osMessageQueuePut+0x82>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8001a52:	f06f 0303 	mvn.w	r3, #3
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	e012      	b.n	8001a80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	69b8      	ldr	r0, [r7, #24]
 8001a62:	f000 fa99 	bl	8001f98 <xQueueGenericSend>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d009      	beq.n	8001a80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8001a72:	f06f 0301 	mvn.w	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	e002      	b.n	8001a80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8001a7a:	f06f 0302 	mvn.w	r3, #2
 8001a7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001a80:	69fb      	ldr	r3, [r7, #28]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000ed04 	.word	0xe000ed04

08001a90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aa6:	f3ef 8305 	mrs	r3, IPSR
 8001aaa:	617b      	str	r3, [r7, #20]
  return(result);
 8001aac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d028      	beq.n	8001b04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <osMessageQueueGet+0x34>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <osMessageQueueGet+0x34>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8001ac4:	f06f 0303 	mvn.w	r3, #3
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e037      	b.n	8001b3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	69b8      	ldr	r0, [r7, #24]
 8001ada:	f000 fcd7 	bl	800248c <xQueueReceiveFromISR>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d003      	beq.n	8001aec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8001ae4:	f06f 0302 	mvn.w	r3, #2
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e027      	b.n	8001b3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d024      	beq.n	8001b3c <osMessageQueueGet+0xac>
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <osMessageQueueGet+0xb8>)
 8001af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	e01b      	b.n	8001b3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <osMessageQueueGet+0x80>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d103      	bne.n	8001b18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8001b10:	f06f 0303 	mvn.w	r3, #3
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e011      	b.n	8001b3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	69b8      	ldr	r0, [r7, #24]
 8001b1e:	f000 fbd5 	bl	80022cc <xQueueReceive>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d009      	beq.n	8001b3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8001b2e:	f06f 0301 	mvn.w	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	e002      	b.n	8001b3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8001b36:	f06f 0302 	mvn.w	r3, #2
 8001b3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000ed04 	.word	0xe000ed04

08001b4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <vApplicationGetIdleTaskMemory+0x30>)
 8001b62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000030 	.word	0x20000030
 8001b7c:	2000008c 	.word	0x2000008c

08001b80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4a07      	ldr	r2, [pc, #28]	; (8001bac <vApplicationGetTimerTaskMemory+0x2c>)
 8001b90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <vApplicationGetTimerTaskMemory+0x30>)
 8001b96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	2000028c 	.word	0x2000028c
 8001bb0:	200002e8 	.word	0x200002e8

08001bb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f103 0208 	add.w	r2, r3, #8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f103 0208 	add.w	r2, r3, #8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f103 0208 	add.w	r2, r3, #8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d103      	bne.n	8001c76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e00c      	b.n	8001c90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3308      	adds	r3, #8
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e002      	b.n	8001c84 <vListInsert+0x2e>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d2f6      	bcs.n	8001c7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6892      	ldr	r2, [r2, #8]
 8001cde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6852      	ldr	r2, [r2, #4]
 8001ce8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d103      	bne.n	8001cfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10a      	bne.n	8001d46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d42:	bf00      	nop
 8001d44:	e7fe      	b.n	8001d44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d46:	f002 f905 	bl	8003f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	441a      	add	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	3b01      	subs	r3, #1
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	441a      	add	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	22ff      	movs	r2, #255	; 0xff
 8001d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d114      	bne.n	8001dc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01a      	beq.n	8001dda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3310      	adds	r3, #16
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 f9bd 	bl	8003128 <xTaskRemoveFromEventList>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d012      	beq.n	8001dda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <xQueueGenericReset+0xcc>)
 8001db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	e009      	b.n	8001dda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3310      	adds	r3, #16
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fef2 	bl	8001bb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3324      	adds	r3, #36	; 0x24
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff feed 	bl	8001bb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dda:	f002 f8eb 	bl	8003fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	e000ed04 	.word	0xe000ed04

08001dec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08e      	sub	sp, #56	; 0x38
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e12:	bf00      	nop
 8001e14:	e7fe      	b.n	8001e14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e2e:	bf00      	nop
 8001e30:	e7fe      	b.n	8001e30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <xQueueGenericCreateStatic+0x52>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <xQueueGenericCreateStatic+0x56>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <xQueueGenericCreateStatic+0x58>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	623b      	str	r3, [r7, #32]
}
 8001e5a:	bf00      	nop
 8001e5c:	e7fe      	b.n	8001e5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <xQueueGenericCreateStatic+0x7e>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <xQueueGenericCreateStatic+0x82>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <xQueueGenericCreateStatic+0x84>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	61fb      	str	r3, [r7, #28]
}
 8001e86:	bf00      	nop
 8001e88:	e7fe      	b.n	8001e88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e8a:	2350      	movs	r3, #80	; 0x50
 8001e8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b50      	cmp	r3, #80	; 0x50
 8001e92:	d00a      	beq.n	8001eaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	61bb      	str	r3, [r7, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	e7fe      	b.n	8001ea8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001eaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00d      	beq.n	8001ed2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ebe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f83f 	bl	8001f50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3730      	adds	r7, #48	; 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	613b      	str	r3, [r7, #16]
}
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3350      	adds	r3, #80	; 0x50
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 f93f 	bl	8004198 <pvPortMalloc>
 8001f1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d011      	beq.n	8001f46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3350      	adds	r3, #80	; 0x50
 8001f2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f805 	bl	8001f50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f46:	69bb      	ldr	r3, [r7, #24]
	}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e002      	b.n	8001f72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f7e:	2101      	movs	r1, #1
 8001f80:	69b8      	ldr	r0, [r7, #24]
 8001f82:	f7ff fecb 	bl	8001d1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <xQueueGenericSend+0x32>
	__asm volatile
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001fc6:	bf00      	nop
 8001fc8:	e7fe      	b.n	8001fc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <xQueueGenericSend+0x40>
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <xQueueGenericSend+0x44>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <xQueueGenericSend+0x46>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <xQueueGenericSend+0x60>
	__asm volatile
 8001fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe6:	f383 8811 	msr	BASEPRI, r3
 8001fea:	f3bf 8f6f 	isb	sy
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ff4:	bf00      	nop
 8001ff6:	e7fe      	b.n	8001ff6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d103      	bne.n	8002006 <xQueueGenericSend+0x6e>
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <xQueueGenericSend+0x72>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <xQueueGenericSend+0x74>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <xQueueGenericSend+0x8e>
	__asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	623b      	str	r3, [r7, #32]
}
 8002022:	bf00      	nop
 8002024:	e7fe      	b.n	8002024 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002026:	f001 fa3d 	bl	80034a4 <xTaskGetSchedulerState>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <xQueueGenericSend+0x9e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <xQueueGenericSend+0xa2>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <xQueueGenericSend+0xa4>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10a      	bne.n	8002056 <xQueueGenericSend+0xbe>
	__asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	61fb      	str	r3, [r7, #28]
}
 8002052:	bf00      	nop
 8002054:	e7fe      	b.n	8002054 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002056:	f001 ff7d 	bl	8003f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <xQueueGenericSend+0xd4>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d129      	bne.n	80020c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002072:	f000 fa8b 	bl	800258c <prvCopyDataToQueue>
 8002076:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	3324      	adds	r3, #36	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f001 f84f 	bl	8003128 <xTaskRemoveFromEventList>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002090:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <xQueueGenericSend+0x1f8>)
 8002092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	e00a      	b.n	80020b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <xQueueGenericSend+0x1f8>)
 80020aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020b8:	f001 ff7c 	bl	8003fb4 <vPortExitCritical>
				return pdPASS;
 80020bc:	2301      	movs	r3, #1
 80020be:	e063      	b.n	8002188 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020c6:	f001 ff75 	bl	8003fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e05c      	b.n	8002188 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 f889 	bl	80031f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020de:	2301      	movs	r3, #1
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020e2:	f001 ff67 	bl	8003fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020e6:	f000 fdfb 	bl	8002ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020ea:	f001 ff33 	bl	8003f54 <vPortEnterCritical>
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d103      	bne.n	8002104 <xQueueGenericSend+0x16c>
 80020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800210a:	b25b      	sxtb	r3, r3
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d103      	bne.n	800211a <xQueueGenericSend+0x182>
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800211a:	f001 ff4b 	bl	8003fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800211e:	1d3a      	adds	r2, r7, #4
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f001 f878 	bl	800321c <xTaskCheckForTimeOut>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d124      	bne.n	800217c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002134:	f000 fb22 	bl	800277c <prvIsQueueFull>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d018      	beq.n	8002170 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	3310      	adds	r3, #16
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 ff9e 	bl	8003088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800214c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800214e:	f000 faad 	bl	80026ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002152:	f000 fdd3 	bl	8002cfc <xTaskResumeAll>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	f47f af7c 	bne.w	8002056 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <xQueueGenericSend+0x1f8>)
 8002160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	e772      	b.n	8002056 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002172:	f000 fa9b 	bl	80026ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002176:	f000 fdc1 	bl	8002cfc <xTaskResumeAll>
 800217a:	e76c      	b.n	8002056 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800217c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217e:	f000 fa95 	bl	80026ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002182:	f000 fdbb 	bl	8002cfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002188:	4618      	mov	r0, r3
 800218a:	3738      	adds	r7, #56	; 0x38
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	e000ed04 	.word	0xe000ed04

08002194 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b090      	sub	sp, #64	; 0x40
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80021a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80021be:	bf00      	nop
 80021c0:	e7fe      	b.n	80021c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <xQueueGenericSendFromISR+0x3c>
 80021c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <xQueueGenericSendFromISR+0x40>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <xQueueGenericSendFromISR+0x42>
 80021d4:	2300      	movs	r3, #0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80021da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021de:	f383 8811 	msr	BASEPRI, r3
 80021e2:	f3bf 8f6f 	isb	sy
 80021e6:	f3bf 8f4f 	dsb	sy
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021ec:	bf00      	nop
 80021ee:	e7fe      	b.n	80021ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d103      	bne.n	80021fe <xQueueGenericSendFromISR+0x6a>
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <xQueueGenericSendFromISR+0x6e>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <xQueueGenericSendFromISR+0x70>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220c:	f383 8811 	msr	BASEPRI, r3
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	623b      	str	r3, [r7, #32]
}
 800221a:	bf00      	nop
 800221c:	e7fe      	b.n	800221c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800221e:	f001 ff7b 	bl	8004118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002222:	f3ef 8211 	mrs	r2, BASEPRI
 8002226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222a:	f383 8811 	msr	BASEPRI, r3
 800222e:	f3bf 8f6f 	isb	sy
 8002232:	f3bf 8f4f 	dsb	sy
 8002236:	61fa      	str	r2, [r7, #28]
 8002238:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800223a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	429a      	cmp	r2, r3
 8002248:	d302      	bcc.n	8002250 <xQueueGenericSendFromISR+0xbc>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d12f      	bne.n	80022b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002266:	f000 f991 	bl	800258c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800226a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002272:	d112      	bne.n	800229a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b00      	cmp	r3, #0
 800227a:	d016      	beq.n	80022aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227e:	3324      	adds	r3, #36	; 0x24
 8002280:	4618      	mov	r0, r3
 8002282:	f000 ff51 	bl	8003128 <xTaskRemoveFromEventList>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00e      	beq.n	80022aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e007      	b.n	80022aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800229a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800229e:	3301      	adds	r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80022aa:	2301      	movs	r3, #1
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80022ae:	e001      	b.n	80022b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3740      	adds	r7, #64	; 0x40
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <xQueueReceive+0x30>
	__asm volatile
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	f383 8811 	msr	BASEPRI, r3
 80022ee:	f3bf 8f6f 	isb	sy
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	623b      	str	r3, [r7, #32]
}
 80022f8:	bf00      	nop
 80022fa:	e7fe      	b.n	80022fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <xQueueReceive+0x3e>
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <xQueueReceive+0x42>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <xQueueReceive+0x44>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xQueueReceive+0x5e>
	__asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	61fb      	str	r3, [r7, #28]
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800232a:	f001 f8bb 	bl	80034a4 <xTaskGetSchedulerState>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <xQueueReceive+0x6e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <xQueueReceive+0x72>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <xQueueReceive+0x74>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <xQueueReceive+0x8e>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	61bb      	str	r3, [r7, #24]
}
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800235a:	f001 fdfb 	bl	8003f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01f      	beq.n	80023aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800236e:	f000 f977 	bl	8002660 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00f      	beq.n	80023a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	3310      	adds	r3, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fece 	bl	8003128 <xTaskRemoveFromEventList>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <xQueueReceive+0x1bc>)
 8002394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023a2:	f001 fe07 	bl	8003fb4 <vPortExitCritical>
				return pdPASS;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e069      	b.n	800247e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023b0:	f001 fe00 	bl	8003fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e062      	b.n	800247e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 ff14 	bl	80031f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023cc:	f001 fdf2 	bl	8003fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023d0:	f000 fc86 	bl	8002ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023d4:	f001 fdbe 	bl	8003f54 <vPortEnterCritical>
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d103      	bne.n	80023ee <xQueueReceive+0x122>
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d103      	bne.n	8002404 <xQueueReceive+0x138>
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002404:	f001 fdd6 	bl	8003fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002408:	1d3a      	adds	r2, r7, #4
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f000 ff03 	bl	800321c <xTaskCheckForTimeOut>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d123      	bne.n	8002464 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800241c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800241e:	f000 f997 	bl	8002750 <prvIsQueueEmpty>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d017      	beq.n	8002458 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	3324      	adds	r3, #36	; 0x24
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fe29 	bl	8003088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002438:	f000 f938 	bl	80026ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800243c:	f000 fc5e 	bl	8002cfc <xTaskResumeAll>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d189      	bne.n	800235a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <xQueueReceive+0x1bc>)
 8002448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	e780      	b.n	800235a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800245a:	f000 f927 	bl	80026ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800245e:	f000 fc4d 	bl	8002cfc <xTaskResumeAll>
 8002462:	e77a      	b.n	800235a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002466:	f000 f921 	bl	80026ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800246a:	f000 fc47 	bl	8002cfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800246e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002470:	f000 f96e 	bl	8002750 <prvIsQueueEmpty>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	f43f af6f 	beq.w	800235a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800247c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800247e:	4618      	mov	r0, r3
 8002480:	3730      	adds	r7, #48	; 0x30
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000ed04 	.word	0xe000ed04

0800248c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08e      	sub	sp, #56	; 0x38
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	623b      	str	r3, [r7, #32]
}
 80024b4:	bf00      	nop
 80024b6:	e7fe      	b.n	80024b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <xQueueReceiveFromISR+0x3a>
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <xQueueReceiveFromISR+0x3e>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <xQueueReceiveFromISR+0x40>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	61fb      	str	r3, [r7, #28]
}
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024e6:	f001 fe17 	bl	8004118 <vPortValidateInterruptPriority>
	__asm volatile
 80024ea:	f3ef 8211 	mrs	r2, BASEPRI
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	61ba      	str	r2, [r7, #24]
 8002500:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002502:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	d02f      	beq.n	8002572 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002520:	f000 f89e 	bl	8002660 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	1e5a      	subs	r2, r3, #1
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800252c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d112      	bne.n	800255c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	3310      	adds	r3, #16
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fdf0 	bl	8003128 <xTaskRemoveFromEventList>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00e      	beq.n	800256c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e007      	b.n	800256c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800255c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002560:	3301      	adds	r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	b25a      	sxtb	r2, r3
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800256c:	2301      	movs	r3, #1
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
 8002570:	e001      	b.n	8002576 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002572:	2300      	movs	r3, #0
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	613b      	str	r3, [r7, #16]
	__asm volatile
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f383 8811 	msr	BASEPRI, r3
}
 8002580:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002584:	4618      	mov	r0, r3
 8002586:	3738      	adds	r7, #56	; 0x38
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d14d      	bne.n	800264e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 ff92 	bl	80034e0 <xTaskPriorityDisinherit>
 80025bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e043      	b.n	800264e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d119      	bne.n	8002600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6858      	ldr	r0, [r3, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	461a      	mov	r2, r3
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	f001 ffec 	bl	80045b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	441a      	add	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d32b      	bcc.n	800264e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	e026      	b.n	800264e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	68d8      	ldr	r0, [r3, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	461a      	mov	r2, r3
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	f001 ffd2 	bl	80045b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	425b      	negs	r3, r3
 800261a:	441a      	add	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d207      	bcs.n	800263c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	425b      	negs	r3, r3
 8002636:	441a      	add	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d105      	bne.n	800264e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	3b01      	subs	r3, #1
 800264c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002656:	697b      	ldr	r3, [r7, #20]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d018      	beq.n	80026a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	441a      	add	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	429a      	cmp	r2, r3
 800268a:	d303      	bcc.n	8002694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	461a      	mov	r2, r3
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	f001 ff88 	bl	80045b4 <memcpy>
	}
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026b4:	f001 fc4e 	bl	8003f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026c0:	e011      	b.n	80026e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d012      	beq.n	80026f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3324      	adds	r3, #36	; 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fd2a 	bl	8003128 <xTaskRemoveFromEventList>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80026da:	f000 fe01 	bl	80032e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dce9      	bgt.n	80026c2 <prvUnlockQueue+0x16>
 80026ee:	e000      	b.n	80026f2 <prvUnlockQueue+0x46>
					break;
 80026f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80026fa:	f001 fc5b 	bl	8003fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80026fe:	f001 fc29 	bl	8003f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800270a:	e011      	b.n	8002730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d012      	beq.n	800273a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3310      	adds	r3, #16
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fd05 	bl	8003128 <xTaskRemoveFromEventList>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002724:	f000 fddc 	bl	80032e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	3b01      	subs	r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002734:	2b00      	cmp	r3, #0
 8002736:	dce9      	bgt.n	800270c <prvUnlockQueue+0x60>
 8002738:	e000      	b.n	800273c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800273a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	22ff      	movs	r2, #255	; 0xff
 8002740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002744:	f001 fc36 	bl	8003fb4 <vPortExitCritical>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002758:	f001 fbfc 	bl	8003f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002764:	2301      	movs	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e001      	b.n	800276e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800276e:	f001 fc21 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 8002772:	68fb      	ldr	r3, [r7, #12]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002784:	f001 fbe6 	bl	8003f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	429a      	cmp	r2, r3
 8002792:	d102      	bne.n	800279a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e001      	b.n	800279e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800279e:	f001 fc09 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e014      	b.n	80027e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80027bc:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <vQueueAddToRegistry+0x50>)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <vQueueAddToRegistry+0x50>)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <vQueueAddToRegistry+0x50>)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80027de:	e006      	b.n	80027ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b07      	cmp	r3, #7
 80027ea:	d9e7      	bls.n	80027bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20004950 	.word	0x20004950

08002800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002810:	f001 fba0 	bl	8003f54 <vPortEnterCritical>
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800281a:	b25b      	sxtb	r3, r3
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d103      	bne.n	800282a <vQueueWaitForMessageRestricted+0x2a>
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002830:	b25b      	sxtb	r3, r3
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d103      	bne.n	8002840 <vQueueWaitForMessageRestricted+0x40>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002840:	f001 fbb8 	bl	8003fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fc3b 	bl	80030d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff26 	bl	80026ac <prvUnlockQueue>
	}
 8002860:	bf00      	nop
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af04      	add	r7, sp, #16
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xTaskCreateStatic+0x2a>
	__asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	623b      	str	r3, [r7, #32]
}
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xTaskCreateStatic+0x46>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	61fb      	str	r3, [r7, #28]
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028ae:	235c      	movs	r3, #92	; 0x5c
 80028b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b5c      	cmp	r3, #92	; 0x5c
 80028b6:	d00a      	beq.n	80028ce <xTaskCreateStatic+0x66>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	61bb      	str	r3, [r7, #24]
}
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01e      	beq.n	8002914 <xTaskCreateStatic+0xac>
 80028d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028ee:	2300      	movs	r3, #0
 80028f0:	9303      	str	r3, [sp, #12]
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f850 	bl	80029ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800290c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800290e:	f000 f8dd 	bl	8002acc <prvAddNewTaskToReadyList>
 8002912:	e001      	b.n	8002918 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002918:	697b      	ldr	r3, [r7, #20]
	}
 800291a:	4618      	mov	r0, r3
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002922:	b580      	push	{r7, lr}
 8002924:	b08c      	sub	sp, #48	; 0x30
 8002926:	af04      	add	r7, sp, #16
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f001 fc2e 	bl	8004198 <pvPortMalloc>
 800293c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00e      	beq.n	8002962 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002944:	205c      	movs	r0, #92	; 0x5c
 8002946:	f001 fc27 	bl	8004198 <pvPortMalloc>
 800294a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
 8002958:	e005      	b.n	8002966 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f001 fce8 	bl	8004330 <vPortFree>
 8002960:	e001      	b.n	8002966 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	2300      	movs	r3, #0
 8002978:	9303      	str	r3, [sp, #12]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	9302      	str	r3, [sp, #8]
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f80e 	bl	80029ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002990:	69f8      	ldr	r0, [r7, #28]
 8002992:	f000 f89b 	bl	8002acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002996:	2301      	movs	r3, #1
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e002      	b.n	80029a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295
 80029a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029a2:	69bb      	ldr	r3, [r7, #24]
	}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	21a5      	movs	r1, #165	; 0xa5
 80029c6:	f001 fe03 	bl	80045d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029d4:	3b01      	subs	r3, #1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f023 0307 	bic.w	r3, r3, #7
 80029e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <prvInitialiseNewTask+0x58>
	__asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	617b      	str	r3, [r7, #20]
}
 8002a00:	bf00      	nop
 8002a02:	e7fe      	b.n	8002a02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01f      	beq.n	8002a4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e012      	b.n	8002a36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	7819      	ldrb	r1, [r3, #0]
 8002a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3334      	adds	r3, #52	; 0x34
 8002a20:	460a      	mov	r2, r1
 8002a22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d9e9      	bls.n	8002a10 <prvInitialiseNewTask+0x64>
 8002a3c:	e000      	b.n	8002a40 <prvInitialiseNewTask+0x94>
			{
				break;
 8002a3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a48:	e003      	b.n	8002a52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	2b37      	cmp	r3, #55	; 0x37
 8002a56:	d901      	bls.n	8002a5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a58:	2337      	movs	r3, #55	; 0x37
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	3304      	adds	r3, #4
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f8be 	bl	8001bf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f8b9 	bl	8001bf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	69b8      	ldr	r0, [r7, #24]
 8002aac:	f001 f928 	bl	8003d00 <pxPortInitialiseStack>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ad4:	f001 fa3e 	bl	8003f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <prvAddNewTaskToReadyList+0xc4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <prvAddNewTaskToReadyList+0xc4>)
 8002ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <prvAddNewTaskToReadyList+0xc8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002aea:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <prvAddNewTaskToReadyList+0xc8>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <prvAddNewTaskToReadyList+0xc4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d110      	bne.n	8002b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002af8:	f000 fc16 	bl	8003328 <prvInitialiseTaskLists>
 8002afc:	e00d      	b.n	8002b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <prvAddNewTaskToReadyList+0xcc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <prvAddNewTaskToReadyList+0xc8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d802      	bhi.n	8002b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <prvAddNewTaskToReadyList+0xc8>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <prvAddNewTaskToReadyList+0xd0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <prvAddNewTaskToReadyList+0xd0>)
 8002b22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <prvAddNewTaskToReadyList+0xd0>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <prvAddNewTaskToReadyList+0xd4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d903      	bls.n	8002b40 <prvAddNewTaskToReadyList+0x74>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <prvAddNewTaskToReadyList+0xd4>)
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <prvAddNewTaskToReadyList+0xd8>)
 8002b4e:	441a      	add	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f7ff f859 	bl	8001c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b5c:	f001 fa2a 	bl	8003fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <prvAddNewTaskToReadyList+0xcc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <prvAddNewTaskToReadyList+0xc8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d207      	bcs.n	8002b86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <prvAddNewTaskToReadyList+0xdc>)
 8002b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000bbc 	.word	0x20000bbc
 8002b94:	200006e8 	.word	0x200006e8
 8002b98:	20000bc8 	.word	0x20000bc8
 8002b9c:	20000bd8 	.word	0x20000bd8
 8002ba0:	20000bc4 	.word	0x20000bc4
 8002ba4:	200006ec 	.word	0x200006ec
 8002ba8:	e000ed04 	.word	0xe000ed04

08002bac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d017      	beq.n	8002bee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <vTaskDelay+0x60>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <vTaskDelay+0x30>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	60bb      	str	r3, [r7, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002bdc:	f000 f880 	bl	8002ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002be0:	2100      	movs	r1, #0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fcea 	bl	80035bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002be8:	f000 f888 	bl	8002cfc <xTaskResumeAll>
 8002bec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <vTaskDelay+0x64>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000be4 	.word	0x20000be4
 8002c10:	e000ed04 	.word	0xe000ed04

08002c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c22:	463a      	mov	r2, r7
 8002c24:	1d39      	adds	r1, r7, #4
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe ff8e 	bl	8001b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c30:	6839      	ldr	r1, [r7, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	9202      	str	r2, [sp, #8]
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	460a      	mov	r2, r1
 8002c42:	4921      	ldr	r1, [pc, #132]	; (8002cc8 <vTaskStartScheduler+0xb4>)
 8002c44:	4821      	ldr	r0, [pc, #132]	; (8002ccc <vTaskStartScheduler+0xb8>)
 8002c46:	f7ff fe0f 	bl	8002868 <xTaskCreateStatic>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <vTaskStartScheduler+0xbc>)
 8002c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <vTaskStartScheduler+0xbc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e001      	b.n	8002c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d102      	bne.n	8002c6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002c68:	f000 fcfc 	bl	8003664 <xTimerCreateTimerTask>
 8002c6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d116      	bne.n	8002ca2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	613b      	str	r3, [r7, #16]
}
 8002c86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <vTaskStartScheduler+0xc0>)
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <vTaskStartScheduler+0xc4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <vTaskStartScheduler+0xc8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c9c:	f001 f8b8 	bl	8003e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ca0:	e00e      	b.n	8002cc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d10a      	bne.n	8002cc0 <vTaskStartScheduler+0xac>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60fb      	str	r3, [r7, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <vTaskStartScheduler+0xaa>
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	08004618 	.word	0x08004618
 8002ccc:	080032f9 	.word	0x080032f9
 8002cd0:	20000be0 	.word	0x20000be0
 8002cd4:	20000bdc 	.word	0x20000bdc
 8002cd8:	20000bc8 	.word	0x20000bc8
 8002cdc:	20000bc0 	.word	0x20000bc0

08002ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <vTaskSuspendAll+0x18>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <vTaskSuspendAll+0x18>)
 8002cec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	20000be4 	.word	0x20000be4

08002cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d0a:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <xTaskResumeAll+0x118>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	603b      	str	r3, [r7, #0]
}
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d28:	f001 f914 	bl	8003f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d2c:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <xTaskResumeAll+0x118>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <xTaskResumeAll+0x118>)
 8002d34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <xTaskResumeAll+0x118>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d162      	bne.n	8002e04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <xTaskResumeAll+0x11c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05e      	beq.n	8002e04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d46:	e02f      	b.n	8002da8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <xTaskResumeAll+0x120>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3318      	adds	r3, #24
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ffb7 	bl	8001cc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe ffb2 	bl	8001cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <xTaskResumeAll+0x124>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d903      	bls.n	8002d78 <xTaskResumeAll+0x7c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <xTaskResumeAll+0x124>)
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <xTaskResumeAll+0x128>)
 8002d86:	441a      	add	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f7fe ff3d 	bl	8001c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <xTaskResumeAll+0x12c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <xTaskResumeAll+0x130>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <xTaskResumeAll+0x120>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1cb      	bne.n	8002d48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002db6:	f000 fb55 	bl	8003464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <xTaskResumeAll+0x134>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dc6:	f000 f847 	bl	8002e58 <xTaskIncrementTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <xTaskResumeAll+0x130>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f1      	bne.n	8002dc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <xTaskResumeAll+0x134>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <xTaskResumeAll+0x130>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <xTaskResumeAll+0x138>)
 8002df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e04:	f001 f8d6 	bl	8003fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8002e08:	68bb      	ldr	r3, [r7, #8]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000be4 	.word	0x20000be4
 8002e18:	20000bbc 	.word	0x20000bbc
 8002e1c:	20000b7c 	.word	0x20000b7c
 8002e20:	20000bc4 	.word	0x20000bc4
 8002e24:	200006ec 	.word	0x200006ec
 8002e28:	200006e8 	.word	0x200006e8
 8002e2c:	20000bd0 	.word	0x20000bd0
 8002e30:	20000bcc 	.word	0x20000bcc
 8002e34:	e000ed04 	.word	0xe000ed04

08002e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <xTaskGetTickCount+0x1c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e44:	687b      	ldr	r3, [r7, #4]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000bc0 	.word	0x20000bc0

08002e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e62:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <xTaskIncrementTick+0x148>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 808f 	bne.w	8002f8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <xTaskIncrementTick+0x14c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e74:	4a4b      	ldr	r2, [pc, #300]	; (8002fa4 <xTaskIncrementTick+0x14c>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d120      	bne.n	8002ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e80:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <xTaskIncrementTick+0x150>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	603b      	str	r3, [r7, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <xTaskIncrementTick+0x46>
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <xTaskIncrementTick+0x150>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <xTaskIncrementTick+0x154>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3f      	ldr	r2, [pc, #252]	; (8002fa8 <xTaskIncrementTick+0x150>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4a3f      	ldr	r2, [pc, #252]	; (8002fac <xTaskIncrementTick+0x154>)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <xTaskIncrementTick+0x158>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <xTaskIncrementTick+0x158>)
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	f000 fad1 	bl	8003464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <xTaskIncrementTick+0x15c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d349      	bcc.n	8002f60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <xTaskIncrementTick+0x150>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <xTaskIncrementTick+0x15c>)
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	601a      	str	r2, [r3, #0]
					break;
 8002ede:	e03f      	b.n	8002f60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <xTaskIncrementTick+0x150>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d203      	bcs.n	8002f00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <xTaskIncrementTick+0x15c>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002efe:	e02f      	b.n	8002f60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fedf 	bl	8001cc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3318      	adds	r3, #24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fed6 	bl	8001cc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <xTaskIncrementTick+0x160>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d903      	bls.n	8002f30 <xTaskIncrementTick+0xd8>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <xTaskIncrementTick+0x160>)
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <xTaskIncrementTick+0x164>)
 8002f3e:	441a      	add	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fe fe61 	bl	8001c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <xTaskIncrementTick+0x168>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d3b8      	bcc.n	8002ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5e:	e7b5      	b.n	8002ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <xTaskIncrementTick+0x168>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	4915      	ldr	r1, [pc, #84]	; (8002fbc <xTaskIncrementTick+0x164>)
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d901      	bls.n	8002f7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <xTaskIncrementTick+0x16c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e004      	b.n	8002f94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <xTaskIncrementTick+0x170>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <xTaskIncrementTick+0x170>)
 8002f92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f94:	697b      	ldr	r3, [r7, #20]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000be4 	.word	0x20000be4
 8002fa4:	20000bc0 	.word	0x20000bc0
 8002fa8:	20000b74 	.word	0x20000b74
 8002fac:	20000b78 	.word	0x20000b78
 8002fb0:	20000bd4 	.word	0x20000bd4
 8002fb4:	20000bdc 	.word	0x20000bdc
 8002fb8:	20000bc4 	.word	0x20000bc4
 8002fbc:	200006ec 	.word	0x200006ec
 8002fc0:	200006e8 	.word	0x200006e8
 8002fc4:	20000bd0 	.word	0x20000bd0
 8002fc8:	20000bcc 	.word	0x20000bcc

08002fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <vTaskSwitchContext+0xa8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fda:	4b27      	ldr	r3, [pc, #156]	; (8003078 <vTaskSwitchContext+0xac>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fe0:	e041      	b.n	8003066 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002fe2:	4b25      	ldr	r3, [pc, #148]	; (8003078 <vTaskSwitchContext+0xac>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <vTaskSwitchContext+0xb0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e010      	b.n	8003012 <vTaskSwitchContext+0x46>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <vTaskSwitchContext+0x40>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	607b      	str	r3, [r7, #4]
}
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <vTaskSwitchContext+0x3e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3b01      	subs	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	491b      	ldr	r1, [pc, #108]	; (8003080 <vTaskSwitchContext+0xb4>)
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0e4      	beq.n	8002ff0 <vTaskSwitchContext+0x24>
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <vTaskSwitchContext+0xb4>)
 8003032:	4413      	add	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3308      	adds	r3, #8
 8003048:	429a      	cmp	r2, r3
 800304a:	d104      	bne.n	8003056 <vTaskSwitchContext+0x8a>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a09      	ldr	r2, [pc, #36]	; (8003084 <vTaskSwitchContext+0xb8>)
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <vTaskSwitchContext+0xb0>)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6013      	str	r3, [r2, #0]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20000be4 	.word	0x20000be4
 8003078:	20000bd0 	.word	0x20000bd0
 800307c:	20000bc4 	.word	0x20000bc4
 8003080:	200006ec 	.word	0x200006ec
 8003084:	200006e8 	.word	0x200006e8

08003088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	60fb      	str	r3, [r7, #12]
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <vTaskPlaceOnEventList+0x44>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3318      	adds	r3, #24
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe fdcd 	bl	8001c56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030bc:	2101      	movs	r1, #1
 80030be:	6838      	ldr	r0, [r7, #0]
 80030c0:	f000 fa7c 	bl	80035bc <prvAddCurrentTaskToDelayedList>
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200006e8 	.word	0x200006e8

080030d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	617b      	str	r3, [r7, #20]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <vTaskPlaceOnEventListRestricted+0x54>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3318      	adds	r3, #24
 80030fe:	4619      	mov	r1, r3
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7fe fd84 	bl	8001c0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68b8      	ldr	r0, [r7, #8]
 8003116:	f000 fa51 	bl	80035bc <prvAddCurrentTaskToDelayedList>
	}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	200006e8 	.word	0x200006e8

08003128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	60fb      	str	r3, [r7, #12]
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	3318      	adds	r3, #24
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fdb5 	bl	8001cc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <xTaskRemoveFromEventList+0xb0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11d      	bne.n	80031a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	3304      	adds	r3, #4
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fdac 	bl	8001cc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <xTaskRemoveFromEventList+0xb4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d903      	bls.n	8003184 <xTaskRemoveFromEventList+0x5c>
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4a16      	ldr	r2, [pc, #88]	; (80031dc <xTaskRemoveFromEventList+0xb4>)
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <xTaskRemoveFromEventList+0xb8>)
 8003192:	441a      	add	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f7fe fd37 	bl	8001c0e <vListInsertEnd>
 80031a0:	e005      	b.n	80031ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	3318      	adds	r3, #24
 80031a6:	4619      	mov	r1, r3
 80031a8:	480e      	ldr	r0, [pc, #56]	; (80031e4 <xTaskRemoveFromEventList+0xbc>)
 80031aa:	f7fe fd30 	bl	8001c0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <xTaskRemoveFromEventList+0xc0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d905      	bls.n	80031c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031bc:	2301      	movs	r3, #1
 80031be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <xTaskRemoveFromEventList+0xc4>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e001      	b.n	80031cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80031cc:	697b      	ldr	r3, [r7, #20]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000be4 	.word	0x20000be4
 80031dc:	20000bc4 	.word	0x20000bc4
 80031e0:	200006ec 	.word	0x200006ec
 80031e4:	20000b7c 	.word	0x20000b7c
 80031e8:	200006e8 	.word	0x200006e8
 80031ec:	20000bd0 	.word	0x20000bd0

080031f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <vTaskInternalSetTimeOutState+0x24>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <vTaskInternalSetTimeOutState+0x28>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	605a      	str	r2, [r3, #4]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	20000bd4 	.word	0x20000bd4
 8003218:	20000bc0 	.word	0x20000bc0

0800321c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	613b      	str	r3, [r7, #16]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	60fb      	str	r3, [r7, #12]
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800325e:	f000 fe79 	bl	8003f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <xTaskCheckForTimeOut+0xbc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d102      	bne.n	8003282 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	e023      	b.n	80032ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <xTaskCheckForTimeOut+0xc0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d007      	beq.n	800329e <xTaskCheckForTimeOut+0x82>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	e015      	b.n	80032ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d20b      	bcs.n	80032c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	1ad2      	subs	r2, r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff9b 	bl	80031f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e004      	b.n	80032ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032ca:	f000 fe73 	bl	8003fb4 <vPortExitCritical>

	return xReturn;
 80032ce:	69fb      	ldr	r3, [r7, #28]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000bc0 	.word	0x20000bc0
 80032dc:	20000bd4 	.word	0x20000bd4

080032e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <vTaskMissedYield+0x14>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	20000bd0 	.word	0x20000bd0

080032f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003300:	f000 f852 	bl	80033a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <prvIdleTask+0x28>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d9f9      	bls.n	8003300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <prvIdleTask+0x2c>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800331c:	e7f0      	b.n	8003300 <prvIdleTask+0x8>
 800331e:	bf00      	nop
 8003320:	200006ec 	.word	0x200006ec
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	e00c      	b.n	800334e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <prvInitialiseTaskLists+0x60>)
 8003340:	4413      	add	r3, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fc36 	bl	8001bb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3301      	adds	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b37      	cmp	r3, #55	; 0x37
 8003352:	d9ef      	bls.n	8003334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <prvInitialiseTaskLists+0x64>)
 8003356:	f7fe fc2d 	bl	8001bb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800335a:	480d      	ldr	r0, [pc, #52]	; (8003390 <prvInitialiseTaskLists+0x68>)
 800335c:	f7fe fc2a 	bl	8001bb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003360:	480c      	ldr	r0, [pc, #48]	; (8003394 <prvInitialiseTaskLists+0x6c>)
 8003362:	f7fe fc27 	bl	8001bb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003366:	480c      	ldr	r0, [pc, #48]	; (8003398 <prvInitialiseTaskLists+0x70>)
 8003368:	f7fe fc24 	bl	8001bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800336c:	480b      	ldr	r0, [pc, #44]	; (800339c <prvInitialiseTaskLists+0x74>)
 800336e:	f7fe fc21 	bl	8001bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <prvInitialiseTaskLists+0x78>)
 8003374:	4a05      	ldr	r2, [pc, #20]	; (800338c <prvInitialiseTaskLists+0x64>)
 8003376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvInitialiseTaskLists+0x7c>)
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <prvInitialiseTaskLists+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200006ec 	.word	0x200006ec
 800338c:	20000b4c 	.word	0x20000b4c
 8003390:	20000b60 	.word	0x20000b60
 8003394:	20000b7c 	.word	0x20000b7c
 8003398:	20000b90 	.word	0x20000b90
 800339c:	20000ba8 	.word	0x20000ba8
 80033a0:	20000b74 	.word	0x20000b74
 80033a4:	20000b78 	.word	0x20000b78

080033a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033ae:	e019      	b.n	80033e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033b0:	f000 fdd0 	bl	8003f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <prvCheckTasksWaitingTermination+0x50>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fc81 	bl	8001cc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <prvCheckTasksWaitingTermination+0x54>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <prvCheckTasksWaitingTermination+0x54>)
 80033ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033da:	f000 fdeb 	bl	8003fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f810 	bl	8003404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e1      	bne.n	80033b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000b90 	.word	0x20000b90
 80033fc:	20000bbc 	.word	0x20000bbc
 8003400:	20000ba4 	.word	0x20000ba4

08003404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003412:	2b00      	cmp	r3, #0
 8003414:	d108      	bne.n	8003428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4618      	mov	r0, r3
 800341c:	f000 ff88 	bl	8004330 <vPortFree>
				vPortFree( pxTCB );
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 ff85 	bl	8004330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003426:	e018      	b.n	800345a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800342e:	2b01      	cmp	r3, #1
 8003430:	d103      	bne.n	800343a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 ff7c 	bl	8004330 <vPortFree>
	}
 8003438:	e00f      	b.n	800345a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003440:	2b02      	cmp	r3, #2
 8003442:	d00a      	beq.n	800345a <prvDeleteTCB+0x56>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	60fb      	str	r3, [r7, #12]
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <prvDeleteTCB+0x54>
	}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <prvResetNextTaskUnblockTime+0x38>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <prvResetNextTaskUnblockTime+0x3c>)
 8003476:	f04f 32ff 	mov.w	r2, #4294967295
 800347a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800347c:	e008      	b.n	8003490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <prvResetNextTaskUnblockTime+0x38>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <prvResetNextTaskUnblockTime+0x3c>)
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	20000b74 	.word	0x20000b74
 80034a0:	20000bdc 	.word	0x20000bdc

080034a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <xTaskGetSchedulerState+0x34>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034b2:	2301      	movs	r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	e008      	b.n	80034ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b8:	4b08      	ldr	r3, [pc, #32]	; (80034dc <xTaskGetSchedulerState+0x38>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034c0:	2302      	movs	r3, #2
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	e001      	b.n	80034ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034ca:	687b      	ldr	r3, [r7, #4]
	}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	20000bc8 	.word	0x20000bc8
 80034dc:	20000be4 	.word	0x20000be4

080034e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d056      	beq.n	80035a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <xTaskPriorityDisinherit+0xd0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d00a      	beq.n	8003516 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60fb      	str	r3, [r7, #12]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	60bb      	str	r3, [r7, #8]
}
 8003530:	bf00      	nop
 8003532:	e7fe      	b.n	8003532 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	429a      	cmp	r2, r3
 8003548:	d02c      	beq.n	80035a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d128      	bne.n	80035a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3304      	adds	r3, #4
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fbb6 	bl	8001cc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <xTaskPriorityDisinherit+0xd4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d903      	bls.n	8003584 <xTaskPriorityDisinherit+0xa4>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <xTaskPriorityDisinherit+0xd4>)
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <xTaskPriorityDisinherit+0xd8>)
 8003592:	441a      	add	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f7fe fb37 	bl	8001c0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035a4:	697b      	ldr	r3, [r7, #20]
	}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200006e8 	.word	0x200006e8
 80035b4:	20000bc4 	.word	0x20000bc4
 80035b8:	200006ec 	.word	0x200006ec

080035bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <prvAddCurrentTaskToDelayedList+0x90>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <prvAddCurrentTaskToDelayedList+0x94>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fb78 	bl	8001cc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d10a      	bne.n	80035f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d007      	beq.n	80035f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e6:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <prvAddCurrentTaskToDelayedList+0x94>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4819      	ldr	r0, [pc, #100]	; (8003654 <prvAddCurrentTaskToDelayedList+0x98>)
 80035f0:	f7fe fb0d 	bl	8001c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035f4:	e026      	b.n	8003644 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035fe:	4b14      	ldr	r3, [pc, #80]	; (8003650 <prvAddCurrentTaskToDelayedList+0x94>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	429a      	cmp	r2, r3
 800360c:	d209      	bcs.n	8003622 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <prvAddCurrentTaskToDelayedList+0x94>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3304      	adds	r3, #4
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fe fb1b 	bl	8001c56 <vListInsert>
}
 8003620:	e010      	b.n	8003644 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <prvAddCurrentTaskToDelayedList+0x94>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7fe fb11 	bl	8001c56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d202      	bcs.n	8003644 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6013      	str	r3, [r2, #0]
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000bc0 	.word	0x20000bc0
 8003650:	200006e8 	.word	0x200006e8
 8003654:	20000ba8 	.word	0x20000ba8
 8003658:	20000b78 	.word	0x20000b78
 800365c:	20000b74 	.word	0x20000b74
 8003660:	20000bdc 	.word	0x20000bdc

08003664 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800366e:	f000 fb07 	bl	8003c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <xTimerCreateTimerTask+0x80>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d021      	beq.n	80036be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003682:	1d3a      	adds	r2, r7, #4
 8003684:	f107 0108 	add.w	r1, r7, #8
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fa77 	bl	8001b80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	9202      	str	r2, [sp, #8]
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	2302      	movs	r3, #2
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	460a      	mov	r2, r1
 80036a4:	4910      	ldr	r1, [pc, #64]	; (80036e8 <xTimerCreateTimerTask+0x84>)
 80036a6:	4811      	ldr	r0, [pc, #68]	; (80036ec <xTimerCreateTimerTask+0x88>)
 80036a8:	f7ff f8de 	bl	8002868 <xTaskCreateStatic>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <xTimerCreateTimerTask+0x8c>)
 80036b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <xTimerCreateTimerTask+0x8c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80036ba:	2301      	movs	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	613b      	str	r3, [r7, #16]
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80036da:	697b      	ldr	r3, [r7, #20]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000c18 	.word	0x20000c18
 80036e8:	08004620 	.word	0x08004620
 80036ec:	08003829 	.word	0x08003829
 80036f0:	20000c1c 	.word	0x20000c1c

080036f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <xTimerGenericCommand+0x2e>
	__asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	623b      	str	r3, [r7, #32]
}
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <xTimerGenericCommand+0x98>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d02a      	beq.n	8003780 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b05      	cmp	r3, #5
 800373a:	dc18      	bgt.n	800376e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800373c:	f7ff feb2 	bl	80034a4 <xTaskGetSchedulerState>
 8003740:	4603      	mov	r3, r0
 8003742:	2b02      	cmp	r3, #2
 8003744:	d109      	bne.n	800375a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <xTimerGenericCommand+0x98>)
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	f107 0110 	add.w	r1, r7, #16
 800374e:	2300      	movs	r3, #0
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	f7fe fc21 	bl	8001f98 <xQueueGenericSend>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24
 8003758:	e012      	b.n	8003780 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <xTimerGenericCommand+0x98>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f107 0110 	add.w	r1, r7, #16
 8003762:	2300      	movs	r3, #0
 8003764:	2200      	movs	r2, #0
 8003766:	f7fe fc17 	bl	8001f98 <xQueueGenericSend>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24
 800376c:	e008      	b.n	8003780 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <xTimerGenericCommand+0x98>)
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	f107 0110 	add.w	r1, r7, #16
 8003776:	2300      	movs	r3, #0
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	f7fe fd0b 	bl	8002194 <xQueueGenericSendFromISR>
 800377e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003782:	4618      	mov	r0, r3
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000c18 	.word	0x20000c18

08003790 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <prvProcessExpiredTimer+0x94>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe fa8d 	bl	8001cc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d022      	beq.n	8003802 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	18d1      	adds	r1, r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	6978      	ldr	r0, [r7, #20]
 80037ca:	f000 f8d1 	bl	8003970 <prvInsertTimerInActiveList>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01f      	beq.n	8003814 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2300      	movs	r3, #0
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	2100      	movs	r1, #0
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	f7ff ff88 	bl	80036f4 <xTimerGenericCommand>
 80037e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d113      	bne.n	8003814 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	60fb      	str	r3, [r7, #12]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	b2da      	uxtb	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	4798      	blx	r3
}
 800381c:	bf00      	nop
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000c10 	.word	0x20000c10

08003828 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003830:	f107 0308 	add.w	r3, r7, #8
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f857 	bl	80038e8 <prvGetNextExpireTime>
 800383a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4619      	mov	r1, r3
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f803 	bl	800384c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003846:	f000 f8d5 	bl	80039f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800384a:	e7f1      	b.n	8003830 <prvTimerTask+0x8>

0800384c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003856:	f7ff fa43 	bl	8002ce0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f866 	bl	8003930 <prvSampleTimeNow>
 8003864:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d130      	bne.n	80038ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <prvProcessTimerOrBlockTask+0x3c>
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	429a      	cmp	r2, r3
 8003878:	d806      	bhi.n	8003888 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800387a:	f7ff fa3f 	bl	8002cfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800387e:	68f9      	ldr	r1, [r7, #12]
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff85 	bl	8003790 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003886:	e024      	b.n	80038d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <prvProcessTimerOrBlockTask+0x90>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <prvProcessTimerOrBlockTask+0x50>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <prvProcessTimerOrBlockTask+0x52>
 800389c:	2300      	movs	r3, #0
 800389e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <prvProcessTimerOrBlockTask+0x94>)
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fe ffa7 	bl	8002800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80038b2:	f7ff fa23 	bl	8002cfc <xTaskResumeAll>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <prvProcessTimerOrBlockTask+0x98>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
}
 80038cc:	e001      	b.n	80038d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80038ce:	f7ff fa15 	bl	8002cfc <xTaskResumeAll>
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000c14 	.word	0x20000c14
 80038e0:	20000c18 	.word	0x20000c18
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <prvGetNextExpireTime+0x44>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <prvGetNextExpireTime+0x16>
 80038fa:	2201      	movs	r2, #1
 80038fc:	e000      	b.n	8003900 <prvGetNextExpireTime+0x18>
 80038fe:	2200      	movs	r2, #0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <prvGetNextExpireTime+0x44>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e001      	b.n	800391c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000c10 	.word	0x20000c10

08003930 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003938:	f7ff fa7e 	bl	8002e38 <xTaskGetTickCount>
 800393c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <prvSampleTimeNow+0x3c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	429a      	cmp	r2, r3
 8003946:	d205      	bcs.n	8003954 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003948:	f000 f936 	bl	8003bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e002      	b.n	800395a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800395a:	4a04      	ldr	r2, [pc, #16]	; (800396c <prvSampleTimeNow+0x3c>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003960:	68fb      	ldr	r3, [r7, #12]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000c20 	.word	0x20000c20

08003970 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d812      	bhi.n	80039bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	1ad2      	subs	r2, r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e01b      	b.n	80039e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <prvInsertTimerInActiveList+0x7c>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3304      	adds	r3, #4
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe f94e 	bl	8001c56 <vListInsert>
 80039ba:	e012      	b.n	80039e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d206      	bcs.n	80039d2 <prvInsertTimerInActiveList+0x62>
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d302      	bcc.n	80039d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e007      	b.n	80039e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <prvInsertTimerInActiveList+0x80>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f7fe f93a 	bl	8001c56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000c14 	.word	0x20000c14
 80039f0:	20000c10 	.word	0x20000c10

080039f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	; 0x38
 80039f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039fa:	e0ca      	b.n	8003b92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da18      	bge.n	8003a34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	3304      	adds	r3, #4
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	61fb      	str	r3, [r7, #28]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2a:	6850      	ldr	r0, [r2, #4]
 8003a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2e:	6892      	ldr	r2, [r2, #8]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f2c0 80aa 	blt.w	8003b90 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fe f93b 	bl	8001cc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a52:	463b      	mov	r3, r7
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff ff6b 	bl	8003930 <prvSampleTimeNow>
 8003a5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b09      	cmp	r3, #9
 8003a60:	f200 8097 	bhi.w	8003b92 <prvProcessReceivedCommands+0x19e>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <prvProcessReceivedCommands+0x78>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a95 	.word	0x08003a95
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a95 	.word	0x08003a95
 8003a78:	08003b09 	.word	0x08003b09
 8003a7c:	08003b1d 	.word	0x08003b1d
 8003a80:	08003b67 	.word	0x08003b67
 8003a84:	08003a95 	.word	0x08003a95
 8003a88:	08003a95 	.word	0x08003a95
 8003a8c:	08003b09 	.word	0x08003b09
 8003a90:	08003b1d 	.word	0x08003b1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	18d1      	adds	r1, r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab4:	f7ff ff5c 	bl	8003970 <prvInsertTimerInActiveList>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d069      	beq.n	8003b92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05e      	beq.n	8003b92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	441a      	add	r2, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae6:	f7ff fe05 	bl	80036f4 <xTimerGenericCommand>
 8003aea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d14f      	bne.n	8003b92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	61bb      	str	r3, [r7, #24]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b1a:	e03a      	b.n	8003b92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	617b      	str	r3, [r7, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	18d1      	adds	r1, r2, r3
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b60:	f7ff ff06 	bl	8003970 <prvInsertTimerInActiveList>
					break;
 8003b64:	e015      	b.n	8003b92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b76:	f000 fbdb 	bl	8004330 <vPortFree>
 8003b7a:	e00a      	b.n	8003b92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003b8e:	e000      	b.n	8003b92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003b90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <prvProcessReceivedCommands+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	1d39      	adds	r1, r7, #4
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fb96 	bl	80022cc <xQueueReceive>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f47f af2a 	bne.w	80039fc <prvProcessReceivedCommands+0x8>
	}
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3730      	adds	r7, #48	; 0x30
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000c18 	.word	0x20000c18

08003bb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bbe:	e048      	b.n	8003c52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bc0:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <prvSwitchTimerLists+0xc0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bca:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <prvSwitchTimerLists+0xc0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe f875 	bl	8001cc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02e      	beq.n	8003c52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d90e      	bls.n	8003c24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c12:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <prvSwitchTimerLists+0xc0>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fe f81a 	bl	8001c56 <vListInsert>
 8003c22:	e016      	b.n	8003c52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c24:	2300      	movs	r3, #0
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff fd60 	bl	80036f4 <xTimerGenericCommand>
 8003c34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	603b      	str	r3, [r7, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <prvSwitchTimerLists+0xc0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1b1      	bne.n	8003bc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <prvSwitchTimerLists+0xc0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <prvSwitchTimerLists+0xc4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <prvSwitchTimerLists+0xc0>)
 8003c68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <prvSwitchTimerLists+0xc4>)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	6013      	str	r3, [r2, #0]
}
 8003c70:	bf00      	nop
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000c10 	.word	0x20000c10
 8003c7c:	20000c14 	.word	0x20000c14

08003c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003c86:	f000 f965 	bl	8003f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <prvCheckForValidListAndQueue+0x60>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d120      	bne.n	8003cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003c92:	4814      	ldr	r0, [pc, #80]	; (8003ce4 <prvCheckForValidListAndQueue+0x64>)
 8003c94:	f7fd ff8e 	bl	8001bb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003c98:	4813      	ldr	r0, [pc, #76]	; (8003ce8 <prvCheckForValidListAndQueue+0x68>)
 8003c9a:	f7fd ff8b 	bl	8001bb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <prvCheckForValidListAndQueue+0x6c>)
 8003ca0:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <prvCheckForValidListAndQueue+0x64>)
 8003ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <prvCheckForValidListAndQueue+0x70>)
 8003ca6:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <prvCheckForValidListAndQueue+0x68>)
 8003ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <prvCheckForValidListAndQueue+0x74>)
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <prvCheckForValidListAndQueue+0x78>)
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	200a      	movs	r0, #10
 8003cb6:	f7fe f899 	bl	8001dec <xQueueGenericCreateStatic>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <prvCheckForValidListAndQueue+0x60>)
 8003cbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <prvCheckForValidListAndQueue+0x60>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <prvCheckForValidListAndQueue+0x60>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	490b      	ldr	r1, [pc, #44]	; (8003cfc <prvCheckForValidListAndQueue+0x7c>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fd6c 	bl	80027ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cd4:	f000 f96e 	bl	8003fb4 <vPortExitCritical>
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000c18 	.word	0x20000c18
 8003ce4:	20000be8 	.word	0x20000be8
 8003ce8:	20000bfc 	.word	0x20000bfc
 8003cec:	20000c10 	.word	0x20000c10
 8003cf0:	20000c14 	.word	0x20000c14
 8003cf4:	20000cc4 	.word	0x20000cc4
 8003cf8:	20000c24 	.word	0x20000c24
 8003cfc:	08004628 	.word	0x08004628

08003d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3b04      	subs	r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3b04      	subs	r3, #4
 8003d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d30:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <pxPortInitialiseStack+0x64>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b14      	subs	r3, #20
 8003d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b04      	subs	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f06f 0202 	mvn.w	r2, #2
 8003d4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3b20      	subs	r3, #32
 8003d54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	08003d69 	.word	0x08003d69

08003d68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <prvTaskExitError+0x54>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d00a      	beq.n	8003d92 <prvTaskExitError+0x2a>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	60fb      	str	r3, [r7, #12]
}
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <prvTaskExitError+0x28>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	60bb      	str	r3, [r7, #8]
}
 8003da4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003da6:	bf00      	nop
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0fc      	beq.n	8003da8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <pxCurrentTCBConst2>)
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	6808      	ldr	r0, [r1, #0]
 8003dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	f380 8809 	msr	PSP, r0
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8811 	msr	BASEPRI, r0
 8003dda:	4770      	bx	lr
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst2>:
 8003de0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003de8:	4808      	ldr	r0, [pc, #32]	; (8003e0c <prvPortStartFirstTask+0x24>)
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	f380 8808 	msr	MSP, r0
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8814 	msr	CONTROL, r0
 8003dfa:	b662      	cpsie	i
 8003dfc:	b661      	cpsie	f
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	df00      	svc	0
 8003e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e0a:	bf00      	nop
 8003e0c:	e000ed08 	.word	0xe000ed08

08003e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e16:	4b46      	ldr	r3, [pc, #280]	; (8003f30 <xPortStartScheduler+0x120>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a46      	ldr	r2, [pc, #280]	; (8003f34 <xPortStartScheduler+0x124>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10a      	bne.n	8003e36 <xPortStartScheduler+0x26>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	613b      	str	r3, [r7, #16]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e36:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <xPortStartScheduler+0x120>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a3f      	ldr	r2, [pc, #252]	; (8003f38 <xPortStartScheduler+0x128>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10a      	bne.n	8003e56 <xPortStartScheduler+0x46>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e56:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <xPortStartScheduler+0x12c>)
 8003e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <xPortStartScheduler+0x130>)
 8003e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <xPortStartScheduler+0x134>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e84:	e009      	b.n	8003e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <xPortStartScheduler+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <xPortStartScheduler+0x134>)
 8003e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d0ef      	beq.n	8003e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <xPortStartScheduler+0x134>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00a      	beq.n	8003ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60bb      	str	r3, [r7, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <xPortStartScheduler+0x134>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <xPortStartScheduler+0x134>)
 8003ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <xPortStartScheduler+0x134>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <xPortStartScheduler+0x134>)
 8003edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <xPortStartScheduler+0x138>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <xPortStartScheduler+0x138>)
 8003eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <xPortStartScheduler+0x138>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <xPortStartScheduler+0x138>)
 8003ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003efe:	f000 f8dd 	bl	80040bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <xPortStartScheduler+0x13c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f08:	f000 f8fc 	bl	8004104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <xPortStartScheduler+0x140>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <xPortStartScheduler+0x140>)
 8003f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f18:	f7ff ff66 	bl	8003de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f1c:	f7ff f856 	bl	8002fcc <vTaskSwitchContext>
	prvTaskExitError();
 8003f20:	f7ff ff22 	bl	8003d68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00
 8003f34:	410fc271 	.word	0x410fc271
 8003f38:	410fc270 	.word	0x410fc270
 8003f3c:	e000e400 	.word	0xe000e400
 8003f40:	20000d14 	.word	0x20000d14
 8003f44:	20000d18 	.word	0x20000d18
 8003f48:	e000ed20 	.word	0xe000ed20
 8003f4c:	2000000c 	.word	0x2000000c
 8003f50:	e000ef34 	.word	0xe000ef34

08003f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	607b      	str	r3, [r7, #4]
}
 8003f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <vPortEnterCritical+0x58>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	4a0d      	ldr	r2, [pc, #52]	; (8003fac <vPortEnterCritical+0x58>)
 8003f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <vPortEnterCritical+0x58>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10f      	bne.n	8003fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <vPortEnterCritical+0x5c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	603b      	str	r3, [r7, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vPortEnterCritical+0x4a>
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <vPortExitCritical+0x50>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <vPortExitCritical+0x24>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	607b      	str	r3, [r7, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <vPortExitCritical+0x50>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <vPortExitCritical+0x50>)
 8003fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <vPortExitCritical+0x50>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <vPortExitCritical+0x42>
 8003fea:	2300      	movs	r3, #0
 8003fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f383 8811 	msr	BASEPRI, r3
}
 8003ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c
	...

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f01e 0f10 	tst.w	lr, #16
 8004020:	bf08      	it	eq
 8004022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004034:	f380 8811 	msr	BASEPRI, r0
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f7fe ffc4 	bl	8002fcc <vTaskSwitchContext>
 8004044:	f04f 0000 	mov.w	r0, #0
 8004048:	f380 8811 	msr	BASEPRI, r0
 800404c:	bc09      	pop	{r0, r3}
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	6808      	ldr	r0, [r1, #0]
 8004052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004056:	f01e 0f10 	tst.w	lr, #16
 800405a:	bf08      	it	eq
 800405c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004060:	f380 8809 	msr	PSP, r0
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst>:
 8004070:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	607b      	str	r3, [r7, #4]
}
 8004090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004092:	f7fe fee1 	bl	8002e58 <xTaskIncrementTick>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <xPortSysTickHandler+0x40>)
 800409e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	2300      	movs	r3, #0
 80040a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f383 8811 	msr	BASEPRI, r3
}
 80040ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <vPortSetupTimerInterrupt+0x34>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040c6:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <vPortSetupTimerInterrupt+0x38>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <vPortSetupTimerInterrupt+0x3c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <vPortSetupTimerInterrupt+0x40>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <vPortSetupTimerInterrupt+0x44>)
 80040da:	3b01      	subs	r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <vPortSetupTimerInterrupt+0x34>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000e010 	.word	0xe000e010
 80040f4:	e000e018 	.word	0xe000e018
 80040f8:	20000000 	.word	0x20000000
 80040fc:	10624dd3 	.word	0x10624dd3
 8004100:	e000e014 	.word	0xe000e014

08004104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004114 <vPortEnableVFP+0x10>
 8004108:	6801      	ldr	r1, [r0, #0]
 800410a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800410e:	6001      	str	r1, [r0, #0]
 8004110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004112:	bf00      	nop
 8004114:	e000ed88 	.word	0xe000ed88

08004118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800411e:	f3ef 8305 	mrs	r3, IPSR
 8004122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b0f      	cmp	r3, #15
 8004128:	d914      	bls.n	8004154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <vPortValidateInterruptPriority+0x70>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <vPortValidateInterruptPriority+0x74>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	7afa      	ldrb	r2, [r7, #11]
 800413a:	429a      	cmp	r2, r3
 800413c:	d20a      	bcs.n	8004154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	607b      	str	r3, [r7, #4]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <vPortValidateInterruptPriority+0x78>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <vPortValidateInterruptPriority+0x7c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d90a      	bls.n	800417a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	603b      	str	r3, [r7, #0]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <vPortValidateInterruptPriority+0x60>
	}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000e3f0 	.word	0xe000e3f0
 800418c:	20000d14 	.word	0x20000d14
 8004190:	e000ed0c 	.word	0xe000ed0c
 8004194:	20000d18 	.word	0x20000d18

08004198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041a4:	f7fe fd9c 	bl	8002ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041a8:	4b5b      	ldr	r3, [pc, #364]	; (8004318 <pvPortMalloc+0x180>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041b0:	f000 f920 	bl	80043f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041b4:	4b59      	ldr	r3, [pc, #356]	; (800431c <pvPortMalloc+0x184>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8093 	bne.w	80042e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01d      	beq.n	8004204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041c8:	2208      	movs	r2, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d014      	beq.n	8004204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	3308      	adds	r3, #8
 80041e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <pvPortMalloc+0x6c>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	617b      	str	r3, [r7, #20]
}
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d06e      	beq.n	80042e8 <pvPortMalloc+0x150>
 800420a:	4b45      	ldr	r3, [pc, #276]	; (8004320 <pvPortMalloc+0x188>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d869      	bhi.n	80042e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004214:	4b43      	ldr	r3, [pc, #268]	; (8004324 <pvPortMalloc+0x18c>)
 8004216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <pvPortMalloc+0x18c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800421e:	e004      	b.n	800422a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <pvPortMalloc+0xa4>
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f1      	bne.n	8004220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <pvPortMalloc+0x180>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	429a      	cmp	r2, r3
 8004244:	d050      	beq.n	80042e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2208      	movs	r2, #8
 800424c:	4413      	add	r3, r2
 800424e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1ad2      	subs	r2, r2, r3
 8004260:	2308      	movs	r3, #8
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	429a      	cmp	r2, r3
 8004266:	d91f      	bls.n	80042a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <pvPortMalloc+0xf8>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	613b      	str	r3, [r7, #16]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042a2:	69b8      	ldr	r0, [r7, #24]
 80042a4:	f000 f908 	bl	80044b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <pvPortMalloc+0x188>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <pvPortMalloc+0x188>)
 80042b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042b6:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <pvPortMalloc+0x188>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <pvPortMalloc+0x190>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d203      	bcs.n	80042ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <pvPortMalloc+0x188>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <pvPortMalloc+0x190>)
 80042c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <pvPortMalloc+0x184>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <pvPortMalloc+0x194>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a11      	ldr	r2, [pc, #68]	; (800432c <pvPortMalloc+0x194>)
 80042e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042e8:	f7fe fd08 	bl	8002cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <pvPortMalloc+0x174>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60fb      	str	r3, [r7, #12]
}
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <pvPortMalloc+0x172>
	return pvReturn;
 800430c:	69fb      	ldr	r3, [r7, #28]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	; 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20004924 	.word	0x20004924
 800431c:	20004938 	.word	0x20004938
 8004320:	20004928 	.word	0x20004928
 8004324:	2000491c 	.word	0x2000491c
 8004328:	2000492c 	.word	0x2000492c
 800432c:	20004930 	.word	0x20004930

08004330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d04d      	beq.n	80043de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004342:	2308      	movs	r3, #8
 8004344:	425b      	negs	r3, r3
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4413      	add	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <vPortFree+0xb8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <vPortFree+0x44>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	60fb      	str	r3, [r7, #12]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <vPortFree+0x62>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60bb      	str	r3, [r7, #8]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <vPortFree+0xb8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01e      	beq.n	80043de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11a      	bne.n	80043de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <vPortFree+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	401a      	ands	r2, r3
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043b8:	f7fe fc92 	bl	8002ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <vPortFree+0xbc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <vPortFree+0xbc>)
 80043c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ca:	6938      	ldr	r0, [r7, #16]
 80043cc:	f000 f874 	bl	80044b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043d0:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <vPortFree+0xc0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <vPortFree+0xc0>)
 80043d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043da:	f7fe fc8f 	bl	8002cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20004938 	.word	0x20004938
 80043ec:	20004928 	.word	0x20004928
 80043f0:	20004934 	.word	0x20004934

080043f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80043fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <prvHeapInit+0xac>)
 8004402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3307      	adds	r3, #7
 8004412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <prvHeapInit+0xac>)
 8004424:	4413      	add	r3, r2
 8004426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <prvHeapInit+0xb0>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <prvHeapInit+0xb0>)
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4413      	add	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004440:	2208      	movs	r2, #8
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0307 	bic.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <prvHeapInit+0xb4>)
 8004454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <prvHeapInit+0xb4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <prvHeapInit+0xb4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <prvHeapInit+0xb4>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <prvHeapInit+0xb8>)
 8004482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <prvHeapInit+0xbc>)
 800448a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <prvHeapInit+0xc0>)
 800448e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	20000d1c 	.word	0x20000d1c
 80044a4:	2000491c 	.word	0x2000491c
 80044a8:	20004924 	.word	0x20004924
 80044ac:	2000492c 	.word	0x2000492c
 80044b0:	20004928 	.word	0x20004928
 80044b4:	20004938 	.word	0x20004938

080044b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <prvInsertBlockIntoFreeList+0xac>)
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e002      	b.n	80044cc <prvInsertBlockIntoFreeList+0x14>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d8f7      	bhi.n	80044c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d108      	bne.n	80044fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d118      	bne.n	8004540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d00d      	beq.n	8004536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e008      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e003      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d002      	beq.n	8004556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000491c 	.word	0x2000491c
 8004568:	20004924 	.word	0x20004924

0800456c <__libc_init_array>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	4d0d      	ldr	r5, [pc, #52]	; (80045a4 <__libc_init_array+0x38>)
 8004570:	4c0d      	ldr	r4, [pc, #52]	; (80045a8 <__libc_init_array+0x3c>)
 8004572:	1b64      	subs	r4, r4, r5
 8004574:	10a4      	asrs	r4, r4, #2
 8004576:	2600      	movs	r6, #0
 8004578:	42a6      	cmp	r6, r4
 800457a:	d109      	bne.n	8004590 <__libc_init_array+0x24>
 800457c:	4d0b      	ldr	r5, [pc, #44]	; (80045ac <__libc_init_array+0x40>)
 800457e:	4c0c      	ldr	r4, [pc, #48]	; (80045b0 <__libc_init_array+0x44>)
 8004580:	f000 f82e 	bl	80045e0 <_init>
 8004584:	1b64      	subs	r4, r4, r5
 8004586:	10a4      	asrs	r4, r4, #2
 8004588:	2600      	movs	r6, #0
 800458a:	42a6      	cmp	r6, r4
 800458c:	d105      	bne.n	800459a <__libc_init_array+0x2e>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	f855 3b04 	ldr.w	r3, [r5], #4
 8004594:	4798      	blx	r3
 8004596:	3601      	adds	r6, #1
 8004598:	e7ee      	b.n	8004578 <__libc_init_array+0xc>
 800459a:	f855 3b04 	ldr.w	r3, [r5], #4
 800459e:	4798      	blx	r3
 80045a0:	3601      	adds	r6, #1
 80045a2:	e7f2      	b.n	800458a <__libc_init_array+0x1e>
 80045a4:	080046cc 	.word	0x080046cc
 80045a8:	080046cc 	.word	0x080046cc
 80045ac:	080046cc 	.word	0x080046cc
 80045b0:	080046d0 	.word	0x080046d0

080045b4 <memcpy>:
 80045b4:	440a      	add	r2, r1
 80045b6:	4291      	cmp	r1, r2
 80045b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045bc:	d100      	bne.n	80045c0 <memcpy+0xc>
 80045be:	4770      	bx	lr
 80045c0:	b510      	push	{r4, lr}
 80045c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ca:	4291      	cmp	r1, r2
 80045cc:	d1f9      	bne.n	80045c2 <memcpy+0xe>
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <memset>:
 80045d0:	4402      	add	r2, r0
 80045d2:	4603      	mov	r3, r0
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d100      	bne.n	80045da <memset+0xa>
 80045d8:	4770      	bx	lr
 80045da:	f803 1b01 	strb.w	r1, [r3], #1
 80045de:	e7f9      	b.n	80045d4 <memset+0x4>

080045e0 <_init>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr

080045ec <_fini>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr
