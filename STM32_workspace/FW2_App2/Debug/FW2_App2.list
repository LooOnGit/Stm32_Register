
FW2_App2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002590  080041a0  080041a0  000041a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006730  08006730  00006730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006960  08006960  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  08006960  08006960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006968  08006968  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006968  08006968  00006968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800696c  0800696c  0000696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006970  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004040  20000070  080069e0  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b0  080069e0  000140b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005330  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001221  00000000  00000000  000153d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  000165f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c0  00000000  00000000  00016a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e46  00000000  00000000  00016e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005280  00000000  00000000  0002bc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826b4  00000000  00000000  00030ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b358a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016c8  00000000  00000000  000b35e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041a0 <__do_global_dtors_aux>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	4c05      	ldr	r4, [pc, #20]	; (80041b8 <__do_global_dtors_aux+0x18>)
 80041a4:	7823      	ldrb	r3, [r4, #0]
 80041a6:	b933      	cbnz	r3, 80041b6 <__do_global_dtors_aux+0x16>
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <__do_global_dtors_aux+0x1c>)
 80041aa:	b113      	cbz	r3, 80041b2 <__do_global_dtors_aux+0x12>
 80041ac:	4804      	ldr	r0, [pc, #16]	; (80041c0 <__do_global_dtors_aux+0x20>)
 80041ae:	f3af 8000 	nop.w
 80041b2:	2301      	movs	r3, #1
 80041b4:	7023      	strb	r3, [r4, #0]
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	20000070 	.word	0x20000070
 80041bc:	00000000 	.word	0x00000000
 80041c0:	08006718 	.word	0x08006718

080041c4 <frame_dummy>:
 80041c4:	b508      	push	{r3, lr}
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <frame_dummy+0x10>)
 80041c8:	b11b      	cbz	r3, 80041d2 <frame_dummy+0xe>
 80041ca:	4903      	ldr	r1, [pc, #12]	; (80041d8 <frame_dummy+0x14>)
 80041cc:	4803      	ldr	r0, [pc, #12]	; (80041dc <frame_dummy+0x18>)
 80041ce:	f3af 8000 	nop.w
 80041d2:	bd08      	pop	{r3, pc}
 80041d4:	00000000 	.word	0x00000000
 80041d8:	20000074 	.word	0x20000074
 80041dc:	08006718 	.word	0x08006718

080041e0 <strlen>:
 80041e0:	4603      	mov	r3, r0
 80041e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	d1fb      	bne.n	80041e2 <strlen+0x2>
 80041ea:	1a18      	subs	r0, r3, r0
 80041ec:	3801      	subs	r0, #1
 80041ee:	4770      	bx	lr

080041f0 <memchr>:
 80041f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041f4:	2a10      	cmp	r2, #16
 80041f6:	db2b      	blt.n	8004250 <memchr+0x60>
 80041f8:	f010 0f07 	tst.w	r0, #7
 80041fc:	d008      	beq.n	8004210 <memchr+0x20>
 80041fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004202:	3a01      	subs	r2, #1
 8004204:	428b      	cmp	r3, r1
 8004206:	d02d      	beq.n	8004264 <memchr+0x74>
 8004208:	f010 0f07 	tst.w	r0, #7
 800420c:	b342      	cbz	r2, 8004260 <memchr+0x70>
 800420e:	d1f6      	bne.n	80041fe <memchr+0xe>
 8004210:	b4f0      	push	{r4, r5, r6, r7}
 8004212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800421a:	f022 0407 	bic.w	r4, r2, #7
 800421e:	f07f 0700 	mvns.w	r7, #0
 8004222:	2300      	movs	r3, #0
 8004224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004228:	3c08      	subs	r4, #8
 800422a:	ea85 0501 	eor.w	r5, r5, r1
 800422e:	ea86 0601 	eor.w	r6, r6, r1
 8004232:	fa85 f547 	uadd8	r5, r5, r7
 8004236:	faa3 f587 	sel	r5, r3, r7
 800423a:	fa86 f647 	uadd8	r6, r6, r7
 800423e:	faa5 f687 	sel	r6, r5, r7
 8004242:	b98e      	cbnz	r6, 8004268 <memchr+0x78>
 8004244:	d1ee      	bne.n	8004224 <memchr+0x34>
 8004246:	bcf0      	pop	{r4, r5, r6, r7}
 8004248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800424c:	f002 0207 	and.w	r2, r2, #7
 8004250:	b132      	cbz	r2, 8004260 <memchr+0x70>
 8004252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004256:	3a01      	subs	r2, #1
 8004258:	ea83 0301 	eor.w	r3, r3, r1
 800425c:	b113      	cbz	r3, 8004264 <memchr+0x74>
 800425e:	d1f8      	bne.n	8004252 <memchr+0x62>
 8004260:	2000      	movs	r0, #0
 8004262:	4770      	bx	lr
 8004264:	3801      	subs	r0, #1
 8004266:	4770      	bx	lr
 8004268:	2d00      	cmp	r5, #0
 800426a:	bf06      	itte	eq
 800426c:	4635      	moveq	r5, r6
 800426e:	3803      	subeq	r0, #3
 8004270:	3807      	subne	r0, #7
 8004272:	f015 0f01 	tst.w	r5, #1
 8004276:	d107      	bne.n	8004288 <memchr+0x98>
 8004278:	3001      	adds	r0, #1
 800427a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800427e:	bf02      	ittt	eq
 8004280:	3001      	addeq	r0, #1
 8004282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004286:	3001      	addeq	r0, #1
 8004288:	bcf0      	pop	{r4, r5, r6, r7}
 800428a:	3801      	subs	r0, #1
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop

08004290 <__aeabi_uldivmod>:
 8004290:	b953      	cbnz	r3, 80042a8 <__aeabi_uldivmod+0x18>
 8004292:	b94a      	cbnz	r2, 80042a8 <__aeabi_uldivmod+0x18>
 8004294:	2900      	cmp	r1, #0
 8004296:	bf08      	it	eq
 8004298:	2800      	cmpeq	r0, #0
 800429a:	bf1c      	itt	ne
 800429c:	f04f 31ff 	movne.w	r1, #4294967295
 80042a0:	f04f 30ff 	movne.w	r0, #4294967295
 80042a4:	f000 b96e 	b.w	8004584 <__aeabi_idiv0>
 80042a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80042ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80042b0:	f000 f806 	bl	80042c0 <__udivmoddi4>
 80042b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80042b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042bc:	b004      	add	sp, #16
 80042be:	4770      	bx	lr

080042c0 <__udivmoddi4>:
 80042c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	9d08      	ldr	r5, [sp, #32]
 80042c6:	4604      	mov	r4, r0
 80042c8:	468c      	mov	ip, r1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f040 8083 	bne.w	80043d6 <__udivmoddi4+0x116>
 80042d0:	428a      	cmp	r2, r1
 80042d2:	4617      	mov	r7, r2
 80042d4:	d947      	bls.n	8004366 <__udivmoddi4+0xa6>
 80042d6:	fab2 f282 	clz	r2, r2
 80042da:	b142      	cbz	r2, 80042ee <__udivmoddi4+0x2e>
 80042dc:	f1c2 0020 	rsb	r0, r2, #32
 80042e0:	fa24 f000 	lsr.w	r0, r4, r0
 80042e4:	4091      	lsls	r1, r2
 80042e6:	4097      	lsls	r7, r2
 80042e8:	ea40 0c01 	orr.w	ip, r0, r1
 80042ec:	4094      	lsls	r4, r2
 80042ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80042f2:	0c23      	lsrs	r3, r4, #16
 80042f4:	fbbc f6f8 	udiv	r6, ip, r8
 80042f8:	fa1f fe87 	uxth.w	lr, r7
 80042fc:	fb08 c116 	mls	r1, r8, r6, ip
 8004300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004304:	fb06 f10e 	mul.w	r1, r6, lr
 8004308:	4299      	cmp	r1, r3
 800430a:	d909      	bls.n	8004320 <__udivmoddi4+0x60>
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	f106 30ff 	add.w	r0, r6, #4294967295
 8004312:	f080 8119 	bcs.w	8004548 <__udivmoddi4+0x288>
 8004316:	4299      	cmp	r1, r3
 8004318:	f240 8116 	bls.w	8004548 <__udivmoddi4+0x288>
 800431c:	3e02      	subs	r6, #2
 800431e:	443b      	add	r3, r7
 8004320:	1a5b      	subs	r3, r3, r1
 8004322:	b2a4      	uxth	r4, r4
 8004324:	fbb3 f0f8 	udiv	r0, r3, r8
 8004328:	fb08 3310 	mls	r3, r8, r0, r3
 800432c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004330:	fb00 fe0e 	mul.w	lr, r0, lr
 8004334:	45a6      	cmp	lr, r4
 8004336:	d909      	bls.n	800434c <__udivmoddi4+0x8c>
 8004338:	193c      	adds	r4, r7, r4
 800433a:	f100 33ff 	add.w	r3, r0, #4294967295
 800433e:	f080 8105 	bcs.w	800454c <__udivmoddi4+0x28c>
 8004342:	45a6      	cmp	lr, r4
 8004344:	f240 8102 	bls.w	800454c <__udivmoddi4+0x28c>
 8004348:	3802      	subs	r0, #2
 800434a:	443c      	add	r4, r7
 800434c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004350:	eba4 040e 	sub.w	r4, r4, lr
 8004354:	2600      	movs	r6, #0
 8004356:	b11d      	cbz	r5, 8004360 <__udivmoddi4+0xa0>
 8004358:	40d4      	lsrs	r4, r2
 800435a:	2300      	movs	r3, #0
 800435c:	e9c5 4300 	strd	r4, r3, [r5]
 8004360:	4631      	mov	r1, r6
 8004362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004366:	b902      	cbnz	r2, 800436a <__udivmoddi4+0xaa>
 8004368:	deff      	udf	#255	; 0xff
 800436a:	fab2 f282 	clz	r2, r2
 800436e:	2a00      	cmp	r2, #0
 8004370:	d150      	bne.n	8004414 <__udivmoddi4+0x154>
 8004372:	1bcb      	subs	r3, r1, r7
 8004374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004378:	fa1f f887 	uxth.w	r8, r7
 800437c:	2601      	movs	r6, #1
 800437e:	fbb3 fcfe 	udiv	ip, r3, lr
 8004382:	0c21      	lsrs	r1, r4, #16
 8004384:	fb0e 331c 	mls	r3, lr, ip, r3
 8004388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800438c:	fb08 f30c 	mul.w	r3, r8, ip
 8004390:	428b      	cmp	r3, r1
 8004392:	d907      	bls.n	80043a4 <__udivmoddi4+0xe4>
 8004394:	1879      	adds	r1, r7, r1
 8004396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800439a:	d202      	bcs.n	80043a2 <__udivmoddi4+0xe2>
 800439c:	428b      	cmp	r3, r1
 800439e:	f200 80e9 	bhi.w	8004574 <__udivmoddi4+0x2b4>
 80043a2:	4684      	mov	ip, r0
 80043a4:	1ac9      	subs	r1, r1, r3
 80043a6:	b2a3      	uxth	r3, r4
 80043a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80043ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80043b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80043b4:	fb08 f800 	mul.w	r8, r8, r0
 80043b8:	45a0      	cmp	r8, r4
 80043ba:	d907      	bls.n	80043cc <__udivmoddi4+0x10c>
 80043bc:	193c      	adds	r4, r7, r4
 80043be:	f100 33ff 	add.w	r3, r0, #4294967295
 80043c2:	d202      	bcs.n	80043ca <__udivmoddi4+0x10a>
 80043c4:	45a0      	cmp	r8, r4
 80043c6:	f200 80d9 	bhi.w	800457c <__udivmoddi4+0x2bc>
 80043ca:	4618      	mov	r0, r3
 80043cc:	eba4 0408 	sub.w	r4, r4, r8
 80043d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80043d4:	e7bf      	b.n	8004356 <__udivmoddi4+0x96>
 80043d6:	428b      	cmp	r3, r1
 80043d8:	d909      	bls.n	80043ee <__udivmoddi4+0x12e>
 80043da:	2d00      	cmp	r5, #0
 80043dc:	f000 80b1 	beq.w	8004542 <__udivmoddi4+0x282>
 80043e0:	2600      	movs	r6, #0
 80043e2:	e9c5 0100 	strd	r0, r1, [r5]
 80043e6:	4630      	mov	r0, r6
 80043e8:	4631      	mov	r1, r6
 80043ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ee:	fab3 f683 	clz	r6, r3
 80043f2:	2e00      	cmp	r6, #0
 80043f4:	d14a      	bne.n	800448c <__udivmoddi4+0x1cc>
 80043f6:	428b      	cmp	r3, r1
 80043f8:	d302      	bcc.n	8004400 <__udivmoddi4+0x140>
 80043fa:	4282      	cmp	r2, r0
 80043fc:	f200 80b8 	bhi.w	8004570 <__udivmoddi4+0x2b0>
 8004400:	1a84      	subs	r4, r0, r2
 8004402:	eb61 0103 	sbc.w	r1, r1, r3
 8004406:	2001      	movs	r0, #1
 8004408:	468c      	mov	ip, r1
 800440a:	2d00      	cmp	r5, #0
 800440c:	d0a8      	beq.n	8004360 <__udivmoddi4+0xa0>
 800440e:	e9c5 4c00 	strd	r4, ip, [r5]
 8004412:	e7a5      	b.n	8004360 <__udivmoddi4+0xa0>
 8004414:	f1c2 0320 	rsb	r3, r2, #32
 8004418:	fa20 f603 	lsr.w	r6, r0, r3
 800441c:	4097      	lsls	r7, r2
 800441e:	fa01 f002 	lsl.w	r0, r1, r2
 8004422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004426:	40d9      	lsrs	r1, r3
 8004428:	4330      	orrs	r0, r6
 800442a:	0c03      	lsrs	r3, r0, #16
 800442c:	fbb1 f6fe 	udiv	r6, r1, lr
 8004430:	fa1f f887 	uxth.w	r8, r7
 8004434:	fb0e 1116 	mls	r1, lr, r6, r1
 8004438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800443c:	fb06 f108 	mul.w	r1, r6, r8
 8004440:	4299      	cmp	r1, r3
 8004442:	fa04 f402 	lsl.w	r4, r4, r2
 8004446:	d909      	bls.n	800445c <__udivmoddi4+0x19c>
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	f106 3cff 	add.w	ip, r6, #4294967295
 800444e:	f080 808d 	bcs.w	800456c <__udivmoddi4+0x2ac>
 8004452:	4299      	cmp	r1, r3
 8004454:	f240 808a 	bls.w	800456c <__udivmoddi4+0x2ac>
 8004458:	3e02      	subs	r6, #2
 800445a:	443b      	add	r3, r7
 800445c:	1a5b      	subs	r3, r3, r1
 800445e:	b281      	uxth	r1, r0
 8004460:	fbb3 f0fe 	udiv	r0, r3, lr
 8004464:	fb0e 3310 	mls	r3, lr, r0, r3
 8004468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800446c:	fb00 f308 	mul.w	r3, r0, r8
 8004470:	428b      	cmp	r3, r1
 8004472:	d907      	bls.n	8004484 <__udivmoddi4+0x1c4>
 8004474:	1879      	adds	r1, r7, r1
 8004476:	f100 3cff 	add.w	ip, r0, #4294967295
 800447a:	d273      	bcs.n	8004564 <__udivmoddi4+0x2a4>
 800447c:	428b      	cmp	r3, r1
 800447e:	d971      	bls.n	8004564 <__udivmoddi4+0x2a4>
 8004480:	3802      	subs	r0, #2
 8004482:	4439      	add	r1, r7
 8004484:	1acb      	subs	r3, r1, r3
 8004486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800448a:	e778      	b.n	800437e <__udivmoddi4+0xbe>
 800448c:	f1c6 0c20 	rsb	ip, r6, #32
 8004490:	fa03 f406 	lsl.w	r4, r3, r6
 8004494:	fa22 f30c 	lsr.w	r3, r2, ip
 8004498:	431c      	orrs	r4, r3
 800449a:	fa20 f70c 	lsr.w	r7, r0, ip
 800449e:	fa01 f306 	lsl.w	r3, r1, r6
 80044a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80044a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80044aa:	431f      	orrs	r7, r3
 80044ac:	0c3b      	lsrs	r3, r7, #16
 80044ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80044b2:	fa1f f884 	uxth.w	r8, r4
 80044b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80044ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80044be:	fb09 fa08 	mul.w	sl, r9, r8
 80044c2:	458a      	cmp	sl, r1
 80044c4:	fa02 f206 	lsl.w	r2, r2, r6
 80044c8:	fa00 f306 	lsl.w	r3, r0, r6
 80044cc:	d908      	bls.n	80044e0 <__udivmoddi4+0x220>
 80044ce:	1861      	adds	r1, r4, r1
 80044d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80044d4:	d248      	bcs.n	8004568 <__udivmoddi4+0x2a8>
 80044d6:	458a      	cmp	sl, r1
 80044d8:	d946      	bls.n	8004568 <__udivmoddi4+0x2a8>
 80044da:	f1a9 0902 	sub.w	r9, r9, #2
 80044de:	4421      	add	r1, r4
 80044e0:	eba1 010a 	sub.w	r1, r1, sl
 80044e4:	b2bf      	uxth	r7, r7
 80044e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80044ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80044ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80044f2:	fb00 f808 	mul.w	r8, r0, r8
 80044f6:	45b8      	cmp	r8, r7
 80044f8:	d907      	bls.n	800450a <__udivmoddi4+0x24a>
 80044fa:	19e7      	adds	r7, r4, r7
 80044fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8004500:	d22e      	bcs.n	8004560 <__udivmoddi4+0x2a0>
 8004502:	45b8      	cmp	r8, r7
 8004504:	d92c      	bls.n	8004560 <__udivmoddi4+0x2a0>
 8004506:	3802      	subs	r0, #2
 8004508:	4427      	add	r7, r4
 800450a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800450e:	eba7 0708 	sub.w	r7, r7, r8
 8004512:	fba0 8902 	umull	r8, r9, r0, r2
 8004516:	454f      	cmp	r7, r9
 8004518:	46c6      	mov	lr, r8
 800451a:	4649      	mov	r1, r9
 800451c:	d31a      	bcc.n	8004554 <__udivmoddi4+0x294>
 800451e:	d017      	beq.n	8004550 <__udivmoddi4+0x290>
 8004520:	b15d      	cbz	r5, 800453a <__udivmoddi4+0x27a>
 8004522:	ebb3 020e 	subs.w	r2, r3, lr
 8004526:	eb67 0701 	sbc.w	r7, r7, r1
 800452a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800452e:	40f2      	lsrs	r2, r6
 8004530:	ea4c 0202 	orr.w	r2, ip, r2
 8004534:	40f7      	lsrs	r7, r6
 8004536:	e9c5 2700 	strd	r2, r7, [r5]
 800453a:	2600      	movs	r6, #0
 800453c:	4631      	mov	r1, r6
 800453e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004542:	462e      	mov	r6, r5
 8004544:	4628      	mov	r0, r5
 8004546:	e70b      	b.n	8004360 <__udivmoddi4+0xa0>
 8004548:	4606      	mov	r6, r0
 800454a:	e6e9      	b.n	8004320 <__udivmoddi4+0x60>
 800454c:	4618      	mov	r0, r3
 800454e:	e6fd      	b.n	800434c <__udivmoddi4+0x8c>
 8004550:	4543      	cmp	r3, r8
 8004552:	d2e5      	bcs.n	8004520 <__udivmoddi4+0x260>
 8004554:	ebb8 0e02 	subs.w	lr, r8, r2
 8004558:	eb69 0104 	sbc.w	r1, r9, r4
 800455c:	3801      	subs	r0, #1
 800455e:	e7df      	b.n	8004520 <__udivmoddi4+0x260>
 8004560:	4608      	mov	r0, r1
 8004562:	e7d2      	b.n	800450a <__udivmoddi4+0x24a>
 8004564:	4660      	mov	r0, ip
 8004566:	e78d      	b.n	8004484 <__udivmoddi4+0x1c4>
 8004568:	4681      	mov	r9, r0
 800456a:	e7b9      	b.n	80044e0 <__udivmoddi4+0x220>
 800456c:	4666      	mov	r6, ip
 800456e:	e775      	b.n	800445c <__udivmoddi4+0x19c>
 8004570:	4630      	mov	r0, r6
 8004572:	e74a      	b.n	800440a <__udivmoddi4+0x14a>
 8004574:	f1ac 0c02 	sub.w	ip, ip, #2
 8004578:	4439      	add	r1, r7
 800457a:	e713      	b.n	80043a4 <__udivmoddi4+0xe4>
 800457c:	3802      	subs	r0, #2
 800457e:	443c      	add	r4, r7
 8004580:	e724      	b.n	80043cc <__udivmoddi4+0x10c>
 8004582:	bf00      	nop

08004584 <__aeabi_idiv0>:
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop

08004588 <UART1_init>:
char recv_data[16384];
char recv_fw_done_flag = 0;


void UART1_init()
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <UART1_init+0xbc>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <UART1_init+0xbc>)
 8004598:	f043 0302 	orr.w	r3, r3, #2
 800459c:	6313      	str	r3, [r2, #48]	; 0x30
 800459e:	4b29      	ldr	r3, [pc, #164]	; (8004644 <UART1_init+0xbc>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
	//set PB6 as UART1_TX(AF07) and PB7 as UART1_RX(AF07)
	uint32_t* MODER = (uint32_t*)(0x40020400 + 0x00);
 80045aa:	4b27      	ldr	r3, [pc, #156]	; (8004648 <UART1_init+0xc0>)
 80045ac:	617b      	str	r3, [r7, #20]
	uint32_t* AFRL = (uint32_t*)(0x40020420);
 80045ae:	4b27      	ldr	r3, [pc, #156]	; (800464c <UART1_init+0xc4>)
 80045b0:	613b      	str	r3, [r7, #16]
	*MODER &=~(0b1111 << 12); //clear 4 bit 0000
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	601a      	str	r2, [r3, #0]
	*MODER |= (0b10 << 12)|(0b10 << 14);//set alternate function
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	601a      	str	r2, [r3, #0]
	*AFRL &= ~(0xff << 24);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	601a      	str	r2, [r3, #0]
	*AFRL |= (7 << 24) | (7 << 28);//set AF07 for PB6 and PB7
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f043 42ee 	orr.w	r2, r3, #1996488704	; 0x77000000
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	601a      	str	r2, [r3, #0]
	//UART
	//baun rate: 9600
	// +frame:
	// +date len: 8byte
	// +parity (none/add/even): none
	__HAL_RCC_USART1_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <UART1_init+0xbc>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <UART1_init+0xbc>)
 80045ec:	f043 0310 	orr.w	r3, r3, #16
 80045f0:	6453      	str	r3, [r2, #68]	; 0x44
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <UART1_init+0xbc>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
	uint32_t* BRR = (uint32_t*)(0x40011008);
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <UART1_init+0xc8>)
 8004600:	60fb      	str	r3, [r7, #12]
	uint32_t* CR1 = (uint32_t*)(0x4001100c);
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <UART1_init+0xcc>)
 8004604:	60bb      	str	r3, [r7, #8]
	*BRR = (104 << 4) | (3 << 0);//set baunrate in 9600
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f240 6283 	movw	r2, #1667	; 0x683
 800460c:	601a      	str	r2, [r3, #0]
	*CR1 &= ~(1 << 10); //disable parity
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	601a      	str	r2, [r3, #0]
	*CR1 &= ~(1 << 12);//set data lenght 8 bits data
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	601a      	str	r2, [r3, #0]
	*CR1 |= (1 << 13) | (1 << 2) | (1 << 3);//enable transmiter, reciver, uart
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800462e:	f043 030c 	orr.w	r3, r3, #12
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	6013      	str	r3, [r2, #0]
//	uint32_t* CR3 = (uint32_t*)(0x40011014);
//	*CR3 |= (1 << 6);

#endif

}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	40020400 	.word	0x40020400
 800464c:	40020420 	.word	0x40020420
 8004650:	40011008 	.word	0x40011008
 8004654:	4001100c 	.word	0x4001100c

08004658 <UART1_Send_1byte>:

void UART1_Send_1byte(char data){
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]

	//trinh tu read SR to Write DR
	uint32_t* SR = (uint32_t*)(0x40011000);
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <UART1_Send_1byte+0x50>)
 8004664:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)(0x40011004);
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <UART1_Send_1byte+0x54>)
 8004668:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7) & 1) == 0);//Wait DR empty
 800466a:	bf00      	nop
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	09db      	lsrs	r3, r3, #7
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f8      	beq.n	800466c <UART1_Send_1byte+0x14>
	*DR = data;						//write data to DR to UART1 transfer data via TX(PB6)
 800467a:	79fa      	ldrb	r2, [r7, #7]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6) & 1) == 0);//wait transmitter of UART1 complete transmit
 8004680:	bf00      	nop
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	099b      	lsrs	r3, r3, #6
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f8      	beq.n	8004682 <UART1_Send_1byte+0x2a>
	*SR &=~(1<<6);				//clear TC flag
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40011000 	.word	0x40011000
 80046ac:	40011004 	.word	0x40011004

080046b0 <UART1_Send_String>:

void UART1_Send_String(char* msg)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	int msg_len = strlen(msg);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fd91 	bl	80041e0 <strlen>
 80046be:	4603      	mov	r3, r0
 80046c0:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i< msg_len; i++){
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e009      	b.n	80046dc <UART1_Send_String+0x2c>
		UART1_Send_1byte(msg[i]);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ffc1 	bl	8004658 <UART1_Send_1byte>
	for(int i = 0; i< msg_len; i++){
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	dbf1      	blt.n	80046c8 <UART1_Send_String+0x18>
	}
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <UART1_Recv_1Byte>:

char UART1_Recv_1Byte()
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
	uint32_t* SR = (uint32_t*)(0x40011000);
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <UART1_Recv_1Byte+0x34>)
 80046f8:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)(0x40011004);
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <UART1_Recv_1Byte+0x38>)
 80046fc:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 5) & 1) == 0);   //Wait RXNE flag to read recv data
 80046fe:	bf00      	nop
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f8      	beq.n	8004700 <UART1_Recv_1Byte+0x10>
	char recv_data = *DR;			//read recv data
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
	return recv_data;
 8004714:	79fb      	ldrb	r3, [r7, #7]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40011000 	.word	0x40011000
 8004728:	40011004 	.word	0x40011004

0800472c <dma2_uart1rx_init>:
	recv_data[rx_index++] = *DR;

}

#define DMA2_ADDRESS 0x40026400
void dma2_uart1rx_init(int len){
 800472c:	b480      	push	{r7}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	uint32_t* CR3 = (uint32_t*)(0x40011014);
 8004734:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <dma2_uart1rx_init+0x88>)
 8004736:	61fb      	str	r3, [r7, #28]
	*CR3 |= (1 << 6);
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	601a      	str	r2, [r3, #0]
	__HAL_RCC_USART1_CLK_ENABLE();
 8004744:	2300      	movs	r3, #0
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <dma2_uart1rx_init+0x8c>)
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	4a1a      	ldr	r2, [pc, #104]	; (80047b8 <dma2_uart1rx_init+0x8c>)
 800474e:	f043 0310 	orr.w	r3, r3, #16
 8004752:	6453      	str	r3, [r2, #68]	; 0x44
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <dma2_uart1rx_init+0x8c>)
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
	//user DMA2 stream5 channel 4 --> UART1_Rx (DMA mapping table)
	uint32_t* DMA_S5CR = (uint32_t*)(DMA2_ADDRESS + 0x10 + 0x18 * 5);
 8004760:	4b16      	ldr	r3, [pc, #88]	; (80047bc <dma2_uart1rx_init+0x90>)
 8004762:	61bb      	str	r3, [r7, #24]
	uint32_t* DMA_S5NDTR = (uint32_t*)(DMA2_ADDRESS + 0x14 + 0x18 * 5);
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <dma2_uart1rx_init+0x94>)
 8004766:	617b      	str	r3, [r7, #20]
	uint32_t* DMA_S5PAR = (uint32_t*)(DMA2_ADDRESS + 0x18 + 0x18 * 5);
 8004768:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <dma2_uart1rx_init+0x98>)
 800476a:	613b      	str	r3, [r7, #16]
	uint32_t* DMA_S5M0AR = (uint32_t*)(DMA2_ADDRESS + 0x1C + 0x18 * 5);
 800476c:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <dma2_uart1rx_init+0x9c>)
 800476e:	60fb      	str	r3, [r7, #12]
	//recv: 7bytes
	//from: UART_DR   (0x40011004)
	//to: recv_data (0x20000428
	*DMA_S5NDTR = len;
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	601a      	str	r2, [r3, #0]
	*DMA_S5PAR = 0x40011004;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <dma2_uart1rx_init+0xa0>)
 800477a:	601a      	str	r2, [r3, #0]
	*DMA_S5M0AR = (uint32_t*)recv_data;
 800477c:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <dma2_uart1rx_init+0xa4>)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

	*DMA_S5CR |= (0b100 << 25); //select channel 4 for stream 5
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	601a      	str	r2, [r3, #0]
	*DMA_S5CR |= (0b1 << 10); //enable Memory increment mode //mỗi lần nhận dữ liệu thì tăng lên tránh ghi đè
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	601a      	str	r2, [r3, #0]
//	*DMA_S5CR |= (0b1 << 8); // enable Circular mode // khi nhận đủ 7 byte thì nó nhận tiếp và bỏ lại vị trí 1 như ring buffer
//	*DMA_S5CR |= (0b1 << 4);//enable transfer complete interrupt
	*DMA_S5CR |= (0b1 << 0);//enable DMA2 stream 5
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	601a      	str	r2, [r3, #0]

//	uint32_t* ISER2 = (uint32_t*)(0xE000E108);//NVIC register summary
//	*ISER2 |= 1 << (68 - 64); // vector table
}
 80047a6:	bf00      	nop
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40011014 	.word	0x40011014
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40026488 	.word	0x40026488
 80047c0:	4002648c 	.word	0x4002648c
 80047c4:	40026490 	.word	0x40026490
 80047c8:	40026494 	.word	0x40026494
 80047cc:	40011004 	.word	0x40011004
 80047d0:	2000009c 	.word	0x2000009c

080047d4 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(){
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
	__asm("NOP");
 80047da:	bf00      	nop
	//clean interrupt flash - > transfer complete interrupt
	uint32_t* HIFCR = (uint32_t*)(DMA2_ADDRESS + 0x0C);
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <DMA2_Stream5_IRQHandler+0x2c>)
 80047de:	607b      	str	r3, [r7, #4]
	*HIFCR |= 1 << 11; // DMA
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	601a      	str	r2, [r3, #0]
	recv_fw_done_flag = 1;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <DMA2_Stream5_IRQHandler+0x30>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
//	memset(recv_data, 0, 7);
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	4002640c 	.word	0x4002640c
 8004804:	2000008c 	.word	0x2000008c

08004808 <Flash_Erase_Sector>:

void Flash_Erase_Sector(char sector){ // du an thu te thif phai co tra ve ma loi
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	71fb      	strb	r3, [r7, #7]
	uint32_t* FLASH_SR = (uint32_t*)(FLASH_ADDR_BASE + 0x0C);
 8004812:	4b1e      	ldr	r3, [pc, #120]	; (800488c <Flash_Erase_Sector+0x84>)
 8004814:	617b      	str	r3, [r7, #20]
	uint32_t* FLASH_CR = (uint32_t*)(FLASH_ADDR_BASE + 0x10);
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <Flash_Erase_Sector+0x88>)
 8004818:	613b      	str	r3, [r7, #16]
	uint32_t* FLASH_KEYR = (uint32_t*)(FLASH_ADDR_BASE + 0x04);
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <Flash_Erase_Sector+0x8c>)
 800481c:	60fb      	str	r3, [r7, #12]
	//Check that no Flash memory operation is going. wait BSY
	while(((*FLASH_SR >> 16) &1 ) == 1);
 800481e:	bf00      	nop
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f8      	bne.n	8004820 <Flash_Erase_Sector+0x18>
	if(((*FLASH_CR >> 31) & 1) == 1){
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	0fdb      	lsrs	r3, r3, #31
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <Flash_Erase_Sector+0x3c>
		//unlock CR
		*FLASH_KEYR =  0x45670123;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <Flash_Erase_Sector+0x90>)
 800483c:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <Flash_Erase_Sector+0x94>)
 8004842:	601a      	str	r2, [r3, #0]
	}
	*FLASH_CR |= (1 << 1) | (sector << 3);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	79fa      	ldrb	r2, [r7, #7]
 800484a:	00d2      	lsls	r2, r2, #3
 800484c:	4313      	orrs	r3, r2
 800484e:	f043 0202 	orr.w	r2, r3, #2
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (1<<16); //start erase operation
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	601a      	str	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1);//wait BSY is clean
 8004862:	bf00      	nop
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f8      	bne.n	8004864 <Flash_Erase_Sector+0x5c>
	*FLASH_CR &= ~(1 << 1);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 0202 	bic.w	r2, r3, #2
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40023c0c 	.word	0x40023c0c
 8004890:	40023c10 	.word	0x40023c10
 8004894:	40023c04 	.word	0x40023c04
 8004898:	45670123 	.word	0x45670123
 800489c:	cdef89ab 	.word	0xcdef89ab

080048a0 <Flash_Program>:

void Flash_Program(uint8_t* addr, uint8_t value){
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
	uint32_t* FLASH_SR = (uint32_t*)(FLASH_ADDR_BASE + 0x0C);
 80048ac:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <Flash_Program+0x78>)
 80048ae:	617b      	str	r3, [r7, #20]
	uint32_t* FLASH_CR = (uint32_t*)(FLASH_ADDR_BASE + 0x10);
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <Flash_Program+0x7c>)
 80048b2:	613b      	str	r3, [r7, #16]
	uint32_t* FLASH_KEYR = (uint32_t*)(FLASH_ADDR_BASE + 0x04);
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <Flash_Program+0x80>)
 80048b6:	60fb      	str	r3, [r7, #12]
	if(((*FLASH_CR >> 31) & 1) == 1){
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0fdb      	lsrs	r3, r3, #31
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <Flash_Program+0x2e>
		//unlock CR
		*FLASH_KEYR =  0x45670123;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a17      	ldr	r2, [pc, #92]	; (8004924 <Flash_Program+0x84>)
 80048c6:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <Flash_Program+0x88>)
 80048cc:	601a      	str	r2, [r3, #0]
	}
	//Check that no Flash memory operation is going. wait BSY
	while(((*FLASH_SR >> 16) &1 ) == 1);
 80048ce:	bf00      	nop
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f8      	bne.n	80048d0 <Flash_Program+0x30>
	//set the PG bit the FLASH_CR register
	*FLASH_CR |= (1 << 0);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f043 0201 	orr.w	r2, r3, #1
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	601a      	str	r2, [r3, #0]
	*addr = value;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	701a      	strb	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1);
 80048f0:	bf00      	nop
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f8      	bne.n	80048f2 <Flash_Program+0x52>
	*FLASH_CR &= ~(1<<0);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f023 0201 	bic.w	r2, r3, #1
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40023c0c 	.word	0x40023c0c
 800491c:	40023c10 	.word	0x40023c10
 8004920:	40023c04 	.word	0x40023c04
 8004924:	45670123 	.word	0x45670123
 8004928:	cdef89ab 	.word	0xcdef89ab

0800492c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004932:	f000 f9d5 	bl	8004ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004936:	f000 f867 	bl	8004a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800493a:	f000 f8c3 	bl	8004ac4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  UART1_init();
 800493e:	f7ff fe23 	bl	8004588 <UART1_init>
  UART1_Send_String("UPDATE FIRMWARE MODE\r\n");
 8004942:	4828      	ldr	r0, [pc, #160]	; (80049e4 <main+0xb8>)
 8004944:	f7ff feb4 	bl	80046b0 <UART1_Send_String>
  UART1_Send_String("Please send fw size: \r\n");
 8004948:	4827      	ldr	r0, [pc, #156]	; (80049e8 <main+0xbc>)
 800494a:	f7ff feb1 	bl	80046b0 <UART1_Send_String>
  int i = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
  while(strstr(recv_data, "\r\n") == NULL){
 8004952:	e008      	b.n	8004966 <main+0x3a>
	  recv_data[i++] = UART1_Recv_1Byte();
 8004954:	68fc      	ldr	r4, [r7, #12]
 8004956:	1c63      	adds	r3, r4, #1
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	f7ff fec9 	bl	80046f0 <UART1_Recv_1Byte>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	4b22      	ldr	r3, [pc, #136]	; (80049ec <main+0xc0>)
 8004964:	551a      	strb	r2, [r3, r4]
  while(strstr(recv_data, "\r\n") == NULL){
 8004966:	4922      	ldr	r1, [pc, #136]	; (80049f0 <main+0xc4>)
 8004968:	4820      	ldr	r0, [pc, #128]	; (80049ec <main+0xc0>)
 800496a:	f001 f923 	bl	8005bb4 <strstr>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ef      	beq.n	8004954 <main+0x28>
  }
  int fw_size = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	603b      	str	r3, [r7, #0]
  sscanf(recv_data, "size = %d", &fw_size);
 8004978:	463b      	mov	r3, r7
 800497a:	461a      	mov	r2, r3
 800497c:	491d      	ldr	r1, [pc, #116]	; (80049f4 <main+0xc8>)
 800497e:	481b      	ldr	r0, [pc, #108]	; (80049ec <main+0xc0>)
 8004980:	f001 f8ea 	bl	8005b58 <siscanf>
  UART1_Send_String("Please send fw data: \r\n");
 8004984:	481c      	ldr	r0, [pc, #112]	; (80049f8 <main+0xcc>)
 8004986:	f7ff fe93 	bl	80046b0 <UART1_Send_String>
  dma2_uart1rx_init(fw_size);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fecd 	bl	800472c <dma2_uart1rx_init>
  uint32_t* DMA_S5NDTR = (uint32_t*)(DMA2_ADDRESS + 0x14 + 0x18 * 5);
 8004992:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <main+0xd0>)
 8004994:	607b      	str	r3, [r7, #4]
  while(*DMA_S5NDTR > 0);
 8004996:	bf00      	nop
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1fb      	bne.n	8004998 <main+0x6c>
//  while(recv_fw_done_flag != 1);
  UART1_Send_String("recv fw finish \r\n");
 80049a0:	4817      	ldr	r0, [pc, #92]	; (8004a00 <main+0xd4>)
 80049a2:	f7ff fe85 	bl	80046b0 <UART1_Send_String>
  Flash_Erase_Sector(2);
 80049a6:	2002      	movs	r0, #2
 80049a8:	f7ff ff2e 	bl	8004808 <Flash_Erase_Sector>
  for(int i = 0; i < fw_size; i++){
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	e00f      	b.n	80049d2 <main+0xa6>
	  Flash_Program((uint8_t*)(0x08008000+i), recv_data[i]);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80049b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80049bc:	4618      	mov	r0, r3
 80049be:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <main+0xc0>)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7ff ff6a 	bl	80048a0 <Flash_Program>
  for(int i = 0; i < fw_size; i++){
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	dbeb      	blt.n	80049b2 <main+0x86>
  }
  UART1_Send_String("Update complete, please reset chip\r\n");
 80049da:	480a      	ldr	r0, [pc, #40]	; (8004a04 <main+0xd8>)
 80049dc:	f7ff fe68 	bl	80046b0 <UART1_Send_String>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80049e0:	e7fe      	b.n	80049e0 <main+0xb4>
 80049e2:	bf00      	nop
 80049e4:	08006730 	.word	0x08006730
 80049e8:	08006748 	.word	0x08006748
 80049ec:	2000009c 	.word	0x2000009c
 80049f0:	08006760 	.word	0x08006760
 80049f4:	08006764 	.word	0x08006764
 80049f8:	08006770 	.word	0x08006770
 80049fc:	4002648c 	.word	0x4002648c
 8004a00:	08006788 	.word	0x08006788
 8004a04:	0800679c 	.word	0x0800679c

08004a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b094      	sub	sp, #80	; 0x50
 8004a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a0e:	f107 0320 	add.w	r3, r7, #32
 8004a12:	2230      	movs	r2, #48	; 0x30
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f896 	bl	8005b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a1c:	f107 030c 	add.w	r3, r7, #12
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <SystemClock_Config+0xb4>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	4a21      	ldr	r2, [pc, #132]	; (8004abc <SystemClock_Config+0xb4>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <SystemClock_Config+0xb4>)
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <SystemClock_Config+0xb8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <SystemClock_Config+0xb8>)
 8004a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <SystemClock_Config+0xb8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a64:	2302      	movs	r3, #2
 8004a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a74:	f107 0320 	add.w	r3, r7, #32
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fc27 	bl	80052cc <HAL_RCC_OscConfig>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004a84:	f000 f862 	bl	8004b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a88:	230f      	movs	r3, #15
 8004a8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fe8a 	bl	80057bc <HAL_RCC_ClockConfig>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004aae:	f000 f84d 	bl	8004b4c <Error_Handler>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	3750      	adds	r7, #80	; 0x50
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40007000 	.word	0x40007000

08004ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	60da      	str	r2, [r3, #12]
 8004ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <MX_GPIO_Init+0x80>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <MX_GPIO_Init+0x80>)
 8004ae4:	f043 0308 	orr.w	r3, r3, #8
 8004ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aea:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <MX_GPIO_Init+0x80>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <MX_GPIO_Init+0x80>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <MX_GPIO_Init+0x80>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6313      	str	r3, [r2, #48]	; 0x30
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <MX_GPIO_Init+0x80>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b18:	480b      	ldr	r0, [pc, #44]	; (8004b48 <MX_GPIO_Init+0x84>)
 8004b1a:	f000 fbbd 	bl	8005298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b24:	2301      	movs	r3, #1
 8004b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	4619      	mov	r1, r3
 8004b36:	4804      	ldr	r0, [pc, #16]	; (8004b48 <MX_GPIO_Init+0x84>)
 8004b38:	f000 fa2a 	bl	8004f90 <HAL_GPIO_Init>

}
 8004b3c:	bf00      	nop
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40020c00 	.word	0x40020c00

08004b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b50:	b672      	cpsid	i
}
 8004b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b54:	e7fe      	b.n	8004b54 <Error_Handler+0x8>
	...

08004b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <HAL_MspInit+0x4c>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	4a0f      	ldr	r2, [pc, #60]	; (8004ba4 <HAL_MspInit+0x4c>)
 8004b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_MspInit+0x4c>)
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b76:	607b      	str	r3, [r7, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <HAL_MspInit+0x4c>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <HAL_MspInit+0x4c>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_MspInit+0x4c>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800

08004ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bac:	e7fe      	b.n	8004bac <NMI_Handler+0x4>

08004bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bb2:	e7fe      	b.n	8004bb2 <HardFault_Handler+0x4>

08004bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bb8:	e7fe      	b.n	8004bb8 <MemManage_Handler+0x4>

08004bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bbe:	e7fe      	b.n	8004bbe <BusFault_Handler+0x4>

08004bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bc4:	e7fe      	b.n	8004bc4 <UsageFault_Handler+0x4>

08004bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bf4:	f000 f8c6 	bl	8004d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c04:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <_sbrk+0x5c>)
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <_sbrk+0x60>)
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <_sbrk+0x64>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <_sbrk+0x64>)
 8004c1a:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <_sbrk+0x68>)
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <_sbrk+0x64>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4413      	add	r3, r2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d207      	bcs.n	8004c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c2c:	f000 ff62 	bl	8005af4 <__errno>
 8004c30:	4603      	mov	r3, r0
 8004c32:	220c      	movs	r2, #12
 8004c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	e009      	b.n	8004c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <_sbrk+0x64>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <_sbrk+0x64>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <_sbrk+0x64>)
 8004c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20020000 	.word	0x20020000
 8004c5c:	00000400 	.word	0x00000400
 8004c60:	20000090 	.word	0x20000090
 8004c64:	200040b0 	.word	0x200040b0

08004c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <SystemInit+0x20>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	4a05      	ldr	r2, [pc, #20]	; (8004c88 <SystemInit+0x20>)
 8004c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c90:	480d      	ldr	r0, [pc, #52]	; (8004cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c92:	490e      	ldr	r1, [pc, #56]	; (8004ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c94:	4a0e      	ldr	r2, [pc, #56]	; (8004cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c98:	e002      	b.n	8004ca0 <LoopCopyDataInit>

08004c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c9e:	3304      	adds	r3, #4

08004ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ca4:	d3f9      	bcc.n	8004c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ca6:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ca8:	4c0b      	ldr	r4, [pc, #44]	; (8004cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cac:	e001      	b.n	8004cb2 <LoopFillZerobss>

08004cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cb0:	3204      	adds	r2, #4

08004cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cb4:	d3fb      	bcc.n	8004cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004cb6:	f7ff ffd7 	bl	8004c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cba:	f000 ff21 	bl	8005b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cbe:	f7ff fe35 	bl	800492c <main>
  bx  lr    
 8004cc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ccc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004cd0:	08006970 	.word	0x08006970
  ldr r2, =_sbss
 8004cd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004cd8:	200040b0 	.word	0x200040b0

08004cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cdc:	e7fe      	b.n	8004cdc <ADC_IRQHandler>
	...

08004ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <HAL_Init+0x40>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <HAL_Init+0x40>)
 8004cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_Init+0x40>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <HAL_Init+0x40>)
 8004cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_Init+0x40>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <HAL_Init+0x40>)
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d08:	2003      	movs	r0, #3
 8004d0a:	f000 f90d 	bl	8004f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f000 f808 	bl	8004d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d14:	f7ff ff20 	bl	8004b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00

08004d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d2c:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_InitTick+0x54>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_InitTick+0x58>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	4619      	mov	r1, r3
 8004d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f917 	bl	8004f76 <HAL_SYSTICK_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e00e      	b.n	8004d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d80a      	bhi.n	8004d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d58:	2200      	movs	r2, #0
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d60:	f000 f8ed 	bl	8004f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d64:	4a06      	ldr	r2, [pc, #24]	; (8004d80 <HAL_InitTick+0x5c>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e000      	b.n	8004d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000000 	.word	0x20000000
 8004d7c:	20000008 	.word	0x20000008
 8004d80:	20000004 	.word	0x20000004

08004d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <HAL_IncTick+0x20>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <HAL_IncTick+0x24>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4413      	add	r3, r2
 8004d94:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <HAL_IncTick+0x24>)
 8004d96:	6013      	str	r3, [r2, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000008 	.word	0x20000008
 8004da8:	2000409c 	.word	0x2000409c

08004dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return uwTick;
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <HAL_GetTick+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	2000409c 	.word	0x2000409c

08004dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004df6:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <__NVIC_SetPriorityGrouping+0x44>)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	60d3      	str	r3, [r2, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <__NVIC_GetPriorityGrouping+0x18>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 0307 	and.w	r3, r3, #7
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db0a      	blt.n	8004e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	490c      	ldr	r1, [pc, #48]	; (8004e74 <__NVIC_SetPriority+0x4c>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e50:	e00a      	b.n	8004e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <__NVIC_SetPriority+0x50>)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	3b04      	subs	r3, #4
 8004e60:	0112      	lsls	r2, r2, #4
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	440b      	add	r3, r1
 8004e66:	761a      	strb	r2, [r3, #24]
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000e100 	.word	0xe000e100
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f1c3 0307 	rsb	r3, r3, #7
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	bf28      	it	cs
 8004e9a:	2304      	movcs	r3, #4
 8004e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d902      	bls.n	8004eac <NVIC_EncodePriority+0x30>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3b03      	subs	r3, #3
 8004eaa:	e000      	b.n	8004eae <NVIC_EncodePriority+0x32>
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	43d9      	mvns	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	4313      	orrs	r3, r2
         );
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef4:	d301      	bcc.n	8004efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e00f      	b.n	8004f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <SysTick_Config+0x40>)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f02:	210f      	movs	r1, #15
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	f7ff ff8e 	bl	8004e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <SysTick_Config+0x40>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <SysTick_Config+0x40>)
 8004f14:	2207      	movs	r2, #7
 8004f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	e000e010 	.word	0xe000e010

08004f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ff47 	bl	8004dc4 <__NVIC_SetPriorityGrouping>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	4603      	mov	r3, r0
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f50:	f7ff ff5c 	bl	8004e0c <__NVIC_GetPriorityGrouping>
 8004f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f7ff ff8e 	bl	8004e7c <NVIC_EncodePriority>
 8004f60:	4602      	mov	r2, r0
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff5d 	bl	8004e28 <__NVIC_SetPriority>
}
 8004f6e:	bf00      	nop
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ffb0 	bl	8004ee4 <SysTick_Config>
 8004f84:	4603      	mov	r3, r0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	e159      	b.n	8005260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fac:	2201      	movs	r2, #1
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	f040 8148 	bne.w	800525a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d005      	beq.n	8004fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d130      	bne.n	8005044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005018:	2201      	movs	r2, #1
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 0201 	and.w	r2, r3, #1
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b03      	cmp	r3, #3
 800504e:	d017      	beq.n	8005080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	2203      	movs	r2, #3
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d123      	bne.n	80050d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	08da      	lsrs	r2, r3, #3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3208      	adds	r2, #8
 8005094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	220f      	movs	r2, #15
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	08da      	lsrs	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3208      	adds	r2, #8
 80050ce:	69b9      	ldr	r1, [r7, #24]
 80050d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	2203      	movs	r2, #3
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 0203 	and.w	r2, r3, #3
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80a2 	beq.w	800525a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	4b57      	ldr	r3, [pc, #348]	; (8005278 <HAL_GPIO_Init+0x2e8>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4a56      	ldr	r2, [pc, #344]	; (8005278 <HAL_GPIO_Init+0x2e8>)
 8005120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005124:	6453      	str	r3, [r2, #68]	; 0x44
 8005126:	4b54      	ldr	r3, [pc, #336]	; (8005278 <HAL_GPIO_Init+0x2e8>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005132:	4a52      	ldr	r2, [pc, #328]	; (800527c <HAL_GPIO_Init+0x2ec>)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	220f      	movs	r2, #15
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a49      	ldr	r2, [pc, #292]	; (8005280 <HAL_GPIO_Init+0x2f0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d019      	beq.n	8005192 <HAL_GPIO_Init+0x202>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a48      	ldr	r2, [pc, #288]	; (8005284 <HAL_GPIO_Init+0x2f4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_GPIO_Init+0x1fe>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a47      	ldr	r2, [pc, #284]	; (8005288 <HAL_GPIO_Init+0x2f8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00d      	beq.n	800518a <HAL_GPIO_Init+0x1fa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a46      	ldr	r2, [pc, #280]	; (800528c <HAL_GPIO_Init+0x2fc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <HAL_GPIO_Init+0x1f6>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a45      	ldr	r2, [pc, #276]	; (8005290 <HAL_GPIO_Init+0x300>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <HAL_GPIO_Init+0x1f2>
 800517e:	2304      	movs	r3, #4
 8005180:	e008      	b.n	8005194 <HAL_GPIO_Init+0x204>
 8005182:	2307      	movs	r3, #7
 8005184:	e006      	b.n	8005194 <HAL_GPIO_Init+0x204>
 8005186:	2303      	movs	r3, #3
 8005188:	e004      	b.n	8005194 <HAL_GPIO_Init+0x204>
 800518a:	2302      	movs	r3, #2
 800518c:	e002      	b.n	8005194 <HAL_GPIO_Init+0x204>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <HAL_GPIO_Init+0x204>
 8005192:	2300      	movs	r3, #0
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	f002 0203 	and.w	r2, r2, #3
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	4093      	lsls	r3, r2
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a4:	4935      	ldr	r1, [pc, #212]	; (800527c <HAL_GPIO_Init+0x2ec>)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	3302      	adds	r3, #2
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <HAL_GPIO_Init+0x304>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051d6:	4a2f      	ldr	r2, [pc, #188]	; (8005294 <HAL_GPIO_Init+0x304>)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <HAL_GPIO_Init+0x304>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005200:	4a24      	ldr	r2, [pc, #144]	; (8005294 <HAL_GPIO_Init+0x304>)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <HAL_GPIO_Init+0x304>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <HAL_GPIO_Init+0x304>)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005230:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_GPIO_Init+0x304>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005254:	4a0f      	ldr	r2, [pc, #60]	; (8005294 <HAL_GPIO_Init+0x304>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	f67f aea2 	bls.w	8004fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	40013800 	.word	0x40013800
 8005280:	40020000 	.word	0x40020000
 8005284:	40020400 	.word	0x40020400
 8005288:	40020800 	.word	0x40020800
 800528c:	40020c00 	.word	0x40020c00
 8005290:	40021000 	.word	0x40021000
 8005294:	40013c00 	.word	0x40013c00

08005298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
 80052a4:	4613      	mov	r3, r2
 80052a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a8:	787b      	ldrb	r3, [r7, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052b4:	e003      	b.n	80052be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052b6:	887b      	ldrh	r3, [r7, #2]
 80052b8:	041a      	lsls	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	619a      	str	r2, [r3, #24]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e264      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d075      	beq.n	80053d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ea:	4ba3      	ldr	r3, [pc, #652]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d00c      	beq.n	8005310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f6:	4ba0      	ldr	r3, [pc, #640]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d112      	bne.n	8005328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005302:	4b9d      	ldr	r3, [pc, #628]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800530e:	d10b      	bne.n	8005328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	4b99      	ldr	r3, [pc, #612]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05b      	beq.n	80053d4 <HAL_RCC_OscConfig+0x108>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d157      	bne.n	80053d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e23f      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005330:	d106      	bne.n	8005340 <HAL_RCC_OscConfig+0x74>
 8005332:	4b91      	ldr	r3, [pc, #580]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a90      	ldr	r2, [pc, #576]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x98>
 800534a:	4b8b      	ldr	r3, [pc, #556]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a8a      	ldr	r2, [pc, #552]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b88      	ldr	r3, [pc, #544]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a87      	ldr	r2, [pc, #540]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005364:	4b84      	ldr	r3, [pc, #528]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a83      	ldr	r2, [pc, #524]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b81      	ldr	r3, [pc, #516]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a80      	ldr	r2, [pc, #512]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7ff fd12 	bl	8004dac <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7ff fd0e 	bl	8004dac <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e204      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b76      	ldr	r3, [pc, #472]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xc0>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ac:	f7ff fcfe 	bl	8004dac <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b4:	f7ff fcfa 	bl	8004dac <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1f0      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c6:	4b6c      	ldr	r3, [pc, #432]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0xe8>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d063      	beq.n	80054aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053e2:	4b65      	ldr	r3, [pc, #404]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ee:	4b62      	ldr	r3, [pc, #392]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d11c      	bne.n	8005434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fa:	4b5f      	ldr	r3, [pc, #380]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d116      	bne.n	8005434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005406:	4b5c      	ldr	r3, [pc, #368]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_RCC_OscConfig+0x152>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d001      	beq.n	800541e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e1c4      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541e:	4b56      	ldr	r3, [pc, #344]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4952      	ldr	r1, [pc, #328]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005432:	e03a      	b.n	80054aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800543c:	4b4f      	ldr	r3, [pc, #316]	; (800557c <HAL_RCC_OscConfig+0x2b0>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005442:	f7ff fcb3 	bl	8004dac <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800544a:	f7ff fcaf 	bl	8004dac <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e1a5      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545c:	4b46      	ldr	r3, [pc, #280]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005468:	4b43      	ldr	r3, [pc, #268]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4940      	ldr	r1, [pc, #256]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]
 800547c:	e015      	b.n	80054aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547e:	4b3f      	ldr	r3, [pc, #252]	; (800557c <HAL_RCC_OscConfig+0x2b0>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7ff fc92 	bl	8004dac <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800548c:	f7ff fc8e 	bl	8004dac <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e184      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d030      	beq.n	8005518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054be:	4b30      	ldr	r3, [pc, #192]	; (8005580 <HAL_RCC_OscConfig+0x2b4>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c4:	f7ff fc72 	bl	8004dac <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054cc:	f7ff fc6e 	bl	8004dac <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e164      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054de:	4b26      	ldr	r3, [pc, #152]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x200>
 80054ea:	e015      	b.n	8005518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <HAL_RCC_OscConfig+0x2b4>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f2:	f7ff fc5b 	bl	8004dac <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054fa:	f7ff fc57 	bl	8004dac <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e14d      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800550c:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800550e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f0      	bne.n	80054fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80a0 	beq.w	8005666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552a:	4b13      	ldr	r3, [pc, #76]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10f      	bne.n	8005556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6413      	str	r3, [r2, #64]	; 0x40
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_OscConfig+0x2b8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d121      	bne.n	80055a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <HAL_RCC_OscConfig+0x2b8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a07      	ldr	r2, [pc, #28]	; (8005584 <HAL_RCC_OscConfig+0x2b8>)
 8005568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556e:	f7ff fc1d 	bl	8004dac <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005574:	e011      	b.n	800559a <HAL_RCC_OscConfig+0x2ce>
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800
 800557c:	42470000 	.word	0x42470000
 8005580:	42470e80 	.word	0x42470e80
 8005584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005588:	f7ff fc10 	bl	8004dac <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e106      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559a:	4b85      	ldr	r3, [pc, #532]	; (80057b0 <HAL_RCC_OscConfig+0x4e4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d106      	bne.n	80055bc <HAL_RCC_OscConfig+0x2f0>
 80055ae:	4b81      	ldr	r3, [pc, #516]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a80      	ldr	r2, [pc, #512]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ba:	e01c      	b.n	80055f6 <HAL_RCC_OscConfig+0x32a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b05      	cmp	r3, #5
 80055c2:	d10c      	bne.n	80055de <HAL_RCC_OscConfig+0x312>
 80055c4:	4b7b      	ldr	r3, [pc, #492]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a7a      	ldr	r2, [pc, #488]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055ca:	f043 0304 	orr.w	r3, r3, #4
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
 80055d0:	4b78      	ldr	r3, [pc, #480]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	4a77      	ldr	r2, [pc, #476]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	6713      	str	r3, [r2, #112]	; 0x70
 80055dc:	e00b      	b.n	80055f6 <HAL_RCC_OscConfig+0x32a>
 80055de:	4b75      	ldr	r3, [pc, #468]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	4a74      	ldr	r2, [pc, #464]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ea:	4b72      	ldr	r3, [pc, #456]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a71      	ldr	r2, [pc, #452]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d015      	beq.n	800562a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7ff fbd5 	bl	8004dac <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005604:	e00a      	b.n	800561c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7ff fbd1 	bl	8004dac <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f241 3288 	movw	r2, #5000	; 0x1388
 8005614:	4293      	cmp	r3, r2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e0c5      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	4b65      	ldr	r3, [pc, #404]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0ee      	beq.n	8005606 <HAL_RCC_OscConfig+0x33a>
 8005628:	e014      	b.n	8005654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562a:	f7ff fbbf 	bl	8004dac <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005630:	e00a      	b.n	8005648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7ff fbbb 	bl	8004dac <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0af      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005648:	4b5a      	ldr	r3, [pc, #360]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1ee      	bne.n	8005632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d105      	bne.n	8005666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565a:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	4a55      	ldr	r2, [pc, #340]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 8005660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 809b 	beq.w	80057a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005670:	4b50      	ldr	r3, [pc, #320]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 030c 	and.w	r3, r3, #12
 8005678:	2b08      	cmp	r3, #8
 800567a:	d05c      	beq.n	8005736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d141      	bne.n	8005708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005684:	4b4c      	ldr	r3, [pc, #304]	; (80057b8 <HAL_RCC_OscConfig+0x4ec>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568a:	f7ff fb8f 	bl	8004dac <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005692:	f7ff fb8b 	bl	8004dac <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e081      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a4:	4b43      	ldr	r3, [pc, #268]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	019b      	lsls	r3, r3, #6
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	3b01      	subs	r3, #1
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	061b      	lsls	r3, r3, #24
 80056d4:	4937      	ldr	r1, [pc, #220]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056da:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <HAL_RCC_OscConfig+0x4ec>)
 80056dc:	2201      	movs	r2, #1
 80056de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e0:	f7ff fb64 	bl	8004dac <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e8:	f7ff fb60 	bl	8004dac <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e056      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fa:	4b2e      	ldr	r3, [pc, #184]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x41c>
 8005706:	e04e      	b.n	80057a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005708:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <HAL_RCC_OscConfig+0x4ec>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570e:	f7ff fb4d 	bl	8004dac <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005716:	f7ff fb49 	bl	8004dac <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e03f      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005728:	4b22      	ldr	r3, [pc, #136]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f0      	bne.n	8005716 <HAL_RCC_OscConfig+0x44a>
 8005734:	e037      	b.n	80057a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e032      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <HAL_RCC_OscConfig+0x4e8>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d028      	beq.n	80057a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d121      	bne.n	80057a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005768:	429a      	cmp	r2, r3
 800576a:	d11a      	bne.n	80057a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005772:	4013      	ands	r3, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005778:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800577a:	4293      	cmp	r3, r2
 800577c:	d111      	bne.n	80057a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	3b01      	subs	r3, #1
 800578c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800578e:	429a      	cmp	r2, r3
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800579e:	429a      	cmp	r2, r3
 80057a0:	d001      	beq.n	80057a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40007000 	.word	0x40007000
 80057b4:	40023800 	.word	0x40023800
 80057b8:	42470060 	.word	0x42470060

080057bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0cc      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b68      	ldr	r3, [pc, #416]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d90c      	bls.n	80057f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b65      	ldr	r3, [pc, #404]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e6:	4b63      	ldr	r3, [pc, #396]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0b8      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d020      	beq.n	8005846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005810:	4b59      	ldr	r3, [pc, #356]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a58      	ldr	r2, [pc, #352]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800581a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005828:	4b53      	ldr	r3, [pc, #332]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	4a52      	ldr	r2, [pc, #328]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005834:	4b50      	ldr	r3, [pc, #320]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	494d      	ldr	r1, [pc, #308]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d044      	beq.n	80058dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d107      	bne.n	800586a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585a:	4b47      	ldr	r3, [pc, #284]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d119      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e07f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d003      	beq.n	800587a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005876:	2b03      	cmp	r3, #3
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	4b3f      	ldr	r3, [pc, #252]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e06f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588a:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e067      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f023 0203 	bic.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4934      	ldr	r1, [pc, #208]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058ac:	f7ff fa7e 	bl	8004dac <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	e00a      	b.n	80058ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b4:	f7ff fa7a 	bl	8004dac <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e04f      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 020c 	and.w	r2, r3, #12
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	429a      	cmp	r2, r3
 80058da:	d1eb      	bne.n	80058b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b25      	ldr	r3, [pc, #148]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d20c      	bcs.n	8005904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b22      	ldr	r3, [pc, #136]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f2:	4b20      	ldr	r3, [pc, #128]	; (8005974 <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e032      	b.n	800596a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4916      	ldr	r1, [pc, #88]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	490e      	ldr	r1, [pc, #56]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005942:	f000 f821 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8005946:	4602      	mov	r2, r0
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	490a      	ldr	r1, [pc, #40]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 8005954:	5ccb      	ldrb	r3, [r1, r3]
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff f9de 	bl	8004d24 <HAL_InitTick>

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40023c00 	.word	0x40023c00
 8005978:	40023800 	.word	0x40023800
 800597c:	080067d0 	.word	0x080067d0
 8005980:	20000000 	.word	0x20000000
 8005984:	20000004 	.word	0x20000004

08005988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800598e:	2100      	movs	r1, #0
 8005990:	6079      	str	r1, [r7, #4]
 8005992:	2100      	movs	r1, #0
 8005994:	60f9      	str	r1, [r7, #12]
 8005996:	2100      	movs	r1, #0
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800599a:	2100      	movs	r1, #0
 800599c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800599e:	4952      	ldr	r1, [pc, #328]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80059a0:	6889      	ldr	r1, [r1, #8]
 80059a2:	f001 010c 	and.w	r1, r1, #12
 80059a6:	2908      	cmp	r1, #8
 80059a8:	d00d      	beq.n	80059c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80059aa:	2908      	cmp	r1, #8
 80059ac:	f200 8094 	bhi.w	8005ad8 <HAL_RCC_GetSysClockFreq+0x150>
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d002      	beq.n	80059ba <HAL_RCC_GetSysClockFreq+0x32>
 80059b4:	2904      	cmp	r1, #4
 80059b6:	d003      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x38>
 80059b8:	e08e      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ba:	4b4c      	ldr	r3, [pc, #304]	; (8005aec <HAL_RCC_GetSysClockFreq+0x164>)
 80059bc:	60bb      	str	r3, [r7, #8]
       break;
 80059be:	e08e      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059c0:	4b4b      	ldr	r3, [pc, #300]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80059c2:	60bb      	str	r3, [r7, #8]
      break;
 80059c4:	e08b      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059c6:	4948      	ldr	r1, [pc, #288]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80059c8:	6849      	ldr	r1, [r1, #4]
 80059ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80059ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059d0:	4945      	ldr	r1, [pc, #276]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80059d2:	6849      	ldr	r1, [r1, #4]
 80059d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80059d8:	2900      	cmp	r1, #0
 80059da:	d024      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059dc:	4942      	ldr	r1, [pc, #264]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80059de:	6849      	ldr	r1, [r1, #4]
 80059e0:	0989      	lsrs	r1, r1, #6
 80059e2:	4608      	mov	r0, r1
 80059e4:	f04f 0100 	mov.w	r1, #0
 80059e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80059ec:	f04f 0500 	mov.w	r5, #0
 80059f0:	ea00 0204 	and.w	r2, r0, r4
 80059f4:	ea01 0305 	and.w	r3, r1, r5
 80059f8:	493d      	ldr	r1, [pc, #244]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80059fa:	fb01 f003 	mul.w	r0, r1, r3
 80059fe:	2100      	movs	r1, #0
 8005a00:	fb01 f102 	mul.w	r1, r1, r2
 8005a04:	1844      	adds	r4, r0, r1
 8005a06:	493a      	ldr	r1, [pc, #232]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a08:	fba2 0101 	umull	r0, r1, r2, r1
 8005a0c:	1863      	adds	r3, r4, r1
 8005a0e:	4619      	mov	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	f7fe fc3a 	bl	8004290 <__aeabi_uldivmod>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4613      	mov	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e04a      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	ea02 0400 	and.w	r4, r2, r0
 8005a3e:	ea03 0501 	and.w	r5, r3, r1
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	014b      	lsls	r3, r1, #5
 8005a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a54:	0142      	lsls	r2, r0, #5
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	1b00      	subs	r0, r0, r4
 8005a5c:	eb61 0105 	sbc.w	r1, r1, r5
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	018b      	lsls	r3, r1, #6
 8005a6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a6e:	0182      	lsls	r2, r0, #6
 8005a70:	1a12      	subs	r2, r2, r0
 8005a72:	eb63 0301 	sbc.w	r3, r3, r1
 8005a76:	f04f 0000 	mov.w	r0, #0
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	00d9      	lsls	r1, r3, #3
 8005a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a84:	00d0      	lsls	r0, r2, #3
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	1912      	adds	r2, r2, r4
 8005a8c:	eb45 0303 	adc.w	r3, r5, r3
 8005a90:	f04f 0000 	mov.w	r0, #0
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	0299      	lsls	r1, r3, #10
 8005a9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a9e:	0290      	lsls	r0, r2, #10
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	f7fe fbee 	bl	8004290 <__aeabi_uldivmod>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4613      	mov	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	60bb      	str	r3, [r7, #8]
      break;
 8005ad6:	e002      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <HAL_RCC_GetSysClockFreq+0x164>)
 8005ada:	60bb      	str	r3, [r7, #8]
      break;
 8005adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ade:	68bb      	ldr	r3, [r7, #8]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	00f42400 	.word	0x00f42400
 8005af0:	017d7840 	.word	0x017d7840

08005af4 <__errno>:
 8005af4:	4b01      	ldr	r3, [pc, #4]	; (8005afc <__errno+0x8>)
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	2000000c 	.word	0x2000000c

08005b00 <__libc_init_array>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	4d0d      	ldr	r5, [pc, #52]	; (8005b38 <__libc_init_array+0x38>)
 8005b04:	4c0d      	ldr	r4, [pc, #52]	; (8005b3c <__libc_init_array+0x3c>)
 8005b06:	1b64      	subs	r4, r4, r5
 8005b08:	10a4      	asrs	r4, r4, #2
 8005b0a:	2600      	movs	r6, #0
 8005b0c:	42a6      	cmp	r6, r4
 8005b0e:	d109      	bne.n	8005b24 <__libc_init_array+0x24>
 8005b10:	4d0b      	ldr	r5, [pc, #44]	; (8005b40 <__libc_init_array+0x40>)
 8005b12:	4c0c      	ldr	r4, [pc, #48]	; (8005b44 <__libc_init_array+0x44>)
 8005b14:	f000 fe00 	bl	8006718 <_init>
 8005b18:	1b64      	subs	r4, r4, r5
 8005b1a:	10a4      	asrs	r4, r4, #2
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	42a6      	cmp	r6, r4
 8005b20:	d105      	bne.n	8005b2e <__libc_init_array+0x2e>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b28:	4798      	blx	r3
 8005b2a:	3601      	adds	r6, #1
 8005b2c:	e7ee      	b.n	8005b0c <__libc_init_array+0xc>
 8005b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b32:	4798      	blx	r3
 8005b34:	3601      	adds	r6, #1
 8005b36:	e7f2      	b.n	8005b1e <__libc_init_array+0x1e>
 8005b38:	08006968 	.word	0x08006968
 8005b3c:	08006968 	.word	0x08006968
 8005b40:	08006968 	.word	0x08006968
 8005b44:	0800696c 	.word	0x0800696c

08005b48 <memset>:
 8005b48:	4402      	add	r2, r0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d100      	bne.n	8005b52 <memset+0xa>
 8005b50:	4770      	bx	lr
 8005b52:	f803 1b01 	strb.w	r1, [r3], #1
 8005b56:	e7f9      	b.n	8005b4c <memset+0x4>

08005b58 <siscanf>:
 8005b58:	b40e      	push	{r1, r2, r3}
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	b09f      	sub	sp, #124	; 0x7c
 8005b5e:	ac21      	add	r4, sp, #132	; 0x84
 8005b60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005b64:	f854 2b04 	ldr.w	r2, [r4], #4
 8005b68:	9201      	str	r2, [sp, #4]
 8005b6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005b6e:	9004      	str	r0, [sp, #16]
 8005b70:	9008      	str	r0, [sp, #32]
 8005b72:	f7fe fb35 	bl	80041e0 <strlen>
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <siscanf+0x50>)
 8005b78:	9005      	str	r0, [sp, #20]
 8005b7a:	9009      	str	r0, [sp, #36]	; 0x24
 8005b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005b7e:	480b      	ldr	r0, [pc, #44]	; (8005bac <siscanf+0x54>)
 8005b80:	9a01      	ldr	r2, [sp, #4]
 8005b82:	6800      	ldr	r0, [r0, #0]
 8005b84:	9403      	str	r4, [sp, #12]
 8005b86:	2300      	movs	r3, #0
 8005b88:	9311      	str	r3, [sp, #68]	; 0x44
 8005b8a:	9316      	str	r3, [sp, #88]	; 0x58
 8005b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005b94:	a904      	add	r1, sp, #16
 8005b96:	4623      	mov	r3, r4
 8005b98:	f000 f87e 	bl	8005c98 <__ssvfiscanf_r>
 8005b9c:	b01f      	add	sp, #124	; 0x7c
 8005b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba2:	b003      	add	sp, #12
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	08005bb1 	.word	0x08005bb1
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <__seofread>:
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	4770      	bx	lr

08005bb4 <strstr>:
 8005bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb6:	780c      	ldrb	r4, [r1, #0]
 8005bb8:	b164      	cbz	r4, 8005bd4 <strstr+0x20>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	1c5e      	adds	r6, r3, #1
 8005bc2:	b90a      	cbnz	r2, 8005bc8 <strstr+0x14>
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	e005      	b.n	8005bd4 <strstr+0x20>
 8005bc8:	4294      	cmp	r4, r2
 8005bca:	d108      	bne.n	8005bde <strstr+0x2a>
 8005bcc:	460d      	mov	r5, r1
 8005bce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005bd2:	b902      	cbnz	r2, 8005bd6 <strstr+0x22>
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005bda:	4297      	cmp	r7, r2
 8005bdc:	d0f7      	beq.n	8005bce <strstr+0x1a>
 8005bde:	4633      	mov	r3, r6
 8005be0:	e7ec      	b.n	8005bbc <strstr+0x8>

08005be2 <_sungetc_r>:
 8005be2:	b538      	push	{r3, r4, r5, lr}
 8005be4:	1c4b      	adds	r3, r1, #1
 8005be6:	4614      	mov	r4, r2
 8005be8:	d103      	bne.n	8005bf2 <_sungetc_r+0x10>
 8005bea:	f04f 35ff 	mov.w	r5, #4294967295
 8005bee:	4628      	mov	r0, r5
 8005bf0:	bd38      	pop	{r3, r4, r5, pc}
 8005bf2:	8993      	ldrh	r3, [r2, #12]
 8005bf4:	f023 0320 	bic.w	r3, r3, #32
 8005bf8:	8193      	strh	r3, [r2, #12]
 8005bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bfc:	6852      	ldr	r2, [r2, #4]
 8005bfe:	b2cd      	uxtb	r5, r1
 8005c00:	b18b      	cbz	r3, 8005c26 <_sungetc_r+0x44>
 8005c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c04:	4293      	cmp	r3, r2
 8005c06:	dd08      	ble.n	8005c1a <_sungetc_r+0x38>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	1e5a      	subs	r2, r3, #1
 8005c0c:	6022      	str	r2, [r4, #0]
 8005c0e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	3301      	adds	r3, #1
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	e7e9      	b.n	8005bee <_sungetc_r+0xc>
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f000 fc3e 	bl	800649c <__submore>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d0f1      	beq.n	8005c08 <_sungetc_r+0x26>
 8005c24:	e7e1      	b.n	8005bea <_sungetc_r+0x8>
 8005c26:	6921      	ldr	r1, [r4, #16]
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	b151      	cbz	r1, 8005c42 <_sungetc_r+0x60>
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	d208      	bcs.n	8005c42 <_sungetc_r+0x60>
 8005c30:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005c34:	42a9      	cmp	r1, r5
 8005c36:	d104      	bne.n	8005c42 <_sungetc_r+0x60>
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	3201      	adds	r2, #1
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	6062      	str	r2, [r4, #4]
 8005c40:	e7d5      	b.n	8005bee <_sungetc_r+0xc>
 8005c42:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005c46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c4a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c50:	4623      	mov	r3, r4
 8005c52:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e7dc      	b.n	8005c16 <_sungetc_r+0x34>

08005c5c <__ssrefill_r>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	460c      	mov	r4, r1
 8005c60:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005c62:	b169      	cbz	r1, 8005c80 <__ssrefill_r+0x24>
 8005c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d001      	beq.n	8005c70 <__ssrefill_r+0x14>
 8005c6c:	f000 fc60 	bl	8006530 <_free_r>
 8005c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c72:	6063      	str	r3, [r4, #4]
 8005c74:	2000      	movs	r0, #0
 8005c76:	6360      	str	r0, [r4, #52]	; 0x34
 8005c78:	b113      	cbz	r3, 8005c80 <__ssrefill_r+0x24>
 8005c7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd10      	pop	{r4, pc}
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	2300      	movs	r3, #0
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f043 0320 	orr.w	r3, r3, #32
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e7f3      	b.n	8005c7e <__ssrefill_r+0x22>
	...

08005c98 <__ssvfiscanf_r>:
 8005c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005ca8:	49b2      	ldr	r1, [pc, #712]	; (8005f74 <__ssvfiscanf_r+0x2dc>)
 8005caa:	91a0      	str	r1, [sp, #640]	; 0x280
 8005cac:	f10d 0804 	add.w	r8, sp, #4
 8005cb0:	49b1      	ldr	r1, [pc, #708]	; (8005f78 <__ssvfiscanf_r+0x2e0>)
 8005cb2:	4fb2      	ldr	r7, [pc, #712]	; (8005f7c <__ssvfiscanf_r+0x2e4>)
 8005cb4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8005f80 <__ssvfiscanf_r+0x2e8>
 8005cb8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	91a1      	str	r1, [sp, #644]	; 0x284
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	f892 a000 	ldrb.w	sl, [r2]
 8005cc6:	f1ba 0f00 	cmp.w	sl, #0
 8005cca:	f000 8151 	beq.w	8005f70 <__ssvfiscanf_r+0x2d8>
 8005cce:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005cd2:	f013 0308 	ands.w	r3, r3, #8
 8005cd6:	f102 0501 	add.w	r5, r2, #1
 8005cda:	d019      	beq.n	8005d10 <__ssvfiscanf_r+0x78>
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	dd0f      	ble.n	8005d02 <__ssvfiscanf_r+0x6a>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	5cba      	ldrb	r2, [r7, r2]
 8005ce8:	0712      	lsls	r2, r2, #28
 8005cea:	d401      	bmi.n	8005cf0 <__ssvfiscanf_r+0x58>
 8005cec:	462a      	mov	r2, r5
 8005cee:	e7e8      	b.n	8005cc2 <__ssvfiscanf_r+0x2a>
 8005cf0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005cf2:	3201      	adds	r2, #1
 8005cf4:	9245      	str	r2, [sp, #276]	; 0x114
 8005cf6:	6862      	ldr	r2, [r4, #4]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	3a01      	subs	r2, #1
 8005cfc:	6062      	str	r2, [r4, #4]
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	e7ec      	b.n	8005cdc <__ssvfiscanf_r+0x44>
 8005d02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d04:	4621      	mov	r1, r4
 8005d06:	4630      	mov	r0, r6
 8005d08:	4798      	blx	r3
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d0e9      	beq.n	8005ce2 <__ssvfiscanf_r+0x4a>
 8005d0e:	e7ed      	b.n	8005cec <__ssvfiscanf_r+0x54>
 8005d10:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8005d14:	f040 8083 	bne.w	8005e1e <__ssvfiscanf_r+0x186>
 8005d18:	9341      	str	r3, [sp, #260]	; 0x104
 8005d1a:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d1c:	7853      	ldrb	r3, [r2, #1]
 8005d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d20:	bf02      	ittt	eq
 8005d22:	2310      	moveq	r3, #16
 8005d24:	1c95      	addeq	r5, r2, #2
 8005d26:	9341      	streq	r3, [sp, #260]	; 0x104
 8005d28:	220a      	movs	r2, #10
 8005d2a:	46ab      	mov	fp, r5
 8005d2c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8005d30:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005d34:	2b09      	cmp	r3, #9
 8005d36:	d91d      	bls.n	8005d74 <__ssvfiscanf_r+0xdc>
 8005d38:	4891      	ldr	r0, [pc, #580]	; (8005f80 <__ssvfiscanf_r+0x2e8>)
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	f7fe fa58 	bl	80041f0 <memchr>
 8005d40:	b140      	cbz	r0, 8005d54 <__ssvfiscanf_r+0xbc>
 8005d42:	2301      	movs	r3, #1
 8005d44:	eba0 0009 	sub.w	r0, r0, r9
 8005d48:	fa03 f000 	lsl.w	r0, r3, r0
 8005d4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d4e:	4318      	orrs	r0, r3
 8005d50:	9041      	str	r0, [sp, #260]	; 0x104
 8005d52:	465d      	mov	r5, fp
 8005d54:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d58:	2b78      	cmp	r3, #120	; 0x78
 8005d5a:	d806      	bhi.n	8005d6a <__ssvfiscanf_r+0xd2>
 8005d5c:	2b57      	cmp	r3, #87	; 0x57
 8005d5e:	d810      	bhi.n	8005d82 <__ssvfiscanf_r+0xea>
 8005d60:	2b25      	cmp	r3, #37	; 0x25
 8005d62:	d05c      	beq.n	8005e1e <__ssvfiscanf_r+0x186>
 8005d64:	d856      	bhi.n	8005e14 <__ssvfiscanf_r+0x17c>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d074      	beq.n	8005e54 <__ssvfiscanf_r+0x1bc>
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	9347      	str	r3, [sp, #284]	; 0x11c
 8005d6e:	230a      	movs	r3, #10
 8005d70:	9342      	str	r3, [sp, #264]	; 0x108
 8005d72:	e081      	b.n	8005e78 <__ssvfiscanf_r+0x1e0>
 8005d74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005d76:	fb02 1303 	mla	r3, r2, r3, r1
 8005d7a:	3b30      	subs	r3, #48	; 0x30
 8005d7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d7e:	465d      	mov	r5, fp
 8005d80:	e7d3      	b.n	8005d2a <__ssvfiscanf_r+0x92>
 8005d82:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005d86:	2a20      	cmp	r2, #32
 8005d88:	d8ef      	bhi.n	8005d6a <__ssvfiscanf_r+0xd2>
 8005d8a:	a101      	add	r1, pc, #4	; (adr r1, 8005d90 <__ssvfiscanf_r+0xf8>)
 8005d8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d90:	08005e63 	.word	0x08005e63
 8005d94:	08005d6b 	.word	0x08005d6b
 8005d98:	08005d6b 	.word	0x08005d6b
 8005d9c:	08005ec1 	.word	0x08005ec1
 8005da0:	08005d6b 	.word	0x08005d6b
 8005da4:	08005d6b 	.word	0x08005d6b
 8005da8:	08005d6b 	.word	0x08005d6b
 8005dac:	08005d6b 	.word	0x08005d6b
 8005db0:	08005d6b 	.word	0x08005d6b
 8005db4:	08005d6b 	.word	0x08005d6b
 8005db8:	08005d6b 	.word	0x08005d6b
 8005dbc:	08005ed7 	.word	0x08005ed7
 8005dc0:	08005ead 	.word	0x08005ead
 8005dc4:	08005e1b 	.word	0x08005e1b
 8005dc8:	08005e1b 	.word	0x08005e1b
 8005dcc:	08005e1b 	.word	0x08005e1b
 8005dd0:	08005d6b 	.word	0x08005d6b
 8005dd4:	08005eb1 	.word	0x08005eb1
 8005dd8:	08005d6b 	.word	0x08005d6b
 8005ddc:	08005d6b 	.word	0x08005d6b
 8005de0:	08005d6b 	.word	0x08005d6b
 8005de4:	08005d6b 	.word	0x08005d6b
 8005de8:	08005ee7 	.word	0x08005ee7
 8005dec:	08005eb9 	.word	0x08005eb9
 8005df0:	08005e5b 	.word	0x08005e5b
 8005df4:	08005d6b 	.word	0x08005d6b
 8005df8:	08005d6b 	.word	0x08005d6b
 8005dfc:	08005ee3 	.word	0x08005ee3
 8005e00:	08005d6b 	.word	0x08005d6b
 8005e04:	08005ead 	.word	0x08005ead
 8005e08:	08005d6b 	.word	0x08005d6b
 8005e0c:	08005d6b 	.word	0x08005d6b
 8005e10:	08005e63 	.word	0x08005e63
 8005e14:	3b45      	subs	r3, #69	; 0x45
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d8a7      	bhi.n	8005d6a <__ssvfiscanf_r+0xd2>
 8005e1a:	2305      	movs	r3, #5
 8005e1c:	e02b      	b.n	8005e76 <__ssvfiscanf_r+0x1de>
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dd0d      	ble.n	8005e40 <__ssvfiscanf_r+0x1a8>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	4552      	cmp	r2, sl
 8005e2a:	f040 80a1 	bne.w	8005f70 <__ssvfiscanf_r+0x2d8>
 8005e2e:	3301      	adds	r3, #1
 8005e30:	6862      	ldr	r2, [r4, #4]
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005e36:	3a01      	subs	r2, #1
 8005e38:	3301      	adds	r3, #1
 8005e3a:	6062      	str	r2, [r4, #4]
 8005e3c:	9345      	str	r3, [sp, #276]	; 0x114
 8005e3e:	e755      	b.n	8005cec <__ssvfiscanf_r+0x54>
 8005e40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005e42:	4621      	mov	r1, r4
 8005e44:	4630      	mov	r0, r6
 8005e46:	4798      	blx	r3
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d0eb      	beq.n	8005e24 <__ssvfiscanf_r+0x18c>
 8005e4c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f040 8084 	bne.w	8005f5c <__ssvfiscanf_r+0x2c4>
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	e086      	b.n	8005f68 <__ssvfiscanf_r+0x2d0>
 8005e5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e5c:	f042 0220 	orr.w	r2, r2, #32
 8005e60:	9241      	str	r2, [sp, #260]	; 0x104
 8005e62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e68:	9241      	str	r2, [sp, #260]	; 0x104
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	2b6f      	cmp	r3, #111	; 0x6f
 8005e6e:	9242      	str	r2, [sp, #264]	; 0x108
 8005e70:	bf34      	ite	cc
 8005e72:	2303      	movcc	r3, #3
 8005e74:	2304      	movcs	r3, #4
 8005e76:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	dd41      	ble.n	8005f02 <__ssvfiscanf_r+0x26a>
 8005e7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005e80:	0659      	lsls	r1, r3, #25
 8005e82:	d404      	bmi.n	8005e8e <__ssvfiscanf_r+0x1f6>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	5cba      	ldrb	r2, [r7, r2]
 8005e8a:	0712      	lsls	r2, r2, #28
 8005e8c:	d440      	bmi.n	8005f10 <__ssvfiscanf_r+0x278>
 8005e8e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	dc4f      	bgt.n	8005f34 <__ssvfiscanf_r+0x29c>
 8005e94:	466b      	mov	r3, sp
 8005e96:	4622      	mov	r2, r4
 8005e98:	a941      	add	r1, sp, #260	; 0x104
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f000 f874 	bl	8005f88 <_scanf_chars>
 8005ea0:	2801      	cmp	r0, #1
 8005ea2:	d065      	beq.n	8005f70 <__ssvfiscanf_r+0x2d8>
 8005ea4:	2802      	cmp	r0, #2
 8005ea6:	f47f af21 	bne.w	8005cec <__ssvfiscanf_r+0x54>
 8005eaa:	e7cf      	b.n	8005e4c <__ssvfiscanf_r+0x1b4>
 8005eac:	220a      	movs	r2, #10
 8005eae:	e7dd      	b.n	8005e6c <__ssvfiscanf_r+0x1d4>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9342      	str	r3, [sp, #264]	; 0x108
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e7de      	b.n	8005e76 <__ssvfiscanf_r+0x1de>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	9342      	str	r3, [sp, #264]	; 0x108
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	e7da      	b.n	8005e76 <__ssvfiscanf_r+0x1de>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f000 f9ac 	bl	8006220 <__sccl>
 8005ec8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ece:	9341      	str	r3, [sp, #260]	; 0x104
 8005ed0:	4605      	mov	r5, r0
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e7cf      	b.n	8005e76 <__ssvfiscanf_r+0x1de>
 8005ed6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005edc:	9341      	str	r3, [sp, #260]	; 0x104
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e7c9      	b.n	8005e76 <__ssvfiscanf_r+0x1de>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e7c7      	b.n	8005e76 <__ssvfiscanf_r+0x1de>
 8005ee6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005ee8:	06c3      	lsls	r3, r0, #27
 8005eea:	f53f aeff 	bmi.w	8005cec <__ssvfiscanf_r+0x54>
 8005eee:	9b00      	ldr	r3, [sp, #0]
 8005ef0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005ef2:	1d19      	adds	r1, r3, #4
 8005ef4:	9100      	str	r1, [sp, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	07c0      	lsls	r0, r0, #31
 8005efa:	bf4c      	ite	mi
 8005efc:	801a      	strhmi	r2, [r3, #0]
 8005efe:	601a      	strpl	r2, [r3, #0]
 8005f00:	e6f4      	b.n	8005cec <__ssvfiscanf_r+0x54>
 8005f02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f04:	4621      	mov	r1, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	4798      	blx	r3
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d0b7      	beq.n	8005e7e <__ssvfiscanf_r+0x1e6>
 8005f0e:	e79d      	b.n	8005e4c <__ssvfiscanf_r+0x1b4>
 8005f10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005f12:	3201      	adds	r2, #1
 8005f14:	9245      	str	r2, [sp, #276]	; 0x114
 8005f16:	6862      	ldr	r2, [r4, #4]
 8005f18:	3a01      	subs	r2, #1
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	6062      	str	r2, [r4, #4]
 8005f1e:	dd02      	ble.n	8005f26 <__ssvfiscanf_r+0x28e>
 8005f20:	3301      	adds	r3, #1
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	e7ae      	b.n	8005e84 <__ssvfiscanf_r+0x1ec>
 8005f26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	4798      	blx	r3
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d0a8      	beq.n	8005e84 <__ssvfiscanf_r+0x1ec>
 8005f32:	e78b      	b.n	8005e4c <__ssvfiscanf_r+0x1b4>
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	dc06      	bgt.n	8005f46 <__ssvfiscanf_r+0x2ae>
 8005f38:	466b      	mov	r3, sp
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	a941      	add	r1, sp, #260	; 0x104
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f000 f87a 	bl	8006038 <_scanf_i>
 8005f44:	e7ac      	b.n	8005ea0 <__ssvfiscanf_r+0x208>
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <__ssvfiscanf_r+0x2ec>)
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f43f aecf 	beq.w	8005cec <__ssvfiscanf_r+0x54>
 8005f4e:	466b      	mov	r3, sp
 8005f50:	4622      	mov	r2, r4
 8005f52:	a941      	add	r1, sp, #260	; 0x104
 8005f54:	4630      	mov	r0, r6
 8005f56:	f3af 8000 	nop.w
 8005f5a:	e7a1      	b.n	8005ea0 <__ssvfiscanf_r+0x208>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f62:	bf18      	it	ne
 8005f64:	f04f 30ff 	movne.w	r0, #4294967295
 8005f68:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f70:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005f72:	e7f9      	b.n	8005f68 <__ssvfiscanf_r+0x2d0>
 8005f74:	08005be3 	.word	0x08005be3
 8005f78:	08005c5d 	.word	0x08005c5d
 8005f7c:	08006800 	.word	0x08006800
 8005f80:	080067e0 	.word	0x080067e0
 8005f84:	00000000 	.word	0x00000000

08005f88 <_scanf_chars>:
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	688a      	ldr	r2, [r1, #8]
 8005f90:	4680      	mov	r8, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b932      	cbnz	r2, 8005fa4 <_scanf_chars+0x1c>
 8005f96:	698a      	ldr	r2, [r1, #24]
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	bf0c      	ite	eq
 8005f9c:	2201      	moveq	r2, #1
 8005f9e:	f04f 32ff 	movne.w	r2, #4294967295
 8005fa2:	608a      	str	r2, [r1, #8]
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006034 <_scanf_chars+0xac>
 8005faa:	06d1      	lsls	r1, r2, #27
 8005fac:	bf5f      	itttt	pl
 8005fae:	681a      	ldrpl	r2, [r3, #0]
 8005fb0:	1d11      	addpl	r1, r2, #4
 8005fb2:	6019      	strpl	r1, [r3, #0]
 8005fb4:	6816      	ldrpl	r6, [r2, #0]
 8005fb6:	2700      	movs	r7, #0
 8005fb8:	69a0      	ldr	r0, [r4, #24]
 8005fba:	b188      	cbz	r0, 8005fe0 <_scanf_chars+0x58>
 8005fbc:	2801      	cmp	r0, #1
 8005fbe:	d107      	bne.n	8005fd0 <_scanf_chars+0x48>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	6963      	ldr	r3, [r4, #20]
 8005fc6:	5c9b      	ldrb	r3, [r3, r2]
 8005fc8:	b953      	cbnz	r3, 8005fe0 <_scanf_chars+0x58>
 8005fca:	bb27      	cbnz	r7, 8006016 <_scanf_chars+0x8e>
 8005fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd0:	2802      	cmp	r0, #2
 8005fd2:	d120      	bne.n	8006016 <_scanf_chars+0x8e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005fdc:	071b      	lsls	r3, r3, #28
 8005fde:	d41a      	bmi.n	8006016 <_scanf_chars+0x8e>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	06da      	lsls	r2, r3, #27
 8005fe4:	bf5e      	ittt	pl
 8005fe6:	682b      	ldrpl	r3, [r5, #0]
 8005fe8:	781b      	ldrbpl	r3, [r3, #0]
 8005fea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005fee:	682a      	ldr	r2, [r5, #0]
 8005ff0:	686b      	ldr	r3, [r5, #4]
 8005ff2:	3201      	adds	r2, #1
 8005ff4:	602a      	str	r2, [r5, #0]
 8005ff6:	68a2      	ldr	r2, [r4, #8]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	606b      	str	r3, [r5, #4]
 8005ffe:	3701      	adds	r7, #1
 8006000:	60a2      	str	r2, [r4, #8]
 8006002:	b142      	cbz	r2, 8006016 <_scanf_chars+0x8e>
 8006004:	2b00      	cmp	r3, #0
 8006006:	dcd7      	bgt.n	8005fb8 <_scanf_chars+0x30>
 8006008:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800600c:	4629      	mov	r1, r5
 800600e:	4640      	mov	r0, r8
 8006010:	4798      	blx	r3
 8006012:	2800      	cmp	r0, #0
 8006014:	d0d0      	beq.n	8005fb8 <_scanf_chars+0x30>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f013 0310 	ands.w	r3, r3, #16
 800601c:	d105      	bne.n	800602a <_scanf_chars+0xa2>
 800601e:	68e2      	ldr	r2, [r4, #12]
 8006020:	3201      	adds	r2, #1
 8006022:	60e2      	str	r2, [r4, #12]
 8006024:	69a2      	ldr	r2, [r4, #24]
 8006026:	b102      	cbz	r2, 800602a <_scanf_chars+0xa2>
 8006028:	7033      	strb	r3, [r6, #0]
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	441f      	add	r7, r3
 800602e:	6127      	str	r7, [r4, #16]
 8006030:	2000      	movs	r0, #0
 8006032:	e7cb      	b.n	8005fcc <_scanf_chars+0x44>
 8006034:	08006800 	.word	0x08006800

08006038 <_scanf_i>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	4698      	mov	r8, r3
 800603e:	4b74      	ldr	r3, [pc, #464]	; (8006210 <_scanf_i+0x1d8>)
 8006040:	460c      	mov	r4, r1
 8006042:	4682      	mov	sl, r0
 8006044:	4616      	mov	r6, r2
 8006046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800604a:	b087      	sub	sp, #28
 800604c:	ab03      	add	r3, sp, #12
 800604e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006052:	4b70      	ldr	r3, [pc, #448]	; (8006214 <_scanf_i+0x1dc>)
 8006054:	69a1      	ldr	r1, [r4, #24]
 8006056:	4a70      	ldr	r2, [pc, #448]	; (8006218 <_scanf_i+0x1e0>)
 8006058:	2903      	cmp	r1, #3
 800605a:	bf18      	it	ne
 800605c:	461a      	movne	r2, r3
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	9201      	str	r2, [sp, #4]
 8006062:	1e5a      	subs	r2, r3, #1
 8006064:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006068:	bf88      	it	hi
 800606a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800606e:	4627      	mov	r7, r4
 8006070:	bf82      	ittt	hi
 8006072:	eb03 0905 	addhi.w	r9, r3, r5
 8006076:	f240 135d 	movwhi	r3, #349	; 0x15d
 800607a:	60a3      	strhi	r3, [r4, #8]
 800607c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006080:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006084:	bf98      	it	ls
 8006086:	f04f 0900 	movls.w	r9, #0
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	463d      	mov	r5, r7
 800608e:	f04f 0b00 	mov.w	fp, #0
 8006092:	6831      	ldr	r1, [r6, #0]
 8006094:	ab03      	add	r3, sp, #12
 8006096:	7809      	ldrb	r1, [r1, #0]
 8006098:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800609c:	2202      	movs	r2, #2
 800609e:	f7fe f8a7 	bl	80041f0 <memchr>
 80060a2:	b328      	cbz	r0, 80060f0 <_scanf_i+0xb8>
 80060a4:	f1bb 0f01 	cmp.w	fp, #1
 80060a8:	d159      	bne.n	800615e <_scanf_i+0x126>
 80060aa:	6862      	ldr	r2, [r4, #4]
 80060ac:	b92a      	cbnz	r2, 80060ba <_scanf_i+0x82>
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	2308      	movs	r3, #8
 80060b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b6:	6063      	str	r3, [r4, #4]
 80060b8:	6022      	str	r2, [r4, #0]
 80060ba:	6822      	ldr	r2, [r4, #0]
 80060bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80060c0:	6022      	str	r2, [r4, #0]
 80060c2:	68a2      	ldr	r2, [r4, #8]
 80060c4:	1e51      	subs	r1, r2, #1
 80060c6:	60a1      	str	r1, [r4, #8]
 80060c8:	b192      	cbz	r2, 80060f0 <_scanf_i+0xb8>
 80060ca:	6832      	ldr	r2, [r6, #0]
 80060cc:	1c51      	adds	r1, r2, #1
 80060ce:	6031      	str	r1, [r6, #0]
 80060d0:	7812      	ldrb	r2, [r2, #0]
 80060d2:	f805 2b01 	strb.w	r2, [r5], #1
 80060d6:	6872      	ldr	r2, [r6, #4]
 80060d8:	3a01      	subs	r2, #1
 80060da:	2a00      	cmp	r2, #0
 80060dc:	6072      	str	r2, [r6, #4]
 80060de:	dc07      	bgt.n	80060f0 <_scanf_i+0xb8>
 80060e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80060e4:	4631      	mov	r1, r6
 80060e6:	4650      	mov	r0, sl
 80060e8:	4790      	blx	r2
 80060ea:	2800      	cmp	r0, #0
 80060ec:	f040 8085 	bne.w	80061fa <_scanf_i+0x1c2>
 80060f0:	f10b 0b01 	add.w	fp, fp, #1
 80060f4:	f1bb 0f03 	cmp.w	fp, #3
 80060f8:	d1cb      	bne.n	8006092 <_scanf_i+0x5a>
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	b90b      	cbnz	r3, 8006102 <_scanf_i+0xca>
 80060fe:	230a      	movs	r3, #10
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	6863      	ldr	r3, [r4, #4]
 8006104:	4945      	ldr	r1, [pc, #276]	; (800621c <_scanf_i+0x1e4>)
 8006106:	6960      	ldr	r0, [r4, #20]
 8006108:	1ac9      	subs	r1, r1, r3
 800610a:	f000 f889 	bl	8006220 <__sccl>
 800610e:	f04f 0b00 	mov.w	fp, #0
 8006112:	68a3      	ldr	r3, [r4, #8]
 8006114:	6822      	ldr	r2, [r4, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d03d      	beq.n	8006196 <_scanf_i+0x15e>
 800611a:	6831      	ldr	r1, [r6, #0]
 800611c:	6960      	ldr	r0, [r4, #20]
 800611e:	f891 c000 	ldrb.w	ip, [r1]
 8006122:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006126:	2800      	cmp	r0, #0
 8006128:	d035      	beq.n	8006196 <_scanf_i+0x15e>
 800612a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800612e:	d124      	bne.n	800617a <_scanf_i+0x142>
 8006130:	0510      	lsls	r0, r2, #20
 8006132:	d522      	bpl.n	800617a <_scanf_i+0x142>
 8006134:	f10b 0b01 	add.w	fp, fp, #1
 8006138:	f1b9 0f00 	cmp.w	r9, #0
 800613c:	d003      	beq.n	8006146 <_scanf_i+0x10e>
 800613e:	3301      	adds	r3, #1
 8006140:	f109 39ff 	add.w	r9, r9, #4294967295
 8006144:	60a3      	str	r3, [r4, #8]
 8006146:	6873      	ldr	r3, [r6, #4]
 8006148:	3b01      	subs	r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	6073      	str	r3, [r6, #4]
 800614e:	dd1b      	ble.n	8006188 <_scanf_i+0x150>
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	6033      	str	r3, [r6, #0]
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	3b01      	subs	r3, #1
 800615a:	60a3      	str	r3, [r4, #8]
 800615c:	e7d9      	b.n	8006112 <_scanf_i+0xda>
 800615e:	f1bb 0f02 	cmp.w	fp, #2
 8006162:	d1ae      	bne.n	80060c2 <_scanf_i+0x8a>
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800616a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800616e:	d1bf      	bne.n	80060f0 <_scanf_i+0xb8>
 8006170:	2310      	movs	r3, #16
 8006172:	6063      	str	r3, [r4, #4]
 8006174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006178:	e7a2      	b.n	80060c0 <_scanf_i+0x88>
 800617a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	780b      	ldrb	r3, [r1, #0]
 8006182:	f805 3b01 	strb.w	r3, [r5], #1
 8006186:	e7de      	b.n	8006146 <_scanf_i+0x10e>
 8006188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800618c:	4631      	mov	r1, r6
 800618e:	4650      	mov	r0, sl
 8006190:	4798      	blx	r3
 8006192:	2800      	cmp	r0, #0
 8006194:	d0df      	beq.n	8006156 <_scanf_i+0x11e>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	05d9      	lsls	r1, r3, #23
 800619a:	d50d      	bpl.n	80061b8 <_scanf_i+0x180>
 800619c:	42bd      	cmp	r5, r7
 800619e:	d909      	bls.n	80061b4 <_scanf_i+0x17c>
 80061a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80061a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061a8:	4632      	mov	r2, r6
 80061aa:	4650      	mov	r0, sl
 80061ac:	4798      	blx	r3
 80061ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80061b2:	464d      	mov	r5, r9
 80061b4:	42bd      	cmp	r5, r7
 80061b6:	d028      	beq.n	800620a <_scanf_i+0x1d2>
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	f012 0210 	ands.w	r2, r2, #16
 80061be:	d113      	bne.n	80061e8 <_scanf_i+0x1b0>
 80061c0:	702a      	strb	r2, [r5, #0]
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	9e01      	ldr	r6, [sp, #4]
 80061c6:	4639      	mov	r1, r7
 80061c8:	4650      	mov	r0, sl
 80061ca:	47b0      	blx	r6
 80061cc:	f8d8 3000 	ldr.w	r3, [r8]
 80061d0:	6821      	ldr	r1, [r4, #0]
 80061d2:	1d1a      	adds	r2, r3, #4
 80061d4:	f8c8 2000 	str.w	r2, [r8]
 80061d8:	f011 0f20 	tst.w	r1, #32
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	d00f      	beq.n	8006200 <_scanf_i+0x1c8>
 80061e0:	6018      	str	r0, [r3, #0]
 80061e2:	68e3      	ldr	r3, [r4, #12]
 80061e4:	3301      	adds	r3, #1
 80061e6:	60e3      	str	r3, [r4, #12]
 80061e8:	1bed      	subs	r5, r5, r7
 80061ea:	44ab      	add	fp, r5
 80061ec:	6925      	ldr	r5, [r4, #16]
 80061ee:	445d      	add	r5, fp
 80061f0:	6125      	str	r5, [r4, #16]
 80061f2:	2000      	movs	r0, #0
 80061f4:	b007      	add	sp, #28
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	f04f 0b00 	mov.w	fp, #0
 80061fe:	e7ca      	b.n	8006196 <_scanf_i+0x15e>
 8006200:	07ca      	lsls	r2, r1, #31
 8006202:	bf4c      	ite	mi
 8006204:	8018      	strhmi	r0, [r3, #0]
 8006206:	6018      	strpl	r0, [r3, #0]
 8006208:	e7eb      	b.n	80061e2 <_scanf_i+0x1aa>
 800620a:	2001      	movs	r0, #1
 800620c:	e7f2      	b.n	80061f4 <_scanf_i+0x1bc>
 800620e:	bf00      	nop
 8006210:	080067c4 	.word	0x080067c4
 8006214:	08006499 	.word	0x08006499
 8006218:	0800639d 	.word	0x0800639d
 800621c:	080067fd 	.word	0x080067fd

08006220 <__sccl>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	780b      	ldrb	r3, [r1, #0]
 8006224:	4604      	mov	r4, r0
 8006226:	2b5e      	cmp	r3, #94	; 0x5e
 8006228:	bf0b      	itete	eq
 800622a:	784b      	ldrbeq	r3, [r1, #1]
 800622c:	1c48      	addne	r0, r1, #1
 800622e:	1c88      	addeq	r0, r1, #2
 8006230:	2200      	movne	r2, #0
 8006232:	bf08      	it	eq
 8006234:	2201      	moveq	r2, #1
 8006236:	1e61      	subs	r1, r4, #1
 8006238:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800623c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006240:	42a9      	cmp	r1, r5
 8006242:	d1fb      	bne.n	800623c <__sccl+0x1c>
 8006244:	b90b      	cbnz	r3, 800624a <__sccl+0x2a>
 8006246:	3801      	subs	r0, #1
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	f082 0101 	eor.w	r1, r2, #1
 800624e:	54e1      	strb	r1, [r4, r3]
 8006250:	1c42      	adds	r2, r0, #1
 8006252:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8006256:	2d2d      	cmp	r5, #45	; 0x2d
 8006258:	f102 36ff 	add.w	r6, r2, #4294967295
 800625c:	4610      	mov	r0, r2
 800625e:	d006      	beq.n	800626e <__sccl+0x4e>
 8006260:	2d5d      	cmp	r5, #93	; 0x5d
 8006262:	d0f1      	beq.n	8006248 <__sccl+0x28>
 8006264:	b90d      	cbnz	r5, 800626a <__sccl+0x4a>
 8006266:	4630      	mov	r0, r6
 8006268:	e7ee      	b.n	8006248 <__sccl+0x28>
 800626a:	462b      	mov	r3, r5
 800626c:	e7ef      	b.n	800624e <__sccl+0x2e>
 800626e:	7816      	ldrb	r6, [r2, #0]
 8006270:	2e5d      	cmp	r6, #93	; 0x5d
 8006272:	d0fa      	beq.n	800626a <__sccl+0x4a>
 8006274:	42b3      	cmp	r3, r6
 8006276:	dcf8      	bgt.n	800626a <__sccl+0x4a>
 8006278:	4618      	mov	r0, r3
 800627a:	3001      	adds	r0, #1
 800627c:	4286      	cmp	r6, r0
 800627e:	5421      	strb	r1, [r4, r0]
 8006280:	dcfb      	bgt.n	800627a <__sccl+0x5a>
 8006282:	43d8      	mvns	r0, r3
 8006284:	4430      	add	r0, r6
 8006286:	1c5d      	adds	r5, r3, #1
 8006288:	42b3      	cmp	r3, r6
 800628a:	bfa8      	it	ge
 800628c:	2000      	movge	r0, #0
 800628e:	182b      	adds	r3, r5, r0
 8006290:	3202      	adds	r2, #2
 8006292:	e7de      	b.n	8006252 <__sccl+0x32>

08006294 <_strtol_l.isra.0>:
 8006294:	2b01      	cmp	r3, #1
 8006296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629a:	d001      	beq.n	80062a0 <_strtol_l.isra.0+0xc>
 800629c:	2b24      	cmp	r3, #36	; 0x24
 800629e:	d906      	bls.n	80062ae <_strtol_l.isra.0+0x1a>
 80062a0:	f7ff fc28 	bl	8005af4 <__errno>
 80062a4:	2316      	movs	r3, #22
 80062a6:	6003      	str	r3, [r0, #0]
 80062a8:	2000      	movs	r0, #0
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	4f3a      	ldr	r7, [pc, #232]	; (8006398 <_strtol_l.isra.0+0x104>)
 80062b0:	468e      	mov	lr, r1
 80062b2:	4676      	mov	r6, lr
 80062b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80062b8:	5de5      	ldrb	r5, [r4, r7]
 80062ba:	f015 0508 	ands.w	r5, r5, #8
 80062be:	d1f8      	bne.n	80062b2 <_strtol_l.isra.0+0x1e>
 80062c0:	2c2d      	cmp	r4, #45	; 0x2d
 80062c2:	d134      	bne.n	800632e <_strtol_l.isra.0+0x9a>
 80062c4:	f89e 4000 	ldrb.w	r4, [lr]
 80062c8:	f04f 0801 	mov.w	r8, #1
 80062cc:	f106 0e02 	add.w	lr, r6, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d05c      	beq.n	800638e <_strtol_l.isra.0+0xfa>
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d10c      	bne.n	80062f2 <_strtol_l.isra.0+0x5e>
 80062d8:	2c30      	cmp	r4, #48	; 0x30
 80062da:	d10a      	bne.n	80062f2 <_strtol_l.isra.0+0x5e>
 80062dc:	f89e 4000 	ldrb.w	r4, [lr]
 80062e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062e4:	2c58      	cmp	r4, #88	; 0x58
 80062e6:	d14d      	bne.n	8006384 <_strtol_l.isra.0+0xf0>
 80062e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80062ec:	2310      	movs	r3, #16
 80062ee:	f10e 0e02 	add.w	lr, lr, #2
 80062f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80062f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80062fa:	2600      	movs	r6, #0
 80062fc:	fbbc f9f3 	udiv	r9, ip, r3
 8006300:	4635      	mov	r5, r6
 8006302:	fb03 ca19 	mls	sl, r3, r9, ip
 8006306:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800630a:	2f09      	cmp	r7, #9
 800630c:	d818      	bhi.n	8006340 <_strtol_l.isra.0+0xac>
 800630e:	463c      	mov	r4, r7
 8006310:	42a3      	cmp	r3, r4
 8006312:	dd24      	ble.n	800635e <_strtol_l.isra.0+0xca>
 8006314:	2e00      	cmp	r6, #0
 8006316:	db1f      	blt.n	8006358 <_strtol_l.isra.0+0xc4>
 8006318:	45a9      	cmp	r9, r5
 800631a:	d31d      	bcc.n	8006358 <_strtol_l.isra.0+0xc4>
 800631c:	d101      	bne.n	8006322 <_strtol_l.isra.0+0x8e>
 800631e:	45a2      	cmp	sl, r4
 8006320:	db1a      	blt.n	8006358 <_strtol_l.isra.0+0xc4>
 8006322:	fb05 4503 	mla	r5, r5, r3, r4
 8006326:	2601      	movs	r6, #1
 8006328:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800632c:	e7eb      	b.n	8006306 <_strtol_l.isra.0+0x72>
 800632e:	2c2b      	cmp	r4, #43	; 0x2b
 8006330:	bf08      	it	eq
 8006332:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006336:	46a8      	mov	r8, r5
 8006338:	bf08      	it	eq
 800633a:	f106 0e02 	addeq.w	lr, r6, #2
 800633e:	e7c7      	b.n	80062d0 <_strtol_l.isra.0+0x3c>
 8006340:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006344:	2f19      	cmp	r7, #25
 8006346:	d801      	bhi.n	800634c <_strtol_l.isra.0+0xb8>
 8006348:	3c37      	subs	r4, #55	; 0x37
 800634a:	e7e1      	b.n	8006310 <_strtol_l.isra.0+0x7c>
 800634c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006350:	2f19      	cmp	r7, #25
 8006352:	d804      	bhi.n	800635e <_strtol_l.isra.0+0xca>
 8006354:	3c57      	subs	r4, #87	; 0x57
 8006356:	e7db      	b.n	8006310 <_strtol_l.isra.0+0x7c>
 8006358:	f04f 36ff 	mov.w	r6, #4294967295
 800635c:	e7e4      	b.n	8006328 <_strtol_l.isra.0+0x94>
 800635e:	2e00      	cmp	r6, #0
 8006360:	da05      	bge.n	800636e <_strtol_l.isra.0+0xda>
 8006362:	2322      	movs	r3, #34	; 0x22
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	4665      	mov	r5, ip
 8006368:	b942      	cbnz	r2, 800637c <_strtol_l.isra.0+0xe8>
 800636a:	4628      	mov	r0, r5
 800636c:	e79d      	b.n	80062aa <_strtol_l.isra.0+0x16>
 800636e:	f1b8 0f00 	cmp.w	r8, #0
 8006372:	d000      	beq.n	8006376 <_strtol_l.isra.0+0xe2>
 8006374:	426d      	negs	r5, r5
 8006376:	2a00      	cmp	r2, #0
 8006378:	d0f7      	beq.n	800636a <_strtol_l.isra.0+0xd6>
 800637a:	b10e      	cbz	r6, 8006380 <_strtol_l.isra.0+0xec>
 800637c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006380:	6011      	str	r1, [r2, #0]
 8006382:	e7f2      	b.n	800636a <_strtol_l.isra.0+0xd6>
 8006384:	2430      	movs	r4, #48	; 0x30
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1b3      	bne.n	80062f2 <_strtol_l.isra.0+0x5e>
 800638a:	2308      	movs	r3, #8
 800638c:	e7b1      	b.n	80062f2 <_strtol_l.isra.0+0x5e>
 800638e:	2c30      	cmp	r4, #48	; 0x30
 8006390:	d0a4      	beq.n	80062dc <_strtol_l.isra.0+0x48>
 8006392:	230a      	movs	r3, #10
 8006394:	e7ad      	b.n	80062f2 <_strtol_l.isra.0+0x5e>
 8006396:	bf00      	nop
 8006398:	08006800 	.word	0x08006800

0800639c <_strtol_r>:
 800639c:	f7ff bf7a 	b.w	8006294 <_strtol_l.isra.0>

080063a0 <_strtoul_l.isra.0>:
 80063a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a4:	4e3b      	ldr	r6, [pc, #236]	; (8006494 <_strtoul_l.isra.0+0xf4>)
 80063a6:	4686      	mov	lr, r0
 80063a8:	468c      	mov	ip, r1
 80063aa:	4660      	mov	r0, ip
 80063ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80063b0:	5da5      	ldrb	r5, [r4, r6]
 80063b2:	f015 0508 	ands.w	r5, r5, #8
 80063b6:	d1f8      	bne.n	80063aa <_strtoul_l.isra.0+0xa>
 80063b8:	2c2d      	cmp	r4, #45	; 0x2d
 80063ba:	d134      	bne.n	8006426 <_strtoul_l.isra.0+0x86>
 80063bc:	f89c 4000 	ldrb.w	r4, [ip]
 80063c0:	f04f 0801 	mov.w	r8, #1
 80063c4:	f100 0c02 	add.w	ip, r0, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d05e      	beq.n	800648a <_strtoul_l.isra.0+0xea>
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d10c      	bne.n	80063ea <_strtoul_l.isra.0+0x4a>
 80063d0:	2c30      	cmp	r4, #48	; 0x30
 80063d2:	d10a      	bne.n	80063ea <_strtoul_l.isra.0+0x4a>
 80063d4:	f89c 0000 	ldrb.w	r0, [ip]
 80063d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80063dc:	2858      	cmp	r0, #88	; 0x58
 80063de:	d14f      	bne.n	8006480 <_strtoul_l.isra.0+0xe0>
 80063e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80063e4:	2310      	movs	r3, #16
 80063e6:	f10c 0c02 	add.w	ip, ip, #2
 80063ea:	f04f 37ff 	mov.w	r7, #4294967295
 80063ee:	2500      	movs	r5, #0
 80063f0:	fbb7 f7f3 	udiv	r7, r7, r3
 80063f4:	fb03 f907 	mul.w	r9, r3, r7
 80063f8:	ea6f 0909 	mvn.w	r9, r9
 80063fc:	4628      	mov	r0, r5
 80063fe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006402:	2e09      	cmp	r6, #9
 8006404:	d818      	bhi.n	8006438 <_strtoul_l.isra.0+0x98>
 8006406:	4634      	mov	r4, r6
 8006408:	42a3      	cmp	r3, r4
 800640a:	dd24      	ble.n	8006456 <_strtoul_l.isra.0+0xb6>
 800640c:	2d00      	cmp	r5, #0
 800640e:	db1f      	blt.n	8006450 <_strtoul_l.isra.0+0xb0>
 8006410:	4287      	cmp	r7, r0
 8006412:	d31d      	bcc.n	8006450 <_strtoul_l.isra.0+0xb0>
 8006414:	d101      	bne.n	800641a <_strtoul_l.isra.0+0x7a>
 8006416:	45a1      	cmp	r9, r4
 8006418:	db1a      	blt.n	8006450 <_strtoul_l.isra.0+0xb0>
 800641a:	fb00 4003 	mla	r0, r0, r3, r4
 800641e:	2501      	movs	r5, #1
 8006420:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006424:	e7eb      	b.n	80063fe <_strtoul_l.isra.0+0x5e>
 8006426:	2c2b      	cmp	r4, #43	; 0x2b
 8006428:	bf08      	it	eq
 800642a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800642e:	46a8      	mov	r8, r5
 8006430:	bf08      	it	eq
 8006432:	f100 0c02 	addeq.w	ip, r0, #2
 8006436:	e7c7      	b.n	80063c8 <_strtoul_l.isra.0+0x28>
 8006438:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800643c:	2e19      	cmp	r6, #25
 800643e:	d801      	bhi.n	8006444 <_strtoul_l.isra.0+0xa4>
 8006440:	3c37      	subs	r4, #55	; 0x37
 8006442:	e7e1      	b.n	8006408 <_strtoul_l.isra.0+0x68>
 8006444:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006448:	2e19      	cmp	r6, #25
 800644a:	d804      	bhi.n	8006456 <_strtoul_l.isra.0+0xb6>
 800644c:	3c57      	subs	r4, #87	; 0x57
 800644e:	e7db      	b.n	8006408 <_strtoul_l.isra.0+0x68>
 8006450:	f04f 35ff 	mov.w	r5, #4294967295
 8006454:	e7e4      	b.n	8006420 <_strtoul_l.isra.0+0x80>
 8006456:	2d00      	cmp	r5, #0
 8006458:	da07      	bge.n	800646a <_strtoul_l.isra.0+0xca>
 800645a:	2322      	movs	r3, #34	; 0x22
 800645c:	f8ce 3000 	str.w	r3, [lr]
 8006460:	f04f 30ff 	mov.w	r0, #4294967295
 8006464:	b942      	cbnz	r2, 8006478 <_strtoul_l.isra.0+0xd8>
 8006466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800646a:	f1b8 0f00 	cmp.w	r8, #0
 800646e:	d000      	beq.n	8006472 <_strtoul_l.isra.0+0xd2>
 8006470:	4240      	negs	r0, r0
 8006472:	2a00      	cmp	r2, #0
 8006474:	d0f7      	beq.n	8006466 <_strtoul_l.isra.0+0xc6>
 8006476:	b10d      	cbz	r5, 800647c <_strtoul_l.isra.0+0xdc>
 8006478:	f10c 31ff 	add.w	r1, ip, #4294967295
 800647c:	6011      	str	r1, [r2, #0]
 800647e:	e7f2      	b.n	8006466 <_strtoul_l.isra.0+0xc6>
 8006480:	2430      	movs	r4, #48	; 0x30
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1b1      	bne.n	80063ea <_strtoul_l.isra.0+0x4a>
 8006486:	2308      	movs	r3, #8
 8006488:	e7af      	b.n	80063ea <_strtoul_l.isra.0+0x4a>
 800648a:	2c30      	cmp	r4, #48	; 0x30
 800648c:	d0a2      	beq.n	80063d4 <_strtoul_l.isra.0+0x34>
 800648e:	230a      	movs	r3, #10
 8006490:	e7ab      	b.n	80063ea <_strtoul_l.isra.0+0x4a>
 8006492:	bf00      	nop
 8006494:	08006800 	.word	0x08006800

08006498 <_strtoul_r>:
 8006498:	f7ff bf82 	b.w	80063a0 <_strtoul_l.isra.0>

0800649c <__submore>:
 800649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	460c      	mov	r4, r1
 80064a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80064a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a8:	4299      	cmp	r1, r3
 80064aa:	d11d      	bne.n	80064e8 <__submore+0x4c>
 80064ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064b0:	f000 f88e 	bl	80065d0 <_malloc_r>
 80064b4:	b918      	cbnz	r0, 80064be <__submore+0x22>
 80064b6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80064c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80064c8:	6360      	str	r0, [r4, #52]	; 0x34
 80064ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80064ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80064d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80064de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80064e2:	6020      	str	r0, [r4, #0]
 80064e4:	2000      	movs	r0, #0
 80064e6:	e7e8      	b.n	80064ba <__submore+0x1e>
 80064e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80064ea:	0077      	lsls	r7, r6, #1
 80064ec:	463a      	mov	r2, r7
 80064ee:	f000 f8c9 	bl	8006684 <_realloc_r>
 80064f2:	4605      	mov	r5, r0
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d0de      	beq.n	80064b6 <__submore+0x1a>
 80064f8:	eb00 0806 	add.w	r8, r0, r6
 80064fc:	4601      	mov	r1, r0
 80064fe:	4632      	mov	r2, r6
 8006500:	4640      	mov	r0, r8
 8006502:	f000 f807 	bl	8006514 <memcpy>
 8006506:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800650a:	f8c4 8000 	str.w	r8, [r4]
 800650e:	e7e9      	b.n	80064e4 <__submore+0x48>

08006510 <__retarget_lock_acquire_recursive>:
 8006510:	4770      	bx	lr

08006512 <__retarget_lock_release_recursive>:
 8006512:	4770      	bx	lr

08006514 <memcpy>:
 8006514:	440a      	add	r2, r1
 8006516:	4291      	cmp	r1, r2
 8006518:	f100 33ff 	add.w	r3, r0, #4294967295
 800651c:	d100      	bne.n	8006520 <memcpy+0xc>
 800651e:	4770      	bx	lr
 8006520:	b510      	push	{r4, lr}
 8006522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800652a:	4291      	cmp	r1, r2
 800652c:	d1f9      	bne.n	8006522 <memcpy+0xe>
 800652e:	bd10      	pop	{r4, pc}

08006530 <_free_r>:
 8006530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006532:	2900      	cmp	r1, #0
 8006534:	d048      	beq.n	80065c8 <_free_r+0x98>
 8006536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653a:	9001      	str	r0, [sp, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f1a1 0404 	sub.w	r4, r1, #4
 8006542:	bfb8      	it	lt
 8006544:	18e4      	addlt	r4, r4, r3
 8006546:	f000 f8d3 	bl	80066f0 <__malloc_lock>
 800654a:	4a20      	ldr	r2, [pc, #128]	; (80065cc <_free_r+0x9c>)
 800654c:	9801      	ldr	r0, [sp, #4]
 800654e:	6813      	ldr	r3, [r2, #0]
 8006550:	4615      	mov	r5, r2
 8006552:	b933      	cbnz	r3, 8006562 <_free_r+0x32>
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	6014      	str	r4, [r2, #0]
 8006558:	b003      	add	sp, #12
 800655a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800655e:	f000 b8cd 	b.w	80066fc <__malloc_unlock>
 8006562:	42a3      	cmp	r3, r4
 8006564:	d90b      	bls.n	800657e <_free_r+0x4e>
 8006566:	6821      	ldr	r1, [r4, #0]
 8006568:	1862      	adds	r2, r4, r1
 800656a:	4293      	cmp	r3, r2
 800656c:	bf04      	itt	eq
 800656e:	681a      	ldreq	r2, [r3, #0]
 8006570:	685b      	ldreq	r3, [r3, #4]
 8006572:	6063      	str	r3, [r4, #4]
 8006574:	bf04      	itt	eq
 8006576:	1852      	addeq	r2, r2, r1
 8006578:	6022      	streq	r2, [r4, #0]
 800657a:	602c      	str	r4, [r5, #0]
 800657c:	e7ec      	b.n	8006558 <_free_r+0x28>
 800657e:	461a      	mov	r2, r3
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	b10b      	cbz	r3, 8006588 <_free_r+0x58>
 8006584:	42a3      	cmp	r3, r4
 8006586:	d9fa      	bls.n	800657e <_free_r+0x4e>
 8006588:	6811      	ldr	r1, [r2, #0]
 800658a:	1855      	adds	r5, r2, r1
 800658c:	42a5      	cmp	r5, r4
 800658e:	d10b      	bne.n	80065a8 <_free_r+0x78>
 8006590:	6824      	ldr	r4, [r4, #0]
 8006592:	4421      	add	r1, r4
 8006594:	1854      	adds	r4, r2, r1
 8006596:	42a3      	cmp	r3, r4
 8006598:	6011      	str	r1, [r2, #0]
 800659a:	d1dd      	bne.n	8006558 <_free_r+0x28>
 800659c:	681c      	ldr	r4, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	6053      	str	r3, [r2, #4]
 80065a2:	4421      	add	r1, r4
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	e7d7      	b.n	8006558 <_free_r+0x28>
 80065a8:	d902      	bls.n	80065b0 <_free_r+0x80>
 80065aa:	230c      	movs	r3, #12
 80065ac:	6003      	str	r3, [r0, #0]
 80065ae:	e7d3      	b.n	8006558 <_free_r+0x28>
 80065b0:	6825      	ldr	r5, [r4, #0]
 80065b2:	1961      	adds	r1, r4, r5
 80065b4:	428b      	cmp	r3, r1
 80065b6:	bf04      	itt	eq
 80065b8:	6819      	ldreq	r1, [r3, #0]
 80065ba:	685b      	ldreq	r3, [r3, #4]
 80065bc:	6063      	str	r3, [r4, #4]
 80065be:	bf04      	itt	eq
 80065c0:	1949      	addeq	r1, r1, r5
 80065c2:	6021      	streq	r1, [r4, #0]
 80065c4:	6054      	str	r4, [r2, #4]
 80065c6:	e7c7      	b.n	8006558 <_free_r+0x28>
 80065c8:	b003      	add	sp, #12
 80065ca:	bd30      	pop	{r4, r5, pc}
 80065cc:	20000094 	.word	0x20000094

080065d0 <_malloc_r>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	1ccd      	adds	r5, r1, #3
 80065d4:	f025 0503 	bic.w	r5, r5, #3
 80065d8:	3508      	adds	r5, #8
 80065da:	2d0c      	cmp	r5, #12
 80065dc:	bf38      	it	cc
 80065de:	250c      	movcc	r5, #12
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	4606      	mov	r6, r0
 80065e4:	db01      	blt.n	80065ea <_malloc_r+0x1a>
 80065e6:	42a9      	cmp	r1, r5
 80065e8:	d903      	bls.n	80065f2 <_malloc_r+0x22>
 80065ea:	230c      	movs	r3, #12
 80065ec:	6033      	str	r3, [r6, #0]
 80065ee:	2000      	movs	r0, #0
 80065f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065f2:	f000 f87d 	bl	80066f0 <__malloc_lock>
 80065f6:	4921      	ldr	r1, [pc, #132]	; (800667c <_malloc_r+0xac>)
 80065f8:	680a      	ldr	r2, [r1, #0]
 80065fa:	4614      	mov	r4, r2
 80065fc:	b99c      	cbnz	r4, 8006626 <_malloc_r+0x56>
 80065fe:	4f20      	ldr	r7, [pc, #128]	; (8006680 <_malloc_r+0xb0>)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	b923      	cbnz	r3, 800660e <_malloc_r+0x3e>
 8006604:	4621      	mov	r1, r4
 8006606:	4630      	mov	r0, r6
 8006608:	f000 f862 	bl	80066d0 <_sbrk_r>
 800660c:	6038      	str	r0, [r7, #0]
 800660e:	4629      	mov	r1, r5
 8006610:	4630      	mov	r0, r6
 8006612:	f000 f85d 	bl	80066d0 <_sbrk_r>
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	d123      	bne.n	8006662 <_malloc_r+0x92>
 800661a:	230c      	movs	r3, #12
 800661c:	6033      	str	r3, [r6, #0]
 800661e:	4630      	mov	r0, r6
 8006620:	f000 f86c 	bl	80066fc <__malloc_unlock>
 8006624:	e7e3      	b.n	80065ee <_malloc_r+0x1e>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	1b5b      	subs	r3, r3, r5
 800662a:	d417      	bmi.n	800665c <_malloc_r+0x8c>
 800662c:	2b0b      	cmp	r3, #11
 800662e:	d903      	bls.n	8006638 <_malloc_r+0x68>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	441c      	add	r4, r3
 8006634:	6025      	str	r5, [r4, #0]
 8006636:	e004      	b.n	8006642 <_malloc_r+0x72>
 8006638:	6863      	ldr	r3, [r4, #4]
 800663a:	42a2      	cmp	r2, r4
 800663c:	bf0c      	ite	eq
 800663e:	600b      	streq	r3, [r1, #0]
 8006640:	6053      	strne	r3, [r2, #4]
 8006642:	4630      	mov	r0, r6
 8006644:	f000 f85a 	bl	80066fc <__malloc_unlock>
 8006648:	f104 000b 	add.w	r0, r4, #11
 800664c:	1d23      	adds	r3, r4, #4
 800664e:	f020 0007 	bic.w	r0, r0, #7
 8006652:	1ac2      	subs	r2, r0, r3
 8006654:	d0cc      	beq.n	80065f0 <_malloc_r+0x20>
 8006656:	1a1b      	subs	r3, r3, r0
 8006658:	50a3      	str	r3, [r4, r2]
 800665a:	e7c9      	b.n	80065f0 <_malloc_r+0x20>
 800665c:	4622      	mov	r2, r4
 800665e:	6864      	ldr	r4, [r4, #4]
 8006660:	e7cc      	b.n	80065fc <_malloc_r+0x2c>
 8006662:	1cc4      	adds	r4, r0, #3
 8006664:	f024 0403 	bic.w	r4, r4, #3
 8006668:	42a0      	cmp	r0, r4
 800666a:	d0e3      	beq.n	8006634 <_malloc_r+0x64>
 800666c:	1a21      	subs	r1, r4, r0
 800666e:	4630      	mov	r0, r6
 8006670:	f000 f82e 	bl	80066d0 <_sbrk_r>
 8006674:	3001      	adds	r0, #1
 8006676:	d1dd      	bne.n	8006634 <_malloc_r+0x64>
 8006678:	e7cf      	b.n	800661a <_malloc_r+0x4a>
 800667a:	bf00      	nop
 800667c:	20000094 	.word	0x20000094
 8006680:	20000098 	.word	0x20000098

08006684 <_realloc_r>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	4607      	mov	r7, r0
 8006688:	4614      	mov	r4, r2
 800668a:	460e      	mov	r6, r1
 800668c:	b921      	cbnz	r1, 8006698 <_realloc_r+0x14>
 800668e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006692:	4611      	mov	r1, r2
 8006694:	f7ff bf9c 	b.w	80065d0 <_malloc_r>
 8006698:	b922      	cbnz	r2, 80066a4 <_realloc_r+0x20>
 800669a:	f7ff ff49 	bl	8006530 <_free_r>
 800669e:	4625      	mov	r5, r4
 80066a0:	4628      	mov	r0, r5
 80066a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a4:	f000 f830 	bl	8006708 <_malloc_usable_size_r>
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d20f      	bcs.n	80066cc <_realloc_r+0x48>
 80066ac:	4621      	mov	r1, r4
 80066ae:	4638      	mov	r0, r7
 80066b0:	f7ff ff8e 	bl	80065d0 <_malloc_r>
 80066b4:	4605      	mov	r5, r0
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d0f2      	beq.n	80066a0 <_realloc_r+0x1c>
 80066ba:	4631      	mov	r1, r6
 80066bc:	4622      	mov	r2, r4
 80066be:	f7ff ff29 	bl	8006514 <memcpy>
 80066c2:	4631      	mov	r1, r6
 80066c4:	4638      	mov	r0, r7
 80066c6:	f7ff ff33 	bl	8006530 <_free_r>
 80066ca:	e7e9      	b.n	80066a0 <_realloc_r+0x1c>
 80066cc:	4635      	mov	r5, r6
 80066ce:	e7e7      	b.n	80066a0 <_realloc_r+0x1c>

080066d0 <_sbrk_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d06      	ldr	r5, [pc, #24]	; (80066ec <_sbrk_r+0x1c>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fe fa8e 	bl	8004bfc <_sbrk>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_sbrk_r+0x1a>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_sbrk_r+0x1a>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	200040a0 	.word	0x200040a0

080066f0 <__malloc_lock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	; (80066f8 <__malloc_lock+0x8>)
 80066f2:	f7ff bf0d 	b.w	8006510 <__retarget_lock_acquire_recursive>
 80066f6:	bf00      	nop
 80066f8:	200040a8 	.word	0x200040a8

080066fc <__malloc_unlock>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__malloc_unlock+0x8>)
 80066fe:	f7ff bf08 	b.w	8006512 <__retarget_lock_release_recursive>
 8006702:	bf00      	nop
 8006704:	200040a8 	.word	0x200040a8

08006708 <_malloc_usable_size_r>:
 8006708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800670c:	1f18      	subs	r0, r3, #4
 800670e:	2b00      	cmp	r3, #0
 8006710:	bfbc      	itt	lt
 8006712:	580b      	ldrlt	r3, [r1, r0]
 8006714:	18c0      	addlt	r0, r0, r3
 8006716:	4770      	bx	lr

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
