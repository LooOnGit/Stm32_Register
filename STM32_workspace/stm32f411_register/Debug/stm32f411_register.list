
stm32f411_register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002030  08002030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d4  080020d4  00020604  2**0
                  CONTENTS
  4 .ARM          00000008  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020dc  080020dc  00020604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020dc  080020dc  000120dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000400  080020e4  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000016d0  20000604  080022e8  00020604  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cd4  080022e8  00021cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020604  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054f9  00000000  00000000  00020634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000127e  00000000  00000000  00025b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a0  00000000  00000000  00026db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00027250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014eb4  00000000  00000000  00027658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053ce  00000000  00000000  0003c50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082900  00000000  00000000  000418da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c41da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001518  00000000  00000000  000c4230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000604 	.word	0x20000604
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800200c 	.word	0x0800200c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000608 	.word	0x20000608
 80001dc:	0800200c 	.word	0x0800200c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <leds_init>:
char read_button_state(){
	uint32_t* GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ARR + 0x10);
	return (*GPIOA_IDR>>0 & 1);
}

void leds_init(){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <leds_init+0x70>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <leds_init+0x70>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <leds_init+0x70>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ARR + 0x00);
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <leds_init+0x74>)
 80005ac:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER |= (0b01 << 24);//set PD12 in OUTPUTv
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 26);//set PD13 in OUTPUT
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 28);//set PD14 in OUTPUT
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 30);//set PD15 in OUTPUT
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER &= ~(0b1111 << 12);//set PD12, PD13, PD14, PD15 in push-pull
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020c00 	.word	0x40020c00

08000600 <led_control>:

void led_control(char led_state){
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	uint32_t* GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ARR + 0x14);
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <led_control+0x3c>)
 800060c:	60fb      	str	r3, [r7, #12]
	if(led_state==1){
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d106      	bne.n	8000622 <led_control+0x22>
		*GPIOD_ODR |= 1<<12;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	601a      	str	r2, [r3, #0]
	}else{
		*GPIOD_ODR &=~(1<<12);
	}
}
 8000620:	e005      	b.n	800062e <led_control+0x2e>
		*GPIOD_ODR &=~(1<<12);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	601a      	str	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40020c14 	.word	0x40020c14

08000640 <EXTI0_IRQHandler>:
	uint32_t* NVIC_ISER0 = (uint32_t*)(0xe000e100);//ISER2 thì ở địa chỉ 0xE00E108
	*NVIC_ISER0 |= (1<<6); //enable interrupt for event in position 6 vector table (EXTI0)
}

void EXTI0_IRQHandler()
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
	__asm("nop");
 8000646:	bf00      	nop
	uint32_t* EXTI_PR = (uint32_t*)(0x40013c00 + 0x14);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <EXTI0_IRQHandler+0x24>)
 800064a:	607b      	str	r3, [r7, #4]
	*EXTI_PR |= (1<<0); //clear interrupt event
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f043 0201 	orr.w	r2, r3, #1
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40013c14 	.word	0x40013c14

08000668 <UART1_init>:
		uint32_t* EXTI_PR = (uint32_t*)(0x40013c00 + 0x14);
		*EXTI_PR |= (1<<0); //clear interrupt event
}

void UART1_init()
{
 8000668:	b480      	push	{r7}
 800066a:	b087      	sub	sp, #28
 800066c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <UART1_init+0xbc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a2b      	ldr	r2, [pc, #172]	; (8000724 <UART1_init+0xbc>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <UART1_init+0xbc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
	//set PB6 as UART1_TX(AF07) and PB7 as UART1_RX(AF07)
	uint32_t* MODER = (uint32_t*)(0x40020400);
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <UART1_init+0xc0>)
 800068c:	617b      	str	r3, [r7, #20]
	uint32_t* AFRL = (uint32_t*)(0x40020420);
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <UART1_init+0xc4>)
 8000690:	613b      	str	r3, [r7, #16]
	*MODER &=~(0b1111 << 12); //clear 4 bit 0000
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	601a      	str	r2, [r3, #0]
	*MODER |= (0b10 << 12)|(0b10 << 14);//set alternate function
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	601a      	str	r2, [r3, #0]
	*AFRL &= ~(0xff << 24);
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	601a      	str	r2, [r3, #0]
	*AFRL |= (7 << 24) | (7 << 28);//set AF07 for PB6 and PB7
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f043 42ee 	orr.w	r2, r3, #1996488704	; 0x77000000
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	601a      	str	r2, [r3, #0]
	//UART
	//baun rate: 9600
	// +frame:
	// +date len: 8byte
	// +parity (none/add/even): none
	__HAL_RCC_USART1_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <UART1_init+0xbc>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <UART1_init+0xbc>)
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <UART1_init+0xbc>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
	uint32_t* BRR = (uint32_t*)(0x40011008);
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <UART1_init+0xc8>)
 80006e0:	60fb      	str	r3, [r7, #12]
	uint32_t* CR1 = (uint32_t*)(0x4001100c);
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <UART1_init+0xcc>)
 80006e4:	60bb      	str	r3, [r7, #8]
	*BRR = (104 << 4) | (3 << 0);//set baunrate in 9600
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f240 6283 	movw	r2, #1667	; 0x683
 80006ec:	601a      	str	r2, [r3, #0]
	*CR1 &= ~(1 << 10); //disable parity
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	601a      	str	r2, [r3, #0]
	*CR1 &= ~(1 << 12);//set data lenght 8 bits data
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	601a      	str	r2, [r3, #0]
	*CR1 |= (1 << 13) | (1 << 2) | (1 << 3);//enable transmiter, reciver, uart
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800070e:	f043 030c 	orr.w	r3, r3, #12
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	6013      	str	r3, [r2, #0]
//	uint32_t* CR3 = (uint32_t*)(0x40011014);
//	*CR3 |= (1 << 6);

#endif

}
 8000716:	bf00      	nop
 8000718:	371c      	adds	r7, #28
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40020400 	.word	0x40020400
 800072c:	40020420 	.word	0x40020420
 8000730:	40011008 	.word	0x40011008
 8000734:	4001100c 	.word	0x4001100c

08000738 <UART1_Send_1byte>:

void UART1_Send_1byte(char data){
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]

	//trinh tu read SR to Write DR
	uint32_t* SR = (uint32_t*)(0x40011000);
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <UART1_Send_1byte+0x50>)
 8000744:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)(0x40011004);
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <UART1_Send_1byte+0x54>)
 8000748:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7) & 1) == 0);//Wait DR empty
 800074a:	bf00      	nop
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	09db      	lsrs	r3, r3, #7
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0f8      	beq.n	800074c <UART1_Send_1byte+0x14>
	*DR = data;						//write data to DR to UART1 transfer data via TX(PB6)
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6) & 1) == 0);//wait transmitter of UART1 complete transmit
 8000760:	bf00      	nop
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	099b      	lsrs	r3, r3, #6
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0f8      	beq.n	8000762 <UART1_Send_1byte+0x2a>
	*SR &=~(1<<6);				//clear TC flag
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	601a      	str	r2, [r3, #0]
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40011000 	.word	0x40011000
 800078c:	40011004 	.word	0x40011004

08000790 <UART1_Send_String>:


void UART1_Send_String(char* msg)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	int msg_len = strlen(msg);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff fd21 	bl	80001e0 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i< msg_len; i++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	e009      	b.n	80007bc <UART1_Send_String+0x2c>
		UART1_Send_1byte(msg[i]);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffc1 	bl	8000738 <UART1_Send_1byte>
	for(int i = 0; i< msg_len; i++){
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf1      	blt.n	80007a8 <UART1_Send_String+0x18>
	}
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <UART1_Recv_1Byte>:

char UART1_Recv_1Byte()
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
	uint32_t* SR = (uint32_t*)(0x40011000);
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <UART1_Recv_1Byte+0x34>)
 80007d8:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)(0x40011004);
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <UART1_Recv_1Byte+0x38>)
 80007dc:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 5) & 1) == 0);   //Wait RXNE flag to read recv data
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	095b      	lsrs	r3, r3, #5
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f8      	beq.n	80007e0 <UART1_Recv_1Byte+0x10>
	char recv_data = *DR;			//read recv data
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	71fb      	strb	r3, [r7, #7]
	return recv_data;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40011000 	.word	0x40011000
 8000808:	40011004 	.word	0x40011004

0800080c <uart_printf>:


void uart_printf(char *format, ...){
 800080c:	b40f      	push	{r0, r1, r2, r3}
 800080e:	b580      	push	{r7, lr}
 8000810:	b0a2      	sub	sp, #136	; 0x88
 8000812:	af00      	add	r7, sp, #0
	va_list aptr;
	va_start(aptr, format);
 8000814:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char buffer[128] = {0};
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	227c      	movs	r2, #124	; 0x7c
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f000 ffa1 	bl	8001770 <memset>
	vsprintf(buffer, format, aptr);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000834:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000838:	4618      	mov	r0, r3
 800083a:	f000 ffcf 	bl	80017dc <vsiprintf>
	UART1_Send_String(buffer);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffa5 	bl	8000790 <UART1_Send_String>
	va_end(aptr);
}
 8000846:	bf00      	nop
 8000848:	3788      	adds	r7, #136	; 0x88
 800084a:	46bd      	mov	sp, r7
 800084c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <DMA2_Stream5_IRQHandler>:

	uint32_t* ISER2 = (uint32_t*)(0xE000E108);//NVIC register summary
	*ISER2 |= 1 << (68 - 64); // vector table
}

void DMA2_Stream5_IRQHandler(){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	__asm("nop");
 800085a:	bf00      	nop
	//clean interrupt flash - > transfer complete interrupt
	uint32_t* HIFCR = (uint32_t*)(DMA2_ADDRESS + 0x0C);
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <DMA2_Stream5_IRQHandler+0x54>)
 800085e:	607b      	str	r3, [r7, #4]
	*HIFCR |= 1 << 11; // DMA
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	601a      	str	r2, [r3, #0]
	if(strstr(recv_data, "LED_ON") != NULL){
 800086c:	490f      	ldr	r1, [pc, #60]	; (80008ac <DMA2_Stream5_IRQHandler+0x58>)
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <DMA2_Stream5_IRQHandler+0x5c>)
 8000870:	f000 ff86 	bl	8001780 <strstr>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d003      	beq.n	8000882 <DMA2_Stream5_IRQHandler+0x2e>
		led_control(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fec0 	bl	8000600 <led_control>
 8000880:	e009      	b.n	8000896 <DMA2_Stream5_IRQHandler+0x42>
	}
	else if(strstr(recv_data, "LED_OFF") != NULL){
 8000882:	490c      	ldr	r1, [pc, #48]	; (80008b4 <DMA2_Stream5_IRQHandler+0x60>)
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <DMA2_Stream5_IRQHandler+0x5c>)
 8000886:	f000 ff7b 	bl	8001780 <strstr>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <DMA2_Stream5_IRQHandler+0x42>
		led_control(0);
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff feb5 	bl	8000600 <led_control>
	}
	memset(recv_data, 0, 7);
 8000896:	2207      	movs	r2, #7
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <DMA2_Stream5_IRQHandler+0x5c>)
 800089c:	f000 ff68 	bl	8001770 <memset>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	4002640c 	.word	0x4002640c
 80008ac:	08002030 	.word	0x08002030
 80008b0:	20001ca0 	.word	0x20001ca0
 80008b4:	08002038 	.word	0x08002038

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 f985 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f841 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f000 f89d 	bl	8000a04 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  leds_init();
 80008ca:	f7ff fe5d 	bl	8000588 <leds_init>
//  exti0_init();
  UART1_init();
 80008ce:	f7ff fecb 	bl	8000668 <UART1_init>
//
//  function_address = 0x20000150;//interrupt and event in vector table
//  *function_address = (uint32_t)(DMA2_Stream5_IRQHandler) | 1;
  /* USER CODE END 2 */

  uart_printf("please send %d byte to STM32\r\n", sizeof(new_fw_data));
 80008d2:	f241 6174 	movw	r1, #5748	; 0x1674
 80008d6:	4818      	ldr	r0, [pc, #96]	; (8000938 <main+0x80>)
 80008d8:	f7ff ff98 	bl	800080c <uart_printf>
  for(int i = 0; i < sizeof(new_fw_data); i++){
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	e00b      	b.n	80008fa <main+0x42>
	  new_fw_data[i] = UART1_Recv_1Byte();
 80008e2:	f7ff ff75 	bl	80007d0 <UART1_Recv_1Byte>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <main+0x84>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4413      	add	r3, r2
 80008f0:	460a      	mov	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < sizeof(new_fw_data); i++){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3301      	adds	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f241 6273 	movw	r2, #5747	; 0x1673
 8000900:	4293      	cmp	r3, r2
 8000902:	d9ee      	bls.n	80008e2 <main+0x2a>
  }
  uart_printf("start update firware, Dont power off device\r\n");
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <main+0x88>)
 8000906:	f7ff ff81 	bl	800080c <uart_printf>
  update_firmware();
 800090a:	f001 fb8d 	bl	8002028 <__update_firmware_veneer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <main+0x8c>)
 8000916:	f000 fad4 	bl	8000ec2 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091e:	f000 f9c7 	bl	8000cb0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <main+0x8c>)
 800092a:	f000 faca 	bl	8000ec2 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f000 f9bd 	bl	8000cb0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000936:	e7ea      	b.n	800090e <main+0x56>
 8000938:	08002040 	.word	0x08002040
 800093c:	2000062c 	.word	0x2000062c
 8000940:	08002060 	.word	0x08002060
 8000944:	40020c00 	.word	0x40020c00

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	; 0x50
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	2230      	movs	r2, #48	; 0x30
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f000 ff0a 	bl	8001770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <SystemClock_Config+0xb4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <SystemClock_Config+0xb4>)
 8000976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <SystemClock_Config+0xb4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <SystemClock_Config+0xb8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <SystemClock_Config+0xb8>)
 8000992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <SystemClock_Config+0xb8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fa9b 	bl	8000ef4 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009c4:	f000 f838 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fcfe 	bl	80013e4 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009ee:	f000 f823 	bl	8000a38 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3750      	adds	r7, #80	; 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_GPIO_Init+0x30>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <MX_GPIO_Init+0x30>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_GPIO_Init+0x30>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8c6 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f000 fe00 	bl	800171c <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20020000 	.word	0x20020000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	20000620 	.word	0x20000620
 8000b50:	20001cd8 	.word	0x20001cd8

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7e:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b94:	4c0b      	ldr	r4, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd7 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f000 fdbf 	bl	8001728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fe85 	bl	80008b8 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8000bb8:	20000604 	.word	0x20000604
  ldr r2, =_sidata
 8000bbc:	080020e4 	.word	0x080020e4
  ldr r2, =_sbss
 8000bc0:	20000604 	.word	0x20000604
  ldr r4, =_ebss
 8000bc4:	20001cd4 	.word	0x20001cd4

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f931 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff ff20 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f93b 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f911 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000400 	.word	0x20000400
 8000c68:	20000408 	.word	0x20000408
 8000c6c:	20000404 	.word	0x20000404

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000408 	.word	0x20000408
 8000c94:	20001cc0 	.word	0x20001cc0

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20001cc0 	.word	0x20001cc0

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000408 	.word	0x20000408

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff47 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff5c 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffb0 	bl	8000e18 <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	807b      	strh	r3, [r7, #2]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed8:	887a      	ldrh	r2, [r7, #2]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ede:	e003      	b.n	8000ee8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	041a      	lsls	r2, r3, #16
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e264      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d075      	beq.n	8000ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f12:	4ba3      	ldr	r3, [pc, #652]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d00c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1e:	4ba0      	ldr	r3, [pc, #640]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d112      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f2a:	4b9d      	ldr	r3, [pc, #628]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f36:	d10b      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	4b99      	ldr	r3, [pc, #612]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d05b      	beq.n	8000ffc <HAL_RCC_OscConfig+0x108>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d157      	bne.n	8000ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e23f      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d106      	bne.n	8000f68 <HAL_RCC_OscConfig+0x74>
 8000f5a:	4b91      	ldr	r3, [pc, #580]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e01d      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b8b      	ldr	r3, [pc, #556]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a8a      	ldr	r2, [pc, #552]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b88      	ldr	r3, [pc, #544]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f8c:	4b84      	ldr	r3, [pc, #528]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a83      	ldr	r2, [pc, #524]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b81      	ldr	r3, [pc, #516]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a80      	ldr	r2, [pc, #512]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fe74 	bl	8000c98 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fe70 	bl	8000c98 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e204      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b76      	ldr	r3, [pc, #472]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
 8000fd2:	e014      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fe60 	bl	8000c98 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fe5c 	bl	8000c98 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1f0      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	4b6c      	ldr	r3, [pc, #432]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0xe8>
 8000ffa:	e000      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d063      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100a:	4b65      	ldr	r3, [pc, #404]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001016:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800101e:	2b08      	cmp	r3, #8
 8001020:	d11c      	bne.n	800105c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001022:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d116      	bne.n	800105c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <HAL_RCC_OscConfig+0x152>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e1c4      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4952      	ldr	r1, [pc, #328]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	e03a      	b.n	80010d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d020      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001064:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <HAL_RCC_OscConfig+0x2b0>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106a:	f7ff fe15 	bl	8000c98 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fe11 	bl	8000c98 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e1a5      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4940      	ldr	r1, [pc, #256]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a6:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <HAL_RCC_OscConfig+0x2b0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fdf4 	bl	8000c98 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fdf0 	bl	8000c98 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e184      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d030      	beq.n	8001140 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d016      	beq.n	8001114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ec:	f7ff fdd4 	bl	8000c98 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f4:	f7ff fdd0 	bl	8000c98 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e164      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x200>
 8001112:	e015      	b.n	8001140 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_RCC_OscConfig+0x2b4>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff fdbd 	bl	8000c98 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001122:	f7ff fdb9 	bl	8000c98 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e14d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80a0 	beq.w	800128e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_RCC_OscConfig+0x2ac>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800117a:	2301      	movs	r3, #1
 800117c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_OscConfig+0x2b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d121      	bne.n	80011ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_RCC_OscConfig+0x2b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_RCC_OscConfig+0x2b8>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001196:	f7ff fd7f 	bl	8000c98 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119c:	e011      	b.n	80011c2 <HAL_RCC_OscConfig+0x2ce>
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	42470000 	.word	0x42470000
 80011a8:	42470e80 	.word	0x42470e80
 80011ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b0:	f7ff fd72 	bl	8000c98 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e106      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	4b85      	ldr	r3, [pc, #532]	; (80013d8 <HAL_RCC_OscConfig+0x4e4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
 80011d6:	4b81      	ldr	r3, [pc, #516]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	4a80      	ldr	r2, [pc, #512]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6713      	str	r3, [r2, #112]	; 0x70
 80011e2:	e01c      	b.n	800121e <HAL_RCC_OscConfig+0x32a>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x312>
 80011ec:	4b7b      	ldr	r3, [pc, #492]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80011ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f0:	4a7a      	ldr	r2, [pc, #488]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6713      	str	r3, [r2, #112]	; 0x70
 80011f8:	4b78      	ldr	r3, [pc, #480]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80011fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fc:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6713      	str	r3, [r2, #112]	; 0x70
 8001204:	e00b      	b.n	800121e <HAL_RCC_OscConfig+0x32a>
 8001206:	4b75      	ldr	r3, [pc, #468]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120a:	4a74      	ldr	r2, [pc, #464]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6713      	str	r3, [r2, #112]	; 0x70
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001216:	4a71      	ldr	r2, [pc, #452]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d015      	beq.n	8001252 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001226:	f7ff fd37 	bl	8000c98 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fd33 	bl	8000c98 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f241 3288 	movw	r2, #5000	; 0x1388
 800123c:	4293      	cmp	r3, r2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e0c5      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	4b65      	ldr	r3, [pc, #404]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0ee      	beq.n	800122e <HAL_RCC_OscConfig+0x33a>
 8001250:	e014      	b.n	800127c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fd21 	bl	8000c98 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	e00a      	b.n	8001270 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125a:	f7ff fd1d 	bl	8000c98 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f241 3288 	movw	r2, #5000	; 0x1388
 8001268:	4293      	cmp	r3, r2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e0af      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ee      	bne.n	800125a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d105      	bne.n	800128e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001282:	4b56      	ldr	r3, [pc, #344]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a55      	ldr	r2, [pc, #340]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 809b 	beq.w	80013ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d05c      	beq.n	800135e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d141      	bne.n	8001330 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_RCC_OscConfig+0x4ec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fcf1 	bl	8000c98 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ba:	f7ff fced 	bl	8000c98 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e081      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012cc:	4b43      	ldr	r3, [pc, #268]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69da      	ldr	r2, [r3, #28]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	019b      	lsls	r3, r3, #6
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	3b01      	subs	r3, #1
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	061b      	lsls	r3, r3, #24
 80012fc:	4937      	ldr	r1, [pc, #220]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001302:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <HAL_RCC_OscConfig+0x4ec>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcc6 	bl	8000c98 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fcc2 	bl	8000c98 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e056      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x41c>
 800132e:	e04e      	b.n	80013ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x4ec>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fcaf 	bl	8000c98 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff fcab 	bl	8000c98 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e03f      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x44a>
 800135c:	e037      	b.n	80013ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e032      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_RCC_OscConfig+0x4e8>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d028      	beq.n	80013ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001382:	429a      	cmp	r2, r3
 8001384:	d121      	bne.n	80013ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d11a      	bne.n	80013ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800139a:	4013      	ands	r3, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d111      	bne.n	80013ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	3b01      	subs	r3, #1
 80013b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40007000 	.word	0x40007000
 80013dc:	40023800 	.word	0x40023800
 80013e0:	42470060 	.word	0x42470060

080013e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0cc      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d90c      	bls.n	8001420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b8      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800145a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	494d      	ldr	r1, [pc, #308]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d044      	beq.n	8001504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d119      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e06f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e067      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f023 0203 	bic.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4934      	ldr	r1, [pc, #208]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fbe0 	bl	8000c98 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	f7ff fbdc 	bl	8000c98 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e04f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 020c 	and.w	r2, r3, #12
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1eb      	bne.n	80014dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d20c      	bcs.n	800152c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e032      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4916      	ldr	r1, [pc, #88]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f821 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	5ccb      	ldrb	r3, [r1, r3]
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb40 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	08002090 	.word	0x08002090
 80015a8:	20000400 	.word	0x20000400
 80015ac:	20000404 	.word	0x20000404

080015b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015b6:	2100      	movs	r1, #0
 80015b8:	6079      	str	r1, [r7, #4]
 80015ba:	2100      	movs	r1, #0
 80015bc:	60f9      	str	r1, [r7, #12]
 80015be:	2100      	movs	r1, #0
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015c2:	2100      	movs	r1, #0
 80015c4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c6:	4952      	ldr	r1, [pc, #328]	; (8001710 <HAL_RCC_GetSysClockFreq+0x160>)
 80015c8:	6889      	ldr	r1, [r1, #8]
 80015ca:	f001 010c 	and.w	r1, r1, #12
 80015ce:	2908      	cmp	r1, #8
 80015d0:	d00d      	beq.n	80015ee <HAL_RCC_GetSysClockFreq+0x3e>
 80015d2:	2908      	cmp	r1, #8
 80015d4:	f200 8094 	bhi.w	8001700 <HAL_RCC_GetSysClockFreq+0x150>
 80015d8:	2900      	cmp	r1, #0
 80015da:	d002      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0x32>
 80015dc:	2904      	cmp	r1, #4
 80015de:	d003      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x38>
 80015e0:	e08e      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e2:	4b4c      	ldr	r3, [pc, #304]	; (8001714 <HAL_RCC_GetSysClockFreq+0x164>)
 80015e4:	60bb      	str	r3, [r7, #8]
       break;
 80015e6:	e08e      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015e8:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <HAL_RCC_GetSysClockFreq+0x168>)
 80015ea:	60bb      	str	r3, [r7, #8]
      break;
 80015ec:	e08b      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ee:	4948      	ldr	r1, [pc, #288]	; (8001710 <HAL_RCC_GetSysClockFreq+0x160>)
 80015f0:	6849      	ldr	r1, [r1, #4]
 80015f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80015f6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f8:	4945      	ldr	r1, [pc, #276]	; (8001710 <HAL_RCC_GetSysClockFreq+0x160>)
 80015fa:	6849      	ldr	r1, [r1, #4]
 80015fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001600:	2900      	cmp	r1, #0
 8001602:	d024      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4942      	ldr	r1, [pc, #264]	; (8001710 <HAL_RCC_GetSysClockFreq+0x160>)
 8001606:	6849      	ldr	r1, [r1, #4]
 8001608:	0989      	lsrs	r1, r1, #6
 800160a:	4608      	mov	r0, r1
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001614:	f04f 0500 	mov.w	r5, #0
 8001618:	ea00 0204 	and.w	r2, r0, r4
 800161c:	ea01 0305 	and.w	r3, r1, r5
 8001620:	493d      	ldr	r1, [pc, #244]	; (8001718 <HAL_RCC_GetSysClockFreq+0x168>)
 8001622:	fb01 f003 	mul.w	r0, r1, r3
 8001626:	2100      	movs	r1, #0
 8001628:	fb01 f102 	mul.w	r1, r1, r2
 800162c:	1844      	adds	r4, r0, r1
 800162e:	493a      	ldr	r1, [pc, #232]	; (8001718 <HAL_RCC_GetSysClockFreq+0x168>)
 8001630:	fba2 0101 	umull	r0, r1, r2, r1
 8001634:	1863      	adds	r3, r4, r1
 8001636:	4619      	mov	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	f7fe fe26 	bl	8000290 <__aeabi_uldivmod>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4613      	mov	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e04a      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_RCC_GetSysClockFreq+0x160>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	461a      	mov	r2, r3
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	ea02 0400 	and.w	r4, r2, r0
 8001666:	ea03 0501 	and.w	r5, r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	014b      	lsls	r3, r1, #5
 8001678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800167c:	0142      	lsls	r2, r0, #5
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	1b00      	subs	r0, r0, r4
 8001684:	eb61 0105 	sbc.w	r1, r1, r5
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	018b      	lsls	r3, r1, #6
 8001692:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001696:	0182      	lsls	r2, r0, #6
 8001698:	1a12      	subs	r2, r2, r0
 800169a:	eb63 0301 	sbc.w	r3, r3, r1
 800169e:	f04f 0000 	mov.w	r0, #0
 80016a2:	f04f 0100 	mov.w	r1, #0
 80016a6:	00d9      	lsls	r1, r3, #3
 80016a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016ac:	00d0      	lsls	r0, r2, #3
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	1912      	adds	r2, r2, r4
 80016b4:	eb45 0303 	adc.w	r3, r5, r3
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	0299      	lsls	r1, r3, #10
 80016c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016c6:	0290      	lsls	r0, r2, #10
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	f7fe fdda 	bl	8000290 <__aeabi_uldivmod>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4613      	mov	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_RCC_GetSysClockFreq+0x160>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	3301      	adds	r3, #1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	60bb      	str	r3, [r7, #8]
      break;
 80016fe:	e002      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <HAL_RCC_GetSysClockFreq+0x164>)
 8001702:	60bb      	str	r3, [r7, #8]
      break;
 8001704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001706:	68bb      	ldr	r3, [r7, #8]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bdb0      	pop	{r4, r5, r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	00f42400 	.word	0x00f42400
 8001718:	017d7840 	.word	0x017d7840

0800171c <__errno>:
 800171c:	4b01      	ldr	r3, [pc, #4]	; (8001724 <__errno+0x8>)
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2000040c 	.word	0x2000040c

08001728 <__libc_init_array>:
 8001728:	b570      	push	{r4, r5, r6, lr}
 800172a:	4d0d      	ldr	r5, [pc, #52]	; (8001760 <__libc_init_array+0x38>)
 800172c:	4c0d      	ldr	r4, [pc, #52]	; (8001764 <__libc_init_array+0x3c>)
 800172e:	1b64      	subs	r4, r4, r5
 8001730:	10a4      	asrs	r4, r4, #2
 8001732:	2600      	movs	r6, #0
 8001734:	42a6      	cmp	r6, r4
 8001736:	d109      	bne.n	800174c <__libc_init_array+0x24>
 8001738:	4d0b      	ldr	r5, [pc, #44]	; (8001768 <__libc_init_array+0x40>)
 800173a:	4c0c      	ldr	r4, [pc, #48]	; (800176c <__libc_init_array+0x44>)
 800173c:	f000 fc66 	bl	800200c <_init>
 8001740:	1b64      	subs	r4, r4, r5
 8001742:	10a4      	asrs	r4, r4, #2
 8001744:	2600      	movs	r6, #0
 8001746:	42a6      	cmp	r6, r4
 8001748:	d105      	bne.n	8001756 <__libc_init_array+0x2e>
 800174a:	bd70      	pop	{r4, r5, r6, pc}
 800174c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001750:	4798      	blx	r3
 8001752:	3601      	adds	r6, #1
 8001754:	e7ee      	b.n	8001734 <__libc_init_array+0xc>
 8001756:	f855 3b04 	ldr.w	r3, [r5], #4
 800175a:	4798      	blx	r3
 800175c:	3601      	adds	r6, #1
 800175e:	e7f2      	b.n	8001746 <__libc_init_array+0x1e>
 8001760:	080020dc 	.word	0x080020dc
 8001764:	080020dc 	.word	0x080020dc
 8001768:	080020dc 	.word	0x080020dc
 800176c:	080020e0 	.word	0x080020e0

08001770 <memset>:
 8001770:	4402      	add	r2, r0
 8001772:	4603      	mov	r3, r0
 8001774:	4293      	cmp	r3, r2
 8001776:	d100      	bne.n	800177a <memset+0xa>
 8001778:	4770      	bx	lr
 800177a:	f803 1b01 	strb.w	r1, [r3], #1
 800177e:	e7f9      	b.n	8001774 <memset+0x4>

08001780 <strstr>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	780c      	ldrb	r4, [r1, #0]
 8001784:	b164      	cbz	r4, 80017a0 <strstr+0x20>
 8001786:	4603      	mov	r3, r0
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	1c5e      	adds	r6, r3, #1
 800178e:	b90a      	cbnz	r2, 8001794 <strstr+0x14>
 8001790:	4610      	mov	r0, r2
 8001792:	e005      	b.n	80017a0 <strstr+0x20>
 8001794:	4294      	cmp	r4, r2
 8001796:	d108      	bne.n	80017aa <strstr+0x2a>
 8001798:	460d      	mov	r5, r1
 800179a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800179e:	b902      	cbnz	r2, 80017a2 <strstr+0x22>
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80017a6:	4297      	cmp	r7, r2
 80017a8:	d0f7      	beq.n	800179a <strstr+0x1a>
 80017aa:	4633      	mov	r3, r6
 80017ac:	e7ec      	b.n	8001788 <strstr+0x8>
	...

080017b0 <_vsiprintf_r>:
 80017b0:	b500      	push	{lr}
 80017b2:	b09b      	sub	sp, #108	; 0x6c
 80017b4:	9100      	str	r1, [sp, #0]
 80017b6:	9104      	str	r1, [sp, #16]
 80017b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80017bc:	9105      	str	r1, [sp, #20]
 80017be:	9102      	str	r1, [sp, #8]
 80017c0:	4905      	ldr	r1, [pc, #20]	; (80017d8 <_vsiprintf_r+0x28>)
 80017c2:	9103      	str	r1, [sp, #12]
 80017c4:	4669      	mov	r1, sp
 80017c6:	f000 f86f 	bl	80018a8 <_svfiprintf_r>
 80017ca:	9b00      	ldr	r3, [sp, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	b01b      	add	sp, #108	; 0x6c
 80017d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80017d6:	bf00      	nop
 80017d8:	ffff0208 	.word	0xffff0208

080017dc <vsiprintf>:
 80017dc:	4613      	mov	r3, r2
 80017de:	460a      	mov	r2, r1
 80017e0:	4601      	mov	r1, r0
 80017e2:	4802      	ldr	r0, [pc, #8]	; (80017ec <vsiprintf+0x10>)
 80017e4:	6800      	ldr	r0, [r0, #0]
 80017e6:	f7ff bfe3 	b.w	80017b0 <_vsiprintf_r>
 80017ea:	bf00      	nop
 80017ec:	2000040c 	.word	0x2000040c

080017f0 <__ssputs_r>:
 80017f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017f4:	688e      	ldr	r6, [r1, #8]
 80017f6:	429e      	cmp	r6, r3
 80017f8:	4682      	mov	sl, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	4690      	mov	r8, r2
 80017fe:	461f      	mov	r7, r3
 8001800:	d838      	bhi.n	8001874 <__ssputs_r+0x84>
 8001802:	898a      	ldrh	r2, [r1, #12]
 8001804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001808:	d032      	beq.n	8001870 <__ssputs_r+0x80>
 800180a:	6825      	ldr	r5, [r4, #0]
 800180c:	6909      	ldr	r1, [r1, #16]
 800180e:	eba5 0901 	sub.w	r9, r5, r1
 8001812:	6965      	ldr	r5, [r4, #20]
 8001814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800181c:	3301      	adds	r3, #1
 800181e:	444b      	add	r3, r9
 8001820:	106d      	asrs	r5, r5, #1
 8001822:	429d      	cmp	r5, r3
 8001824:	bf38      	it	cc
 8001826:	461d      	movcc	r5, r3
 8001828:	0553      	lsls	r3, r2, #21
 800182a:	d531      	bpl.n	8001890 <__ssputs_r+0xa0>
 800182c:	4629      	mov	r1, r5
 800182e:	f000 fb47 	bl	8001ec0 <_malloc_r>
 8001832:	4606      	mov	r6, r0
 8001834:	b950      	cbnz	r0, 800184c <__ssputs_r+0x5c>
 8001836:	230c      	movs	r3, #12
 8001838:	f8ca 3000 	str.w	r3, [sl]
 800183c:	89a3      	ldrh	r3, [r4, #12]
 800183e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001842:	81a3      	strh	r3, [r4, #12]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800184c:	6921      	ldr	r1, [r4, #16]
 800184e:	464a      	mov	r2, r9
 8001850:	f000 fabe 	bl	8001dd0 <memcpy>
 8001854:	89a3      	ldrh	r3, [r4, #12]
 8001856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800185a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185e:	81a3      	strh	r3, [r4, #12]
 8001860:	6126      	str	r6, [r4, #16]
 8001862:	6165      	str	r5, [r4, #20]
 8001864:	444e      	add	r6, r9
 8001866:	eba5 0509 	sub.w	r5, r5, r9
 800186a:	6026      	str	r6, [r4, #0]
 800186c:	60a5      	str	r5, [r4, #8]
 800186e:	463e      	mov	r6, r7
 8001870:	42be      	cmp	r6, r7
 8001872:	d900      	bls.n	8001876 <__ssputs_r+0x86>
 8001874:	463e      	mov	r6, r7
 8001876:	4632      	mov	r2, r6
 8001878:	6820      	ldr	r0, [r4, #0]
 800187a:	4641      	mov	r1, r8
 800187c:	f000 fab6 	bl	8001dec <memmove>
 8001880:	68a3      	ldr	r3, [r4, #8]
 8001882:	6822      	ldr	r2, [r4, #0]
 8001884:	1b9b      	subs	r3, r3, r6
 8001886:	4432      	add	r2, r6
 8001888:	60a3      	str	r3, [r4, #8]
 800188a:	6022      	str	r2, [r4, #0]
 800188c:	2000      	movs	r0, #0
 800188e:	e7db      	b.n	8001848 <__ssputs_r+0x58>
 8001890:	462a      	mov	r2, r5
 8001892:	f000 fb6f 	bl	8001f74 <_realloc_r>
 8001896:	4606      	mov	r6, r0
 8001898:	2800      	cmp	r0, #0
 800189a:	d1e1      	bne.n	8001860 <__ssputs_r+0x70>
 800189c:	6921      	ldr	r1, [r4, #16]
 800189e:	4650      	mov	r0, sl
 80018a0:	f000 fabe 	bl	8001e20 <_free_r>
 80018a4:	e7c7      	b.n	8001836 <__ssputs_r+0x46>
	...

080018a8 <_svfiprintf_r>:
 80018a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ac:	4698      	mov	r8, r3
 80018ae:	898b      	ldrh	r3, [r1, #12]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	b09d      	sub	sp, #116	; 0x74
 80018b4:	4607      	mov	r7, r0
 80018b6:	460d      	mov	r5, r1
 80018b8:	4614      	mov	r4, r2
 80018ba:	d50e      	bpl.n	80018da <_svfiprintf_r+0x32>
 80018bc:	690b      	ldr	r3, [r1, #16]
 80018be:	b963      	cbnz	r3, 80018da <_svfiprintf_r+0x32>
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	f000 fafd 	bl	8001ec0 <_malloc_r>
 80018c6:	6028      	str	r0, [r5, #0]
 80018c8:	6128      	str	r0, [r5, #16]
 80018ca:	b920      	cbnz	r0, 80018d6 <_svfiprintf_r+0x2e>
 80018cc:	230c      	movs	r3, #12
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	e0d1      	b.n	8001a7a <_svfiprintf_r+0x1d2>
 80018d6:	2340      	movs	r3, #64	; 0x40
 80018d8:	616b      	str	r3, [r5, #20]
 80018da:	2300      	movs	r3, #0
 80018dc:	9309      	str	r3, [sp, #36]	; 0x24
 80018de:	2320      	movs	r3, #32
 80018e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80018e8:	2330      	movs	r3, #48	; 0x30
 80018ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001a94 <_svfiprintf_r+0x1ec>
 80018ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018f2:	f04f 0901 	mov.w	r9, #1
 80018f6:	4623      	mov	r3, r4
 80018f8:	469a      	mov	sl, r3
 80018fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018fe:	b10a      	cbz	r2, 8001904 <_svfiprintf_r+0x5c>
 8001900:	2a25      	cmp	r2, #37	; 0x25
 8001902:	d1f9      	bne.n	80018f8 <_svfiprintf_r+0x50>
 8001904:	ebba 0b04 	subs.w	fp, sl, r4
 8001908:	d00b      	beq.n	8001922 <_svfiprintf_r+0x7a>
 800190a:	465b      	mov	r3, fp
 800190c:	4622      	mov	r2, r4
 800190e:	4629      	mov	r1, r5
 8001910:	4638      	mov	r0, r7
 8001912:	f7ff ff6d 	bl	80017f0 <__ssputs_r>
 8001916:	3001      	adds	r0, #1
 8001918:	f000 80aa 	beq.w	8001a70 <_svfiprintf_r+0x1c8>
 800191c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800191e:	445a      	add	r2, fp
 8001920:	9209      	str	r2, [sp, #36]	; 0x24
 8001922:	f89a 3000 	ldrb.w	r3, [sl]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a2 	beq.w	8001a70 <_svfiprintf_r+0x1c8>
 800192c:	2300      	movs	r3, #0
 800192e:	f04f 32ff 	mov.w	r2, #4294967295
 8001932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001936:	f10a 0a01 	add.w	sl, sl, #1
 800193a:	9304      	str	r3, [sp, #16]
 800193c:	9307      	str	r3, [sp, #28]
 800193e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001942:	931a      	str	r3, [sp, #104]	; 0x68
 8001944:	4654      	mov	r4, sl
 8001946:	2205      	movs	r2, #5
 8001948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800194c:	4851      	ldr	r0, [pc, #324]	; (8001a94 <_svfiprintf_r+0x1ec>)
 800194e:	f7fe fc4f 	bl	80001f0 <memchr>
 8001952:	9a04      	ldr	r2, [sp, #16]
 8001954:	b9d8      	cbnz	r0, 800198e <_svfiprintf_r+0xe6>
 8001956:	06d0      	lsls	r0, r2, #27
 8001958:	bf44      	itt	mi
 800195a:	2320      	movmi	r3, #32
 800195c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001960:	0711      	lsls	r1, r2, #28
 8001962:	bf44      	itt	mi
 8001964:	232b      	movmi	r3, #43	; 0x2b
 8001966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800196a:	f89a 3000 	ldrb.w	r3, [sl]
 800196e:	2b2a      	cmp	r3, #42	; 0x2a
 8001970:	d015      	beq.n	800199e <_svfiprintf_r+0xf6>
 8001972:	9a07      	ldr	r2, [sp, #28]
 8001974:	4654      	mov	r4, sl
 8001976:	2000      	movs	r0, #0
 8001978:	f04f 0c0a 	mov.w	ip, #10
 800197c:	4621      	mov	r1, r4
 800197e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001982:	3b30      	subs	r3, #48	; 0x30
 8001984:	2b09      	cmp	r3, #9
 8001986:	d94e      	bls.n	8001a26 <_svfiprintf_r+0x17e>
 8001988:	b1b0      	cbz	r0, 80019b8 <_svfiprintf_r+0x110>
 800198a:	9207      	str	r2, [sp, #28]
 800198c:	e014      	b.n	80019b8 <_svfiprintf_r+0x110>
 800198e:	eba0 0308 	sub.w	r3, r0, r8
 8001992:	fa09 f303 	lsl.w	r3, r9, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	9304      	str	r3, [sp, #16]
 800199a:	46a2      	mov	sl, r4
 800199c:	e7d2      	b.n	8001944 <_svfiprintf_r+0x9c>
 800199e:	9b03      	ldr	r3, [sp, #12]
 80019a0:	1d19      	adds	r1, r3, #4
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	9103      	str	r1, [sp, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bfbb      	ittet	lt
 80019aa:	425b      	neglt	r3, r3
 80019ac:	f042 0202 	orrlt.w	r2, r2, #2
 80019b0:	9307      	strge	r3, [sp, #28]
 80019b2:	9307      	strlt	r3, [sp, #28]
 80019b4:	bfb8      	it	lt
 80019b6:	9204      	strlt	r2, [sp, #16]
 80019b8:	7823      	ldrb	r3, [r4, #0]
 80019ba:	2b2e      	cmp	r3, #46	; 0x2e
 80019bc:	d10c      	bne.n	80019d8 <_svfiprintf_r+0x130>
 80019be:	7863      	ldrb	r3, [r4, #1]
 80019c0:	2b2a      	cmp	r3, #42	; 0x2a
 80019c2:	d135      	bne.n	8001a30 <_svfiprintf_r+0x188>
 80019c4:	9b03      	ldr	r3, [sp, #12]
 80019c6:	1d1a      	adds	r2, r3, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	9203      	str	r2, [sp, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bfb8      	it	lt
 80019d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80019d4:	3402      	adds	r4, #2
 80019d6:	9305      	str	r3, [sp, #20]
 80019d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001aa4 <_svfiprintf_r+0x1fc>
 80019dc:	7821      	ldrb	r1, [r4, #0]
 80019de:	2203      	movs	r2, #3
 80019e0:	4650      	mov	r0, sl
 80019e2:	f7fe fc05 	bl	80001f0 <memchr>
 80019e6:	b140      	cbz	r0, 80019fa <_svfiprintf_r+0x152>
 80019e8:	2340      	movs	r3, #64	; 0x40
 80019ea:	eba0 000a 	sub.w	r0, r0, sl
 80019ee:	fa03 f000 	lsl.w	r0, r3, r0
 80019f2:	9b04      	ldr	r3, [sp, #16]
 80019f4:	4303      	orrs	r3, r0
 80019f6:	3401      	adds	r4, #1
 80019f8:	9304      	str	r3, [sp, #16]
 80019fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <_svfiprintf_r+0x1f0>)
 8001a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a04:	2206      	movs	r2, #6
 8001a06:	f7fe fbf3 	bl	80001f0 <memchr>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	d038      	beq.n	8001a80 <_svfiprintf_r+0x1d8>
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <_svfiprintf_r+0x1f4>)
 8001a10:	bb1b      	cbnz	r3, 8001a5a <_svfiprintf_r+0x1b2>
 8001a12:	9b03      	ldr	r3, [sp, #12]
 8001a14:	3307      	adds	r3, #7
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	9303      	str	r3, [sp, #12]
 8001a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a20:	4433      	add	r3, r6
 8001a22:	9309      	str	r3, [sp, #36]	; 0x24
 8001a24:	e767      	b.n	80018f6 <_svfiprintf_r+0x4e>
 8001a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	e7a5      	b.n	800197c <_svfiprintf_r+0xd4>
 8001a30:	2300      	movs	r3, #0
 8001a32:	3401      	adds	r4, #1
 8001a34:	9305      	str	r3, [sp, #20]
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 0c0a 	mov.w	ip, #10
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a42:	3a30      	subs	r2, #48	; 0x30
 8001a44:	2a09      	cmp	r2, #9
 8001a46:	d903      	bls.n	8001a50 <_svfiprintf_r+0x1a8>
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0c5      	beq.n	80019d8 <_svfiprintf_r+0x130>
 8001a4c:	9105      	str	r1, [sp, #20]
 8001a4e:	e7c3      	b.n	80019d8 <_svfiprintf_r+0x130>
 8001a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a54:	4604      	mov	r4, r0
 8001a56:	2301      	movs	r3, #1
 8001a58:	e7f0      	b.n	8001a3c <_svfiprintf_r+0x194>
 8001a5a:	ab03      	add	r3, sp, #12
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	462a      	mov	r2, r5
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <_svfiprintf_r+0x1f8>)
 8001a62:	a904      	add	r1, sp, #16
 8001a64:	4638      	mov	r0, r7
 8001a66:	f3af 8000 	nop.w
 8001a6a:	1c42      	adds	r2, r0, #1
 8001a6c:	4606      	mov	r6, r0
 8001a6e:	d1d6      	bne.n	8001a1e <_svfiprintf_r+0x176>
 8001a70:	89ab      	ldrh	r3, [r5, #12]
 8001a72:	065b      	lsls	r3, r3, #25
 8001a74:	f53f af2c 	bmi.w	80018d0 <_svfiprintf_r+0x28>
 8001a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a7a:	b01d      	add	sp, #116	; 0x74
 8001a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a80:	ab03      	add	r3, sp, #12
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	462a      	mov	r2, r5
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <_svfiprintf_r+0x1f8>)
 8001a88:	a904      	add	r1, sp, #16
 8001a8a:	4638      	mov	r0, r7
 8001a8c:	f000 f87a 	bl	8001b84 <_printf_i>
 8001a90:	e7eb      	b.n	8001a6a <_svfiprintf_r+0x1c2>
 8001a92:	bf00      	nop
 8001a94:	080020a0 	.word	0x080020a0
 8001a98:	080020aa 	.word	0x080020aa
 8001a9c:	00000000 	.word	0x00000000
 8001aa0:	080017f1 	.word	0x080017f1
 8001aa4:	080020a6 	.word	0x080020a6

08001aa8 <_printf_common>:
 8001aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aac:	4616      	mov	r6, r2
 8001aae:	4699      	mov	r9, r3
 8001ab0:	688a      	ldr	r2, [r1, #8]
 8001ab2:	690b      	ldr	r3, [r1, #16]
 8001ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	bfb8      	it	lt
 8001abc:	4613      	movlt	r3, r2
 8001abe:	6033      	str	r3, [r6, #0]
 8001ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ac4:	4607      	mov	r7, r0
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	b10a      	cbz	r2, 8001ace <_printf_common+0x26>
 8001aca:	3301      	adds	r3, #1
 8001acc:	6033      	str	r3, [r6, #0]
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	0699      	lsls	r1, r3, #26
 8001ad2:	bf42      	ittt	mi
 8001ad4:	6833      	ldrmi	r3, [r6, #0]
 8001ad6:	3302      	addmi	r3, #2
 8001ad8:	6033      	strmi	r3, [r6, #0]
 8001ada:	6825      	ldr	r5, [r4, #0]
 8001adc:	f015 0506 	ands.w	r5, r5, #6
 8001ae0:	d106      	bne.n	8001af0 <_printf_common+0x48>
 8001ae2:	f104 0a19 	add.w	sl, r4, #25
 8001ae6:	68e3      	ldr	r3, [r4, #12]
 8001ae8:	6832      	ldr	r2, [r6, #0]
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	42ab      	cmp	r3, r5
 8001aee:	dc26      	bgt.n	8001b3e <_printf_common+0x96>
 8001af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001af4:	1e13      	subs	r3, r2, #0
 8001af6:	6822      	ldr	r2, [r4, #0]
 8001af8:	bf18      	it	ne
 8001afa:	2301      	movne	r3, #1
 8001afc:	0692      	lsls	r2, r2, #26
 8001afe:	d42b      	bmi.n	8001b58 <_printf_common+0xb0>
 8001b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b04:	4649      	mov	r1, r9
 8001b06:	4638      	mov	r0, r7
 8001b08:	47c0      	blx	r8
 8001b0a:	3001      	adds	r0, #1
 8001b0c:	d01e      	beq.n	8001b4c <_printf_common+0xa4>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	68e5      	ldr	r5, [r4, #12]
 8001b12:	6832      	ldr	r2, [r6, #0]
 8001b14:	f003 0306 	and.w	r3, r3, #6
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	bf08      	it	eq
 8001b1c:	1aad      	subeq	r5, r5, r2
 8001b1e:	68a3      	ldr	r3, [r4, #8]
 8001b20:	6922      	ldr	r2, [r4, #16]
 8001b22:	bf0c      	ite	eq
 8001b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b28:	2500      	movne	r5, #0
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	bfc4      	itt	gt
 8001b2e:	1a9b      	subgt	r3, r3, r2
 8001b30:	18ed      	addgt	r5, r5, r3
 8001b32:	2600      	movs	r6, #0
 8001b34:	341a      	adds	r4, #26
 8001b36:	42b5      	cmp	r5, r6
 8001b38:	d11a      	bne.n	8001b70 <_printf_common+0xc8>
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	e008      	b.n	8001b50 <_printf_common+0xa8>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	4652      	mov	r2, sl
 8001b42:	4649      	mov	r1, r9
 8001b44:	4638      	mov	r0, r7
 8001b46:	47c0      	blx	r8
 8001b48:	3001      	adds	r0, #1
 8001b4a:	d103      	bne.n	8001b54 <_printf_common+0xac>
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b54:	3501      	adds	r5, #1
 8001b56:	e7c6      	b.n	8001ae6 <_printf_common+0x3e>
 8001b58:	18e1      	adds	r1, r4, r3
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	2030      	movs	r0, #48	; 0x30
 8001b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b62:	4422      	add	r2, r4
 8001b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	e7c7      	b.n	8001b00 <_printf_common+0x58>
 8001b70:	2301      	movs	r3, #1
 8001b72:	4622      	mov	r2, r4
 8001b74:	4649      	mov	r1, r9
 8001b76:	4638      	mov	r0, r7
 8001b78:	47c0      	blx	r8
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	d0e6      	beq.n	8001b4c <_printf_common+0xa4>
 8001b7e:	3601      	adds	r6, #1
 8001b80:	e7d9      	b.n	8001b36 <_printf_common+0x8e>
	...

08001b84 <_printf_i>:
 8001b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b88:	460c      	mov	r4, r1
 8001b8a:	4691      	mov	r9, r2
 8001b8c:	7e27      	ldrb	r7, [r4, #24]
 8001b8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b90:	2f78      	cmp	r7, #120	; 0x78
 8001b92:	4680      	mov	r8, r0
 8001b94:	469a      	mov	sl, r3
 8001b96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b9a:	d807      	bhi.n	8001bac <_printf_i+0x28>
 8001b9c:	2f62      	cmp	r7, #98	; 0x62
 8001b9e:	d80a      	bhi.n	8001bb6 <_printf_i+0x32>
 8001ba0:	2f00      	cmp	r7, #0
 8001ba2:	f000 80d8 	beq.w	8001d56 <_printf_i+0x1d2>
 8001ba6:	2f58      	cmp	r7, #88	; 0x58
 8001ba8:	f000 80a3 	beq.w	8001cf2 <_printf_i+0x16e>
 8001bac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001bb4:	e03a      	b.n	8001c2c <_printf_i+0xa8>
 8001bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001bba:	2b15      	cmp	r3, #21
 8001bbc:	d8f6      	bhi.n	8001bac <_printf_i+0x28>
 8001bbe:	a001      	add	r0, pc, #4	; (adr r0, 8001bc4 <_printf_i+0x40>)
 8001bc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001bc4:	08001c1d 	.word	0x08001c1d
 8001bc8:	08001c31 	.word	0x08001c31
 8001bcc:	08001bad 	.word	0x08001bad
 8001bd0:	08001bad 	.word	0x08001bad
 8001bd4:	08001bad 	.word	0x08001bad
 8001bd8:	08001bad 	.word	0x08001bad
 8001bdc:	08001c31 	.word	0x08001c31
 8001be0:	08001bad 	.word	0x08001bad
 8001be4:	08001bad 	.word	0x08001bad
 8001be8:	08001bad 	.word	0x08001bad
 8001bec:	08001bad 	.word	0x08001bad
 8001bf0:	08001d3d 	.word	0x08001d3d
 8001bf4:	08001c61 	.word	0x08001c61
 8001bf8:	08001d1f 	.word	0x08001d1f
 8001bfc:	08001bad 	.word	0x08001bad
 8001c00:	08001bad 	.word	0x08001bad
 8001c04:	08001d5f 	.word	0x08001d5f
 8001c08:	08001bad 	.word	0x08001bad
 8001c0c:	08001c61 	.word	0x08001c61
 8001c10:	08001bad 	.word	0x08001bad
 8001c14:	08001bad 	.word	0x08001bad
 8001c18:	08001d27 	.word	0x08001d27
 8001c1c:	680b      	ldr	r3, [r1, #0]
 8001c1e:	1d1a      	adds	r2, r3, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	600a      	str	r2, [r1, #0]
 8001c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0a3      	b.n	8001d78 <_printf_i+0x1f4>
 8001c30:	6825      	ldr	r5, [r4, #0]
 8001c32:	6808      	ldr	r0, [r1, #0]
 8001c34:	062e      	lsls	r6, r5, #24
 8001c36:	f100 0304 	add.w	r3, r0, #4
 8001c3a:	d50a      	bpl.n	8001c52 <_printf_i+0xce>
 8001c3c:	6805      	ldr	r5, [r0, #0]
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	da03      	bge.n	8001c4c <_printf_i+0xc8>
 8001c44:	232d      	movs	r3, #45	; 0x2d
 8001c46:	426d      	negs	r5, r5
 8001c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c4c:	485e      	ldr	r0, [pc, #376]	; (8001dc8 <_printf_i+0x244>)
 8001c4e:	230a      	movs	r3, #10
 8001c50:	e019      	b.n	8001c86 <_printf_i+0x102>
 8001c52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001c56:	6805      	ldr	r5, [r0, #0]
 8001c58:	600b      	str	r3, [r1, #0]
 8001c5a:	bf18      	it	ne
 8001c5c:	b22d      	sxthne	r5, r5
 8001c5e:	e7ef      	b.n	8001c40 <_printf_i+0xbc>
 8001c60:	680b      	ldr	r3, [r1, #0]
 8001c62:	6825      	ldr	r5, [r4, #0]
 8001c64:	1d18      	adds	r0, r3, #4
 8001c66:	6008      	str	r0, [r1, #0]
 8001c68:	0628      	lsls	r0, r5, #24
 8001c6a:	d501      	bpl.n	8001c70 <_printf_i+0xec>
 8001c6c:	681d      	ldr	r5, [r3, #0]
 8001c6e:	e002      	b.n	8001c76 <_printf_i+0xf2>
 8001c70:	0669      	lsls	r1, r5, #25
 8001c72:	d5fb      	bpl.n	8001c6c <_printf_i+0xe8>
 8001c74:	881d      	ldrh	r5, [r3, #0]
 8001c76:	4854      	ldr	r0, [pc, #336]	; (8001dc8 <_printf_i+0x244>)
 8001c78:	2f6f      	cmp	r7, #111	; 0x6f
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2308      	moveq	r3, #8
 8001c7e:	230a      	movne	r3, #10
 8001c80:	2100      	movs	r1, #0
 8001c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c86:	6866      	ldr	r6, [r4, #4]
 8001c88:	60a6      	str	r6, [r4, #8]
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	bfa2      	ittt	ge
 8001c8e:	6821      	ldrge	r1, [r4, #0]
 8001c90:	f021 0104 	bicge.w	r1, r1, #4
 8001c94:	6021      	strge	r1, [r4, #0]
 8001c96:	b90d      	cbnz	r5, 8001c9c <_printf_i+0x118>
 8001c98:	2e00      	cmp	r6, #0
 8001c9a:	d04d      	beq.n	8001d38 <_printf_i+0x1b4>
 8001c9c:	4616      	mov	r6, r2
 8001c9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ca2:	fb03 5711 	mls	r7, r3, r1, r5
 8001ca6:	5dc7      	ldrb	r7, [r0, r7]
 8001ca8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001cac:	462f      	mov	r7, r5
 8001cae:	42bb      	cmp	r3, r7
 8001cb0:	460d      	mov	r5, r1
 8001cb2:	d9f4      	bls.n	8001c9e <_printf_i+0x11a>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d10b      	bne.n	8001cd0 <_printf_i+0x14c>
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	07df      	lsls	r7, r3, #31
 8001cbc:	d508      	bpl.n	8001cd0 <_printf_i+0x14c>
 8001cbe:	6923      	ldr	r3, [r4, #16]
 8001cc0:	6861      	ldr	r1, [r4, #4]
 8001cc2:	4299      	cmp	r1, r3
 8001cc4:	bfde      	ittt	le
 8001cc6:	2330      	movle	r3, #48	; 0x30
 8001cc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ccc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001cd0:	1b92      	subs	r2, r2, r6
 8001cd2:	6122      	str	r2, [r4, #16]
 8001cd4:	f8cd a000 	str.w	sl, [sp]
 8001cd8:	464b      	mov	r3, r9
 8001cda:	aa03      	add	r2, sp, #12
 8001cdc:	4621      	mov	r1, r4
 8001cde:	4640      	mov	r0, r8
 8001ce0:	f7ff fee2 	bl	8001aa8 <_printf_common>
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	d14c      	bne.n	8001d82 <_printf_i+0x1fe>
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	b004      	add	sp, #16
 8001cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cf2:	4835      	ldr	r0, [pc, #212]	; (8001dc8 <_printf_i+0x244>)
 8001cf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	680e      	ldr	r6, [r1, #0]
 8001cfc:	061f      	lsls	r7, r3, #24
 8001cfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8001d02:	600e      	str	r6, [r1, #0]
 8001d04:	d514      	bpl.n	8001d30 <_printf_i+0x1ac>
 8001d06:	07d9      	lsls	r1, r3, #31
 8001d08:	bf44      	itt	mi
 8001d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8001d0e:	6023      	strmi	r3, [r4, #0]
 8001d10:	b91d      	cbnz	r5, 8001d1a <_printf_i+0x196>
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	f023 0320 	bic.w	r3, r3, #32
 8001d18:	6023      	str	r3, [r4, #0]
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	e7b0      	b.n	8001c80 <_printf_i+0xfc>
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	f043 0320 	orr.w	r3, r3, #32
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	2378      	movs	r3, #120	; 0x78
 8001d28:	4828      	ldr	r0, [pc, #160]	; (8001dcc <_printf_i+0x248>)
 8001d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d2e:	e7e3      	b.n	8001cf8 <_printf_i+0x174>
 8001d30:	065e      	lsls	r6, r3, #25
 8001d32:	bf48      	it	mi
 8001d34:	b2ad      	uxthmi	r5, r5
 8001d36:	e7e6      	b.n	8001d06 <_printf_i+0x182>
 8001d38:	4616      	mov	r6, r2
 8001d3a:	e7bb      	b.n	8001cb4 <_printf_i+0x130>
 8001d3c:	680b      	ldr	r3, [r1, #0]
 8001d3e:	6826      	ldr	r6, [r4, #0]
 8001d40:	6960      	ldr	r0, [r4, #20]
 8001d42:	1d1d      	adds	r5, r3, #4
 8001d44:	600d      	str	r5, [r1, #0]
 8001d46:	0635      	lsls	r5, r6, #24
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	d501      	bpl.n	8001d50 <_printf_i+0x1cc>
 8001d4c:	6018      	str	r0, [r3, #0]
 8001d4e:	e002      	b.n	8001d56 <_printf_i+0x1d2>
 8001d50:	0671      	lsls	r1, r6, #25
 8001d52:	d5fb      	bpl.n	8001d4c <_printf_i+0x1c8>
 8001d54:	8018      	strh	r0, [r3, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	6123      	str	r3, [r4, #16]
 8001d5a:	4616      	mov	r6, r2
 8001d5c:	e7ba      	b.n	8001cd4 <_printf_i+0x150>
 8001d5e:	680b      	ldr	r3, [r1, #0]
 8001d60:	1d1a      	adds	r2, r3, #4
 8001d62:	600a      	str	r2, [r1, #0]
 8001d64:	681e      	ldr	r6, [r3, #0]
 8001d66:	6862      	ldr	r2, [r4, #4]
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f7fe fa40 	bl	80001f0 <memchr>
 8001d70:	b108      	cbz	r0, 8001d76 <_printf_i+0x1f2>
 8001d72:	1b80      	subs	r0, r0, r6
 8001d74:	6060      	str	r0, [r4, #4]
 8001d76:	6863      	ldr	r3, [r4, #4]
 8001d78:	6123      	str	r3, [r4, #16]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d80:	e7a8      	b.n	8001cd4 <_printf_i+0x150>
 8001d82:	6923      	ldr	r3, [r4, #16]
 8001d84:	4632      	mov	r2, r6
 8001d86:	4649      	mov	r1, r9
 8001d88:	4640      	mov	r0, r8
 8001d8a:	47d0      	blx	sl
 8001d8c:	3001      	adds	r0, #1
 8001d8e:	d0ab      	beq.n	8001ce8 <_printf_i+0x164>
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	079b      	lsls	r3, r3, #30
 8001d94:	d413      	bmi.n	8001dbe <_printf_i+0x23a>
 8001d96:	68e0      	ldr	r0, [r4, #12]
 8001d98:	9b03      	ldr	r3, [sp, #12]
 8001d9a:	4298      	cmp	r0, r3
 8001d9c:	bfb8      	it	lt
 8001d9e:	4618      	movlt	r0, r3
 8001da0:	e7a4      	b.n	8001cec <_printf_i+0x168>
 8001da2:	2301      	movs	r3, #1
 8001da4:	4632      	mov	r2, r6
 8001da6:	4649      	mov	r1, r9
 8001da8:	4640      	mov	r0, r8
 8001daa:	47d0      	blx	sl
 8001dac:	3001      	adds	r0, #1
 8001dae:	d09b      	beq.n	8001ce8 <_printf_i+0x164>
 8001db0:	3501      	adds	r5, #1
 8001db2:	68e3      	ldr	r3, [r4, #12]
 8001db4:	9903      	ldr	r1, [sp, #12]
 8001db6:	1a5b      	subs	r3, r3, r1
 8001db8:	42ab      	cmp	r3, r5
 8001dba:	dcf2      	bgt.n	8001da2 <_printf_i+0x21e>
 8001dbc:	e7eb      	b.n	8001d96 <_printf_i+0x212>
 8001dbe:	2500      	movs	r5, #0
 8001dc0:	f104 0619 	add.w	r6, r4, #25
 8001dc4:	e7f5      	b.n	8001db2 <_printf_i+0x22e>
 8001dc6:	bf00      	nop
 8001dc8:	080020b1 	.word	0x080020b1
 8001dcc:	080020c2 	.word	0x080020c2

08001dd0 <memcpy>:
 8001dd0:	440a      	add	r2, r1
 8001dd2:	4291      	cmp	r1, r2
 8001dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001dd8:	d100      	bne.n	8001ddc <memcpy+0xc>
 8001dda:	4770      	bx	lr
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001de6:	4291      	cmp	r1, r2
 8001de8:	d1f9      	bne.n	8001dde <memcpy+0xe>
 8001dea:	bd10      	pop	{r4, pc}

08001dec <memmove>:
 8001dec:	4288      	cmp	r0, r1
 8001dee:	b510      	push	{r4, lr}
 8001df0:	eb01 0402 	add.w	r4, r1, r2
 8001df4:	d902      	bls.n	8001dfc <memmove+0x10>
 8001df6:	4284      	cmp	r4, r0
 8001df8:	4623      	mov	r3, r4
 8001dfa:	d807      	bhi.n	8001e0c <memmove+0x20>
 8001dfc:	1e43      	subs	r3, r0, #1
 8001dfe:	42a1      	cmp	r1, r4
 8001e00:	d008      	beq.n	8001e14 <memmove+0x28>
 8001e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e0a:	e7f8      	b.n	8001dfe <memmove+0x12>
 8001e0c:	4402      	add	r2, r0
 8001e0e:	4601      	mov	r1, r0
 8001e10:	428a      	cmp	r2, r1
 8001e12:	d100      	bne.n	8001e16 <memmove+0x2a>
 8001e14:	bd10      	pop	{r4, pc}
 8001e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e1e:	e7f7      	b.n	8001e10 <memmove+0x24>

08001e20 <_free_r>:
 8001e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e22:	2900      	cmp	r1, #0
 8001e24:	d048      	beq.n	8001eb8 <_free_r+0x98>
 8001e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e2a:	9001      	str	r0, [sp, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8001e32:	bfb8      	it	lt
 8001e34:	18e4      	addlt	r4, r4, r3
 8001e36:	f000 f8d3 	bl	8001fe0 <__malloc_lock>
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <_free_r+0x9c>)
 8001e3c:	9801      	ldr	r0, [sp, #4]
 8001e3e:	6813      	ldr	r3, [r2, #0]
 8001e40:	4615      	mov	r5, r2
 8001e42:	b933      	cbnz	r3, 8001e52 <_free_r+0x32>
 8001e44:	6063      	str	r3, [r4, #4]
 8001e46:	6014      	str	r4, [r2, #0]
 8001e48:	b003      	add	sp, #12
 8001e4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e4e:	f000 b8cd 	b.w	8001fec <__malloc_unlock>
 8001e52:	42a3      	cmp	r3, r4
 8001e54:	d90b      	bls.n	8001e6e <_free_r+0x4e>
 8001e56:	6821      	ldr	r1, [r4, #0]
 8001e58:	1862      	adds	r2, r4, r1
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	bf04      	itt	eq
 8001e5e:	681a      	ldreq	r2, [r3, #0]
 8001e60:	685b      	ldreq	r3, [r3, #4]
 8001e62:	6063      	str	r3, [r4, #4]
 8001e64:	bf04      	itt	eq
 8001e66:	1852      	addeq	r2, r2, r1
 8001e68:	6022      	streq	r2, [r4, #0]
 8001e6a:	602c      	str	r4, [r5, #0]
 8001e6c:	e7ec      	b.n	8001e48 <_free_r+0x28>
 8001e6e:	461a      	mov	r2, r3
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	b10b      	cbz	r3, 8001e78 <_free_r+0x58>
 8001e74:	42a3      	cmp	r3, r4
 8001e76:	d9fa      	bls.n	8001e6e <_free_r+0x4e>
 8001e78:	6811      	ldr	r1, [r2, #0]
 8001e7a:	1855      	adds	r5, r2, r1
 8001e7c:	42a5      	cmp	r5, r4
 8001e7e:	d10b      	bne.n	8001e98 <_free_r+0x78>
 8001e80:	6824      	ldr	r4, [r4, #0]
 8001e82:	4421      	add	r1, r4
 8001e84:	1854      	adds	r4, r2, r1
 8001e86:	42a3      	cmp	r3, r4
 8001e88:	6011      	str	r1, [r2, #0]
 8001e8a:	d1dd      	bne.n	8001e48 <_free_r+0x28>
 8001e8c:	681c      	ldr	r4, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	6053      	str	r3, [r2, #4]
 8001e92:	4421      	add	r1, r4
 8001e94:	6011      	str	r1, [r2, #0]
 8001e96:	e7d7      	b.n	8001e48 <_free_r+0x28>
 8001e98:	d902      	bls.n	8001ea0 <_free_r+0x80>
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	6003      	str	r3, [r0, #0]
 8001e9e:	e7d3      	b.n	8001e48 <_free_r+0x28>
 8001ea0:	6825      	ldr	r5, [r4, #0]
 8001ea2:	1961      	adds	r1, r4, r5
 8001ea4:	428b      	cmp	r3, r1
 8001ea6:	bf04      	itt	eq
 8001ea8:	6819      	ldreq	r1, [r3, #0]
 8001eaa:	685b      	ldreq	r3, [r3, #4]
 8001eac:	6063      	str	r3, [r4, #4]
 8001eae:	bf04      	itt	eq
 8001eb0:	1949      	addeq	r1, r1, r5
 8001eb2:	6021      	streq	r1, [r4, #0]
 8001eb4:	6054      	str	r4, [r2, #4]
 8001eb6:	e7c7      	b.n	8001e48 <_free_r+0x28>
 8001eb8:	b003      	add	sp, #12
 8001eba:	bd30      	pop	{r4, r5, pc}
 8001ebc:	20000624 	.word	0x20000624

08001ec0 <_malloc_r>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	1ccd      	adds	r5, r1, #3
 8001ec4:	f025 0503 	bic.w	r5, r5, #3
 8001ec8:	3508      	adds	r5, #8
 8001eca:	2d0c      	cmp	r5, #12
 8001ecc:	bf38      	it	cc
 8001ece:	250c      	movcc	r5, #12
 8001ed0:	2d00      	cmp	r5, #0
 8001ed2:	4606      	mov	r6, r0
 8001ed4:	db01      	blt.n	8001eda <_malloc_r+0x1a>
 8001ed6:	42a9      	cmp	r1, r5
 8001ed8:	d903      	bls.n	8001ee2 <_malloc_r+0x22>
 8001eda:	230c      	movs	r3, #12
 8001edc:	6033      	str	r3, [r6, #0]
 8001ede:	2000      	movs	r0, #0
 8001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee2:	f000 f87d 	bl	8001fe0 <__malloc_lock>
 8001ee6:	4921      	ldr	r1, [pc, #132]	; (8001f6c <_malloc_r+0xac>)
 8001ee8:	680a      	ldr	r2, [r1, #0]
 8001eea:	4614      	mov	r4, r2
 8001eec:	b99c      	cbnz	r4, 8001f16 <_malloc_r+0x56>
 8001eee:	4f20      	ldr	r7, [pc, #128]	; (8001f70 <_malloc_r+0xb0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b923      	cbnz	r3, 8001efe <_malloc_r+0x3e>
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f000 f862 	bl	8001fc0 <_sbrk_r>
 8001efc:	6038      	str	r0, [r7, #0]
 8001efe:	4629      	mov	r1, r5
 8001f00:	4630      	mov	r0, r6
 8001f02:	f000 f85d 	bl	8001fc0 <_sbrk_r>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	d123      	bne.n	8001f52 <_malloc_r+0x92>
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	6033      	str	r3, [r6, #0]
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f000 f86c 	bl	8001fec <__malloc_unlock>
 8001f14:	e7e3      	b.n	8001ede <_malloc_r+0x1e>
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	1b5b      	subs	r3, r3, r5
 8001f1a:	d417      	bmi.n	8001f4c <_malloc_r+0x8c>
 8001f1c:	2b0b      	cmp	r3, #11
 8001f1e:	d903      	bls.n	8001f28 <_malloc_r+0x68>
 8001f20:	6023      	str	r3, [r4, #0]
 8001f22:	441c      	add	r4, r3
 8001f24:	6025      	str	r5, [r4, #0]
 8001f26:	e004      	b.n	8001f32 <_malloc_r+0x72>
 8001f28:	6863      	ldr	r3, [r4, #4]
 8001f2a:	42a2      	cmp	r2, r4
 8001f2c:	bf0c      	ite	eq
 8001f2e:	600b      	streq	r3, [r1, #0]
 8001f30:	6053      	strne	r3, [r2, #4]
 8001f32:	4630      	mov	r0, r6
 8001f34:	f000 f85a 	bl	8001fec <__malloc_unlock>
 8001f38:	f104 000b 	add.w	r0, r4, #11
 8001f3c:	1d23      	adds	r3, r4, #4
 8001f3e:	f020 0007 	bic.w	r0, r0, #7
 8001f42:	1ac2      	subs	r2, r0, r3
 8001f44:	d0cc      	beq.n	8001ee0 <_malloc_r+0x20>
 8001f46:	1a1b      	subs	r3, r3, r0
 8001f48:	50a3      	str	r3, [r4, r2]
 8001f4a:	e7c9      	b.n	8001ee0 <_malloc_r+0x20>
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	6864      	ldr	r4, [r4, #4]
 8001f50:	e7cc      	b.n	8001eec <_malloc_r+0x2c>
 8001f52:	1cc4      	adds	r4, r0, #3
 8001f54:	f024 0403 	bic.w	r4, r4, #3
 8001f58:	42a0      	cmp	r0, r4
 8001f5a:	d0e3      	beq.n	8001f24 <_malloc_r+0x64>
 8001f5c:	1a21      	subs	r1, r4, r0
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f000 f82e 	bl	8001fc0 <_sbrk_r>
 8001f64:	3001      	adds	r0, #1
 8001f66:	d1dd      	bne.n	8001f24 <_malloc_r+0x64>
 8001f68:	e7cf      	b.n	8001f0a <_malloc_r+0x4a>
 8001f6a:	bf00      	nop
 8001f6c:	20000624 	.word	0x20000624
 8001f70:	20000628 	.word	0x20000628

08001f74 <_realloc_r>:
 8001f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f76:	4607      	mov	r7, r0
 8001f78:	4614      	mov	r4, r2
 8001f7a:	460e      	mov	r6, r1
 8001f7c:	b921      	cbnz	r1, 8001f88 <_realloc_r+0x14>
 8001f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001f82:	4611      	mov	r1, r2
 8001f84:	f7ff bf9c 	b.w	8001ec0 <_malloc_r>
 8001f88:	b922      	cbnz	r2, 8001f94 <_realloc_r+0x20>
 8001f8a:	f7ff ff49 	bl	8001e20 <_free_r>
 8001f8e:	4625      	mov	r5, r4
 8001f90:	4628      	mov	r0, r5
 8001f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f94:	f000 f830 	bl	8001ff8 <_malloc_usable_size_r>
 8001f98:	42a0      	cmp	r0, r4
 8001f9a:	d20f      	bcs.n	8001fbc <_realloc_r+0x48>
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	4638      	mov	r0, r7
 8001fa0:	f7ff ff8e 	bl	8001ec0 <_malloc_r>
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d0f2      	beq.n	8001f90 <_realloc_r+0x1c>
 8001faa:	4631      	mov	r1, r6
 8001fac:	4622      	mov	r2, r4
 8001fae:	f7ff ff0f 	bl	8001dd0 <memcpy>
 8001fb2:	4631      	mov	r1, r6
 8001fb4:	4638      	mov	r0, r7
 8001fb6:	f7ff ff33 	bl	8001e20 <_free_r>
 8001fba:	e7e9      	b.n	8001f90 <_realloc_r+0x1c>
 8001fbc:	4635      	mov	r5, r6
 8001fbe:	e7e7      	b.n	8001f90 <_realloc_r+0x1c>

08001fc0 <_sbrk_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4d06      	ldr	r5, [pc, #24]	; (8001fdc <_sbrk_r+0x1c>)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	4608      	mov	r0, r1
 8001fca:	602b      	str	r3, [r5, #0]
 8001fcc:	f7fe fd8c 	bl	8000ae8 <_sbrk>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d102      	bne.n	8001fda <_sbrk_r+0x1a>
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	b103      	cbz	r3, 8001fda <_sbrk_r+0x1a>
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	20001cc4 	.word	0x20001cc4

08001fe0 <__malloc_lock>:
 8001fe0:	4801      	ldr	r0, [pc, #4]	; (8001fe8 <__malloc_lock+0x8>)
 8001fe2:	f000 b811 	b.w	8002008 <__retarget_lock_acquire_recursive>
 8001fe6:	bf00      	nop
 8001fe8:	20001ccc 	.word	0x20001ccc

08001fec <__malloc_unlock>:
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <__malloc_unlock+0x8>)
 8001fee:	f000 b80c 	b.w	800200a <__retarget_lock_release_recursive>
 8001ff2:	bf00      	nop
 8001ff4:	20001ccc 	.word	0x20001ccc

08001ff8 <_malloc_usable_size_r>:
 8001ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ffc:	1f18      	subs	r0, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bfbc      	itt	lt
 8002002:	580b      	ldrlt	r3, [r1, r0]
 8002004:	18c0      	addlt	r0, r0, r3
 8002006:	4770      	bx	lr

08002008 <__retarget_lock_acquire_recursive>:
 8002008:	4770      	bx	lr

0800200a <__retarget_lock_release_recursive>:
 800200a:	4770      	bx	lr

0800200c <_init>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	bf00      	nop
 8002010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002012:	bc08      	pop	{r3}
 8002014:	469e      	mov	lr, r3
 8002016:	4770      	bx	lr

08002018 <_fini>:
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	bf00      	nop
 800201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201e:	bc08      	pop	{r3}
 8002020:	469e      	mov	lr, r3
 8002022:	4770      	bx	lr
 8002024:	0000      	movs	r0, r0
	...

08002028 <__update_firmware_veneer>:
 8002028:	f85f f000 	ldr.w	pc, [pc]	; 800202c <__update_firmware_veneer+0x4>
 800202c:	20000595 	.word	0x20000595

Disassembly of section .data:

20000400 <SystemCoreClock>:
20000400:	00f42400                                .$..

20000404 <uwTickPrio>:
20000404:	00000010                                ....

20000408 <uwTickFreq>:
20000408:	00000001                                ....

2000040c <_impure_ptr>:
2000040c:	20000410                                ... 

20000410 <impure_data>:
	...

20000470 <Flash_Erase_Sector>:
__attribute__ ((section (".function_in_ram"))) void Flash_Erase_Sector(char sector){ // du an thu te thif phai co tra ve ma loi
20000470:	b480      	push	{r7}
20000472:	b087      	sub	sp, #28
20000474:	af00      	add	r7, sp, #0
20000476:	4603      	mov	r3, r0
20000478:	71fb      	strb	r3, [r7, #7]
	uint32_t* FLASH_SR = (uint32_t*)(FLASH_ADDR_BASE + 0x0C);
2000047a:	4b1e      	ldr	r3, [pc, #120]	; (200004f4 <Flash_Erase_Sector+0x84>)
2000047c:	617b      	str	r3, [r7, #20]
	uint32_t* FLASH_CR = (uint32_t*)(FLASH_ADDR_BASE + 0x10);
2000047e:	4b1e      	ldr	r3, [pc, #120]	; (200004f8 <Flash_Erase_Sector+0x88>)
20000480:	613b      	str	r3, [r7, #16]
	uint32_t* FLASH_KEYR = (uint32_t*)(FLASH_ADDR_BASE + 0x04);
20000482:	4b1e      	ldr	r3, [pc, #120]	; (200004fc <Flash_Erase_Sector+0x8c>)
20000484:	60fb      	str	r3, [r7, #12]
	while(((*FLASH_SR >> 16) &1 ) == 1);
20000486:	bf00      	nop
20000488:	697b      	ldr	r3, [r7, #20]
2000048a:	681b      	ldr	r3, [r3, #0]
2000048c:	0c1b      	lsrs	r3, r3, #16
2000048e:	f003 0301 	and.w	r3, r3, #1
20000492:	2b00      	cmp	r3, #0
20000494:	d1f8      	bne.n	20000488 <Flash_Erase_Sector+0x18>
	if(((*FLASH_CR >> 31) & 1) == 1){
20000496:	693b      	ldr	r3, [r7, #16]
20000498:	681b      	ldr	r3, [r3, #0]
2000049a:	0fdb      	lsrs	r3, r3, #31
2000049c:	2b01      	cmp	r3, #1
2000049e:	d105      	bne.n	200004ac <Flash_Erase_Sector+0x3c>
		*FLASH_KEYR =  0x45670123;
200004a0:	68fb      	ldr	r3, [r7, #12]
200004a2:	4a17      	ldr	r2, [pc, #92]	; (20000500 <Flash_Erase_Sector+0x90>)
200004a4:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
200004a6:	68fb      	ldr	r3, [r7, #12]
200004a8:	4a16      	ldr	r2, [pc, #88]	; (20000504 <Flash_Erase_Sector+0x94>)
200004aa:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (1 << 1) | (sector << 3);
200004ac:	693b      	ldr	r3, [r7, #16]
200004ae:	681b      	ldr	r3, [r3, #0]
200004b0:	79fa      	ldrb	r2, [r7, #7]
200004b2:	00d2      	lsls	r2, r2, #3
200004b4:	4313      	orrs	r3, r2
200004b6:	f043 0202 	orr.w	r2, r3, #2
200004ba:	693b      	ldr	r3, [r7, #16]
200004bc:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (1<<16); //start erase operation
200004be:	693b      	ldr	r3, [r7, #16]
200004c0:	681b      	ldr	r3, [r3, #0]
200004c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
200004c6:	693b      	ldr	r3, [r7, #16]
200004c8:	601a      	str	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1);//wait BSY is clean
200004ca:	bf00      	nop
200004cc:	697b      	ldr	r3, [r7, #20]
200004ce:	681b      	ldr	r3, [r3, #0]
200004d0:	0c1b      	lsrs	r3, r3, #16
200004d2:	f003 0301 	and.w	r3, r3, #1
200004d6:	2b00      	cmp	r3, #0
200004d8:	d1f8      	bne.n	200004cc <Flash_Erase_Sector+0x5c>
	*FLASH_CR &= ~(1 << 1);
200004da:	693b      	ldr	r3, [r7, #16]
200004dc:	681b      	ldr	r3, [r3, #0]
200004de:	f023 0202 	bic.w	r2, r3, #2
200004e2:	693b      	ldr	r3, [r7, #16]
200004e4:	601a      	str	r2, [r3, #0]
}
200004e6:	bf00      	nop
200004e8:	371c      	adds	r7, #28
200004ea:	46bd      	mov	sp, r7
200004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200004f0:	4770      	bx	lr
200004f2:	bf00      	nop
200004f4:	40023c0c 	.word	0x40023c0c
200004f8:	40023c10 	.word	0x40023c10
200004fc:	40023c04 	.word	0x40023c04
20000500:	45670123 	.word	0x45670123
20000504:	cdef89ab 	.word	0xcdef89ab

20000508 <Flash_Program>:
__attribute__ ((section (".function_in_ram"))) void Flash_Program(uint8_t* addr, uint8_t value){
20000508:	b480      	push	{r7}
2000050a:	b087      	sub	sp, #28
2000050c:	af00      	add	r7, sp, #0
2000050e:	6078      	str	r0, [r7, #4]
20000510:	460b      	mov	r3, r1
20000512:	70fb      	strb	r3, [r7, #3]
	uint32_t* FLASH_SR = (uint32_t*)(FLASH_ADDR_BASE + 0x0C);
20000514:	4b1a      	ldr	r3, [pc, #104]	; (20000580 <Flash_Program+0x78>)
20000516:	617b      	str	r3, [r7, #20]
	uint32_t* FLASH_CR = (uint32_t*)(FLASH_ADDR_BASE + 0x10);
20000518:	4b1a      	ldr	r3, [pc, #104]	; (20000584 <Flash_Program+0x7c>)
2000051a:	613b      	str	r3, [r7, #16]
	uint32_t* FLASH_KEYR = (uint32_t*)(FLASH_ADDR_BASE + 0x04);
2000051c:	4b1a      	ldr	r3, [pc, #104]	; (20000588 <Flash_Program+0x80>)
2000051e:	60fb      	str	r3, [r7, #12]
	if(((*FLASH_CR >> 31) & 1) == 1){
20000520:	693b      	ldr	r3, [r7, #16]
20000522:	681b      	ldr	r3, [r3, #0]
20000524:	0fdb      	lsrs	r3, r3, #31
20000526:	2b01      	cmp	r3, #1
20000528:	d105      	bne.n	20000536 <Flash_Program+0x2e>
		*FLASH_KEYR =  0x45670123;
2000052a:	68fb      	ldr	r3, [r7, #12]
2000052c:	4a17      	ldr	r2, [pc, #92]	; (2000058c <Flash_Program+0x84>)
2000052e:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
20000530:	68fb      	ldr	r3, [r7, #12]
20000532:	4a17      	ldr	r2, [pc, #92]	; (20000590 <Flash_Program+0x88>)
20000534:	601a      	str	r2, [r3, #0]
	while(((*FLASH_SR >> 16) &1 ) == 1);
20000536:	bf00      	nop
20000538:	697b      	ldr	r3, [r7, #20]
2000053a:	681b      	ldr	r3, [r3, #0]
2000053c:	0c1b      	lsrs	r3, r3, #16
2000053e:	f003 0301 	and.w	r3, r3, #1
20000542:	2b00      	cmp	r3, #0
20000544:	d1f8      	bne.n	20000538 <Flash_Program+0x30>
	*FLASH_CR |= (1 << 0);
20000546:	693b      	ldr	r3, [r7, #16]
20000548:	681b      	ldr	r3, [r3, #0]
2000054a:	f043 0201 	orr.w	r2, r3, #1
2000054e:	693b      	ldr	r3, [r7, #16]
20000550:	601a      	str	r2, [r3, #0]
	*addr = value;
20000552:	687b      	ldr	r3, [r7, #4]
20000554:	78fa      	ldrb	r2, [r7, #3]
20000556:	701a      	strb	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1);
20000558:	bf00      	nop
2000055a:	697b      	ldr	r3, [r7, #20]
2000055c:	681b      	ldr	r3, [r3, #0]
2000055e:	0c1b      	lsrs	r3, r3, #16
20000560:	f003 0301 	and.w	r3, r3, #1
20000564:	2b00      	cmp	r3, #0
20000566:	d1f8      	bne.n	2000055a <Flash_Program+0x52>
	*FLASH_CR &= ~(1<<0);
20000568:	693b      	ldr	r3, [r7, #16]
2000056a:	681b      	ldr	r3, [r3, #0]
2000056c:	f023 0201 	bic.w	r2, r3, #1
20000570:	693b      	ldr	r3, [r7, #16]
20000572:	601a      	str	r2, [r3, #0]
}
20000574:	bf00      	nop
20000576:	371c      	adds	r7, #28
20000578:	46bd      	mov	sp, r7
2000057a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000057e:	4770      	bx	lr
20000580:	40023c0c 	.word	0x40023c0c
20000584:	40023c10 	.word	0x40023c10
20000588:	40023c04 	.word	0x40023c04
2000058c:	45670123 	.word	0x45670123
20000590:	cdef89ab 	.word	0xcdef89ab

20000594 <update_firmware>:
{
20000594:	b580      	push	{r7, lr}
20000596:	b084      	sub	sp, #16
20000598:	af00      	add	r7, sp, #0
	uint32_t* SYST_CR = (uint32_t*)(0xe000e010);
2000059a:	4b16      	ldr	r3, [pc, #88]	; (200005f4 <update_firmware+0x60>)
2000059c:	60bb      	str	r3, [r7, #8]
	*SYST_CR &= ~1;
2000059e:	68bb      	ldr	r3, [r7, #8]
200005a0:	681b      	ldr	r3, [r3, #0]
200005a2:	f023 0201 	bic.w	r2, r3, #1
200005a6:	68bb      	ldr	r3, [r7, #8]
200005a8:	601a      	str	r2, [r3, #0]
	Flash_Erase_Sector(0);
200005aa:	2000      	movs	r0, #0
200005ac:	f7ff ff60 	bl	20000470 <Flash_Erase_Sector>
	char *flash_addr = (char*) 0x08000000;
200005b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200005b4:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < sizeof(new_fw_data); i++)
200005b6:	2300      	movs	r3, #0
200005b8:	60fb      	str	r3, [r7, #12]
200005ba:	e00d      	b.n	200005d8 <update_firmware+0x44>
		Flash_Program(flash_addr + i, new_fw_data[i]);
200005bc:	68fb      	ldr	r3, [r7, #12]
200005be:	687a      	ldr	r2, [r7, #4]
200005c0:	441a      	add	r2, r3
200005c2:	490d      	ldr	r1, [pc, #52]	; (200005f8 <update_firmware+0x64>)
200005c4:	68fb      	ldr	r3, [r7, #12]
200005c6:	440b      	add	r3, r1
200005c8:	781b      	ldrb	r3, [r3, #0]
200005ca:	4619      	mov	r1, r3
200005cc:	4610      	mov	r0, r2
200005ce:	f7ff ff9b 	bl	20000508 <Flash_Program>
	for(int i = 0; i < sizeof(new_fw_data); i++)
200005d2:	68fb      	ldr	r3, [r7, #12]
200005d4:	3301      	adds	r3, #1
200005d6:	60fb      	str	r3, [r7, #12]
200005d8:	68fb      	ldr	r3, [r7, #12]
200005da:	f241 6273 	movw	r2, #5747	; 0x1673
200005de:	4293      	cmp	r3, r2
200005e0:	d9ec      	bls.n	200005bc <update_firmware+0x28>
	uint32_t* AIRCR = (uint32_t*)0xE000ed0c;
200005e2:	4b06      	ldr	r3, [pc, #24]	; (200005fc <update_firmware+0x68>)
200005e4:	603b      	str	r3, [r7, #0]
	*AIRCR = (0x5fa << 16) | (1 << 2);
200005e6:	683b      	ldr	r3, [r7, #0]
200005e8:	4a05      	ldr	r2, [pc, #20]	; (20000600 <update_firmware+0x6c>)
200005ea:	601a      	str	r2, [r3, #0]
}
200005ec:	bf00      	nop
200005ee:	3710      	adds	r7, #16
200005f0:	46bd      	mov	sp, r7
200005f2:	bd80      	pop	{r7, pc}
200005f4:	e000e010 	.word	0xe000e010
200005f8:	2000062c 	.word	0x2000062c
200005fc:	e000ed0c 	.word	0xe000ed0c
20000600:	05fa0004 	.word	0x05fa0004
